<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>渋谷ではたらくインフラエンジニアのブログ</title>
 <link href="http://b.l0g.jp/atom.xml" rel="self"/>
 <link href="http://b.l0g.jp/"/>
 <updated>2016-04-01T10:52:50-07:00</updated>
 <id>http://b.l0g.jp</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>AWSのEBSボリュームのスナップショットを定期的に取る</title>
   <link href="http://b.l0g.jp/aws/periodic-ebs-snapshot/"/>
   <updated>2015-10-19T06:33:30-07:00</updated>
   <id>http://b.l0g.jp/aws/periodic-ebs-snapshot</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/aws/periodic-ebs-snapshot/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;AWSのEBSボリュームのスナップショットを定期的に取る&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/aws/periodic-ebs-snapshot/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/aws/periodic-ebs-snapshot/&quot; data-text=&quot;AWSのEBSボリュームのスナップショットを定期的に取る&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/aws/periodic-ebs-snapshot/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;小ネタだけど、久しぶりに技術的な内容の記事を書いてみる。最近はこういうのはQiitaに書くのが流行り？&lt;/p&gt;

&lt;h2 id=&quot;ebs&quot;&gt;EBSボリュームのスナップショット&lt;/h2&gt;

&lt;p&gt;インスタンスストレージ(インスタンスに無料で付いてくるローカルストレージ)と比べてEBSを使うことの利点の一つに、スナップショットを取れるというのがある。これはもちろん&lt;a href=&quot;http://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/ebs-creating-snapshot.html&quot;&gt;AWSのコンソールからの操作&lt;/a&gt;でも、&lt;a href=&quot;https://aws.amazon.com/jp/cli/&quot;&gt;awscli&lt;/a&gt;のようなツールを使ってもできるんだけど、いちいちこれらの操作をやるのは面倒になってくる。そうすると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自動で定期的にスナップショットを取りたい&lt;/li&gt;
  &lt;li&gt;古いスナップショットは自動的に消したい&lt;/li&gt;
  &lt;li&gt;複数のEBSボリュームのスナップショットをまとめて取りたい&lt;/li&gt;
  &lt;li&gt;全ボリュームのスナップショットを取る必要はなく、一部だけ取っておきたい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;みたいな話が出てくる。&lt;/p&gt;

&lt;p&gt;そういう時にはもちろんawscliや各言語のSDKを使って自分でこれを実装してもいいのだが、&lt;a href=&quot;https://github.com/colinbjohnson/aws-missing-tools&quot;&gt;AWS Missing Tools&lt;/a&gt;と言う、AWSに関するちょっと痒いところに手が届くツール集があって、これに含まれるEBSスナップショット取得用のスクリプト ec2-automate-backup.sh を使うと便利。&lt;/p&gt;

&lt;h2 id=&quot;ec2-automate-backupsh&quot;&gt;ec2-automate-backup.shの使い方&lt;/h2&gt;

&lt;p&gt;拡張子でわかる通り単なるシェルスクリプトで、中ではawscliを駆使して処理を行っている。なので、前提としてawscliがインストールされていて、credentialの設定が終わっている必要がある。awscliのインストール方法については割愛。&lt;/p&gt;

&lt;p&gt;awscliの用意が済んだら、リポジトリをクローンしてきてコマンドを叩けばよい。&lt;/p&gt;

&lt;p&gt;[code lang=text]&lt;/p&gt;

&lt;p&gt;git clone https://github.com/colinbjohnson/aws-missing-tools.git&lt;/p&gt;

&lt;p&gt;cd aws-missing-tools/ec2-automate-backup&lt;/p&gt;

&lt;p&gt;[/code]&lt;/p&gt;

&lt;p&gt;コマンドのオプションは&lt;a href=&quot;https://github.com/colinbjohnson/aws-missing-tools/tree/master/ec2-automate-backup&quot;&gt;README&lt;/a&gt;に書いてあるが、イマイチわかりにくい。最低限以下がわかればとりあえずのバックアップは取れる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-s [volumeid|tag]&lt;/code&gt; : バックアップ対象のボリュームをボリュームID指定するか、特定のタグが付いているもので指定するかを選択する。tagを選んでおくと、例えば「Backup=true」と付いているボリュームを一括でバックアップする、ということが可能。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-v ボリュームID&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;-s volumeid&lt;/code&gt;を指定した場合にボリュームIDを指定する。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t &#39;タグ名,Values=値&#39;&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;-s tag&lt;/code&gt;を指定した場合にタグ名を指定する。上の例のように「Backup=true」のタグが付いているボリュームをバックアップする場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;-t &#39;Backup,Values=true&#39;&lt;/code&gt;と指定する。ここちょっとわかりにくい。なお、&lt;em&gt;タグはEC2インスタンスではなくEBSボリュームに付ける&lt;/em&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-r リージョン&lt;/code&gt; : リージョン指定。ap-northeast-1とか。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; : タグ指定でスナップショットを取った時、スナップショットのNameタグに、元のボリュームIDを入れる&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-k 日数&lt;/code&gt; : 指定した日数以上経過したスナップショットは削除可能タグが付けられる&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;-k&lt;/code&gt;で指定した日数以上経過したスナップショットを実際に削除する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的には、以下のようにコマンドを実行する。これは「Backup=trueタグが付いたボリュームのスナップショットを作成し、7日以上経過したスナップショットを削除する」例。&lt;/p&gt;

&lt;p&gt;[code lang=text]&lt;/p&gt;

&lt;p&gt;bash ec2-automate-backup.sh -s tag -t ‘Backup,Values=true’ -r ap-northeast-1 -n -k 7 -p&lt;/p&gt;

&lt;p&gt;[/code]&lt;/p&gt;

&lt;p&gt;実際の挙動的には、&lt;code class=&quot;highlighter-rouge&quot;&gt;-k 7&lt;/code&gt;オプションがあるので7日経つとスナップショットにPurgeAllow=trueタグが付けられ、次の実行で&lt;code class=&quot;highlighter-rouge&quot;&gt;-p&lt;/code&gt;オプションが効いてPurgeAllow=trueがついているスナップショットが消される、という流れになる。&lt;/p&gt;

&lt;p&gt;これをcrontabに書いておくなりJenkinsで定期実行するなりしておけば、うっかりファイルを消してしまったとか、データベースがぶっ壊れたみたいな時にもサクッと戻せて幸せになれる。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Twitterボットを作るのがひそかな趣味</title>
   <link href="http://b.l0g.jp/misc/my-twitter-bots/"/>
   <updated>2015-05-22T06:26:26-07:00</updated>
   <id>http://b.l0g.jp/misc/my-twitter-bots</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/misc/my-twitter-bots/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Twitterボットを作るのがひそかな趣味&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/misc/my-twitter-bots/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/misc/my-twitter-bots/&quot; data-text=&quot;Twitterボットを作るのがひそかな趣味&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/misc/my-twitter-bots/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;プログラミングの勉強にと思ってTwitterボットを作ってみたら、ことあるごとに「あっ、これもボットになってたら便利そう」と思うようになってしまって、さらにいくつか作るという流れ。それなりに便利なのができると、ほっといてもフォロワーが増えていくのが楽しくなってしまう。今まで作ったボットのまとめ。&lt;/p&gt;

&lt;h1 id=&quot;bot-a-hrefhttpstwittercomfukadakyuyabot-targetblankfukadakyuyabota&quot;&gt;深田久弥bot  &lt;a href=&quot;https://twitter.com/fukadakyuya_bot&quot; target=&quot;_blank&quot;&gt;@fukadakyuya_bot&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;TLでフォロワーのみなさまと盛り上がったのがきっかけで、初めて作ったTwitterボット。ボットをフォローしているユーザが深田久弥の著書「&lt;a href=&quot;http://www.amazon.co.jp/gp/product/4101220026/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=4101220026&amp;amp;linkCode=as2&amp;amp;tag=l0gjp-22&quot; rel=&quot;nofollow&quot;&gt;日本百名山 (新潮文庫)&lt;/a&gt;&lt;img style=&quot;border: none !important; margin: 0px !important;&quot; src=&quot;http://ir-jp.amazon-adsystem.com/e/ir?t=l0gjp-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=4101220026&quot; alt=&quot;&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; /&gt;」に含まれる山名を含んだつぶやきをすると、同書の中からその山の特徴などを表した部分をリプライする。また、1日1回7：00にはランダムに抜粋をつぶやく。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;ja&quot;&gt;
    &lt;a href=&quot;https://twitter.com/doublemarket&quot;&gt;@doublemarket&lt;/a&gt; 夕方、日本海に沈む太陽の余映を受けて、白山が薔薇色に染まるひと時は、美しいものの究極であった。みるみるうちに薄鼠に暮れて行くまでの、暫くの間の微妙な色彩の推移は、この世のものとは思われなかった。
  &lt;/p&gt;
  
  &lt;p&gt;
    — 深田久弥bot (@fukadakyuya_bot) &lt;a href=&quot;https://twitter.com/fukadakyuya_bot/status/493185509611413504&quot;&gt;2014, 7月 27&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最初はPHPで書いたのだがいつの間にかうまく動かなくなったりして、Rubyで書き換えた。ソースコードは&lt;a href=&quot;https://github.com/doublemarket/twitterbot.rb&quot; target=&quot;_blank&quot;&gt;Githubに上げてある&lt;/a&gt;。作った頃はRubyのエコシステムが良く分かってなくて、bundler使わずにやってたりして、自分でもどうやって動いてるのか理解してなかったなあｗ リプライする山名にどういう傾向があるのか気になったので、&lt;a href=&quot;http://f.l0g.jp/&quot; target=&quot;_blank&quot;&gt;山名ごとにリプライ数を集計する仕組み&lt;/a&gt;も作ってみた。基本的に富士山がダントツに多いのだが、例えば最近だと吾妻山や蔵王山(火山活動活発化)、立山(アルペンルート開通)といったように、急にリプライ数が増えた山があると、大体そこでは何かあったということが分かって面白い。&lt;/p&gt;

&lt;h1 id=&quot;a-hrefhttpstwittercomyamatenki-targetblankyamatenkia&quot;&gt;山の天気 &lt;a href=&quot;https://twitter.com/yamatenki&quot; target=&quot;_blank&quot;&gt;@yamatenki&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;毎朝7：30前後に、その週末に天気がいい(登山日和になりそうな)山を地域ごとにツイートする。 土曜と日曜それぞれ分けて判断するようになっている。祝日などの連休にも対応させたいが、めんどくさそうなので先送りしてしまっている。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
  &lt;p&gt;
    【南アルプス】今週末、山に行くなら「甲斐駒ヶ岳」「仙丈岳」「鳳凰山」「北岳」「間ノ岳」、日曜日なら「塩見岳」「悪沢岳」「赤石岳」「聖岳」「光岳」の天気が良いようです。 &lt;a href=&quot;http://t.co/YU8l9oRZUo&quot;&gt;http://t.co/YU8l9oRZUo&lt;/a&gt; — 山の天気 (@yamatenki) &lt;a href=&quot;https://twitter.com/yamatenki/status/599341524011372545&quot;&gt;2015, 5月 15&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;山名を含んだメンションを送ると、少し詳しい天気予報をリプライしてくれる。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;ja&quot;&gt;
    &lt;a href=&quot;https://twitter.com/doublemarket&quot;&gt;@doublemarket&lt;/a&gt;【今週末の丹沢山】03/29土曜日は、くもり時々晴れ、降水確率は12時まで30%、18時まで30%。03/30日曜日は、くもり一時雨、降水確率は12時まで50%、18時まで50%。 (神奈川県西部) &lt;a href=&quot;http://t.co/0Kh75x9Egg&quot;&gt;http://t.co/0Kh75x9Egg&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    — 山の天気 (@yamatenki) &lt;a href=&quot;https://twitter.com/yamatenki/status/448258476980981760&quot;&gt;2014, 3月 25&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;こちらも最初はPHPで作ったが今はRuby製。&lt;a href=&quot;http://t.l0g.jp/&quot; target=&quot;_blank&quot;&gt;天気が一覧で見れるページ&lt;/a&gt;も定期的に生成している。 深田久弥botと違ってうざくない作りなのもあってか、フォロワーが4600以上(2015年5月)もいて、自分の作ったボットの中では一番多い。&lt;/p&gt;

&lt;h1 id=&quot;hatebu-english-a-hrefhttpstwittercomhatebue-targetblankhatebuea&quot;&gt;hatebu english &lt;a href=&quot;https://twitter.com/hatebu_e&quot; target=&quot;_blank&quot;&gt;@hatebu_e&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;はてなブックマークが一定数以上付いた日本語以外の(正確には、タイトルと本文に全角文字を含まない)記事をツイートする。&lt;a href=&quot;http://yakst.com/ja&quot; target=&quot;_blank&quot;&gt;Yakstという主に英語のブログ記事などを翻訳して公開するサイト&lt;/a&gt;を解説しているのだが、そのネタ探しの足しになるかと思って作った。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
  &lt;p&gt;
    GitHub Engineering (3 users) &lt;a href=&quot;http://t.co/xWxAkjVCZI&quot;&gt;http://t.co/xWxAkjVCZI&lt;/a&gt; &lt;a href=&quot;http://t.co/aDzjTh7OfY&quot;&gt;http://t.co/aDzjTh7OfY&lt;/a&gt; — hatebu english (@hatebu_e) &lt;a href=&quot;https://twitter.com/hatebu_e/status/600682354470817792&quot;&gt;2015, 5月 19&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;誰得なのかよく分からないボットなので、フォロワーは少ないw&lt;/p&gt;

&lt;h1 id=&quot;aws-a-hrefhttpstwittercomawsstatusjpall-targetblankawsstatusjpalla&quot;&gt;AWS障害情報(全リージョン) &lt;a href=&quot;https://twitter.com/awsstatusjp_all&quot; target=&quot;_blank&quot;&gt;@awsstatusjp_all&lt;/a&gt;&lt;/h1&gt;

&lt;h1 id=&quot;aws-a-hrefhttpstwittercomawsstatusjp-targetblankawsstatusjpa&quot;&gt;AWS障害情報(東京リージョン) &lt;a href=&quot;https://twitter.com/awsstatusjp&quot; target=&quot;_blank&quot;&gt;@awsstatusjp&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;仕事でAWSを本格的に使い始めたので、手軽にAWSのステータス情報を知れる手段がないかと思ったのだが、いい感じのボットがなかったので作った。時刻を日本時間に直し、定型的な文言はなるべく日本語に翻訳するようにしている。GCPとかのボットもなければ作ってみようかな。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
  &lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;
    日本時間2015年05月19日(火) 07:46:53 EC2 (サンパウロ) お知らせ Network Connectivity &lt;a href=&quot;http://t.co/LMkNfK2ZYm&quot;&gt;http://t.co/LMkNfK2ZYm&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; AWS障害情報(全リージョン) (@awsstatusjp_all) &lt;a href=&quot;https://twitter.com/awsstatusjp_all/status/600433202222608384&quot;&gt;2015, 5月 18&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;ja&quot;&gt;
  &lt;p dir=&quot;ltr&quot; lang=&quot;ja&quot;&gt;
    日本時間2015年05月16日(土) 00:36:27 EC2 (東京) 正常稼働中 [復旧済み] Network connectivity &lt;a href=&quot;http://t.co/aq5bOVSJ4H&quot;&gt;http://t.co/aq5bOVSJ4H&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    — AWS障害情報(東京リージョン) (@awsstatusjp) &lt;a href=&quot;https://twitter.com/awsstatusjp/status/599237837637062656&quot;&gt;2015, 5月 15&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ちなみに、プロジェクトでHipchatやSlackなどのチャットツールを使っている場合、それぞれのTwitter連携機能を使ってこのボットのツイートを拾うようにすれば、AWSの障害情報が流れてくるようになって便利。&lt;/p&gt;

&lt;p&gt;ボットを作ると、プログラミングの基礎もだが、Twitter APIやスクレイピングのテクニックなど、作るボットに応じて色々な技術が必要とされるので、新しい言語を覚える人とか、そもそもプログラミング初心者にはもってこいの課題になる。オススメです。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>「SQLパフォーマンス詳解」という本を翻訳しました</title>
   <link href="http://b.l0g.jp/uncategorized/sql-performance-explained-ja/"/>
   <updated>2015-04-07T01:45:15-07:00</updated>
   <id>http://b.l0g.jp/uncategorized/sql-performance-explained-ja</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/uncategorized/sql-performance-explained-ja/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;「SQLパフォーマンス詳解」という本を翻訳しました&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/uncategorized/sql-performance-explained-ja/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/uncategorized/sql-performance-explained-ja/&quot; data-text=&quot;「SQLパフォーマンス詳解」という本を翻訳しました&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/uncategorized/sql-performance-explained-ja/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2015/04/sqlperformanceexplainedja.png&quot;&gt;&lt;img class=&quot;alignleft wp-image-1648 size-medium&quot; style=&quot;border: 0px;&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2015/04/sqlperformanceexplainedja-196x300.png&quot; alt=&quot;sqlperformanceexplainedja&quot; width=&quot;196&quot; height=&quot;300&quot; /&gt;&lt;/a&gt;題の通り、「&lt;a title=&quot;SQLパフォーマンス詳解&quot; href=&quot;http://sql-performance-explained.jp/&quot; target=&quot;_blank&quot;&gt;SQLパフォーマンス詳解&lt;/a&gt;」(原文タイトル&lt;a title=&quot;SQL Performance Explained&quot; href=&quot;http://sql-performance-explained.com/&quot; target=&quot;_blank&quot;&gt;SQL Performance Explained&lt;/a&gt;)という本を翻訳しました。PDFは既に上記サイトから購入できるようになっていて、印刷されたものは夏以降に提供予定です。&lt;/p&gt;

&lt;p&gt;リレーショナルデータベースにおいて、SQLとインデックスがどのように関連し、どのようにすればSQLのパフォーマンスを良くできるのかを解説した本です。特定のデータベース製品に焦点を当てた本は多数ありますが、この本ではOracle Database、PostgreSQL、MySQL、SQL Serverの4つのメジャーなリレーショナルデータベース製品を同時に扱っていて、それぞれのクセや特徴も分かるように書かれている点が非常にユニークになっています。また、ORMが生成するSQL文の違いなどにも言及されています。&lt;/p&gt;

&lt;p&gt;前書きにもあるように、データへのアクセスパスを知っているのは他ならぬ開発者なので、開発者自身がSQLとインデックスについての知識を深めなければ本当の高速化はできない、というのが著者の考えのようですが、もちろんアプリ開発者だけでなくインフラエンジニア、データベースエンジニアの方々にもおすすめできる内容だと思います。&lt;/p&gt;

&lt;p&gt;目次とそれぞれの内容は以下の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第1章 インデックスの内部構造
    &lt;ul&gt;
      &lt;li&gt;インデックスとはそもそも何か、インデックスはどのような仕組みか&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第2章 where句
    &lt;ul&gt;
      &lt;li&gt;where句とインデックスの関連、例えば=を使った場合、likeを使った場合など演算子の違いによるインデックスの活用方法など&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第3章 パフォーマンスとスケーラビリティ
    &lt;ul&gt;
      &lt;li&gt;インデックスの作り方の違いによるパフォーマンスとスケーラビリティの違い&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第4章 結合処理
    &lt;ul&gt;
      &lt;li&gt;結合(join)とインデックスの関連&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第5章 データのクラスタリング
    &lt;ul&gt;
      &lt;li&gt;データのクラスタリング(HAクラスタなどではなく、いわゆるクラスタリングインデックスのこと)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第6章 ソートとグルーピング
    &lt;ul&gt;
      &lt;li&gt;ソート(order by)やグルーピング(group by)とインデックスの関連&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第7章 部分結果
    &lt;ul&gt;
      &lt;li&gt;MySQLで言うlimitやPostgreSQLのfetch firstのような、結果の一部分を取得するSQL文とインデックスの関連&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;第8章 データの変更
    &lt;ul&gt;
      &lt;li&gt;update, insert, deleteといった更新処理とインデックスの関連&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;付録A 実行計画
    &lt;ul&gt;
      &lt;li&gt;各データベース製品での実行計画の表示方法とその読み方&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;既にご存知の方もいるかもしれませんが、&lt;a title=&quot;Use The Index, Luke日本語版&quot; href=&quot;http://use-the-index-luke.com/ja/sql/table-of-contents&quot; target=&quot;_blank&quot;&gt;Use The Index, Luke&lt;/a&gt;という名でほぼ全文がWeb上で公開されています。とはいえWeb上で通しで読むのはかなり辛いですし、PDFあるいは印刷版を購入いただければ、作者・訳者とも嬉しい限りです。&lt;/p&gt;

&lt;p&gt;私は、&lt;a title=&quot;Yakst&quot; href=&quot;http://yakst.com/ja&quot; target=&quot;_blank&quot;&gt;Yakst&lt;/a&gt;というサイトで海外のブログ記事などを翻訳して公開するというのをやっているのですが、原著者(&lt;a title=&quot;Markus Winand&quot; href=&quot;https://twitter.com/markuswinand&quot; target=&quot;_blank&quot;&gt;Markus Winandさん&lt;/a&gt;)が書かれた&lt;a title=&quot;Yakst - SQLに対するMySQLと、NoSQLに対するMongoDBは似ている――主に有害な意味で&quot; href=&quot;http://yakst.com/ja/posts/74&quot; target=&quot;_blank&quot;&gt;ブログ記事を翻訳させてもらった&lt;/a&gt;のがきっかけで、この本の翻訳をやることになりました。オンライン販売だけの予定なので書店に本が並ぶわけではないとは言え、自分が訳した本が人に読まれることになるというのは、不思議な感覚です。Markusさんはオーストリア人で英語のネイティブスピーカーではないこともあり、原文は非常に分かりやすい英語で書かれているのですが、それでも翻訳の難しさ、自分の未熟さをひしひしと感じました。素晴らしい本を書いてくださった原著者のMarkusさん、私のつたない訳を丁寧にレビューしてくださった&lt;a title=&quot;matsuu&quot; href=&quot;https://twitter.com/matsuu&quot; target=&quot;_blank&quot;&gt;@matsuu&lt;/a&gt;さん、ありがとうございました！&lt;/p&gt;

&lt;p&gt;訳の問題など、ご意見ご感想ありましたら&lt;a title=&quot;doublemarket&quot; href=&quot;https://twitter.com/dblmkt&quot; target=&quot;_blank&quot;&gt;@dblmkt&lt;/a&gt;までいつでもご連絡ください。&lt;/p&gt;

&lt;p&gt;ちなみに、海外の有益な技術系ブログを翻訳して公開している&lt;a title=&quot;Yakst&quot; href=&quot;http://yakst.com/ja&quot; target=&quot;_blank&quot;&gt;Yakst&lt;/a&gt;で、翻訳を一緒にやっていただける仲間も募集しておりますので、良かったらそちらも是非よろしくお願いします。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQL Casual Talks Vol. 7まとめ</title>
   <link href="http://b.l0g.jp/mysql/mysql-casual-talks-7/"/>
   <updated>2014-12-15T01:11:16-08:00</updated>
   <id>http://b.l0g.jp/mysql/mysql-casual-talks-7</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/mysql-casual-talks-7/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQL Casual Talks Vol. 7まとめ&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/mysql-casual-talks-7/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/mysql-casual-talks-7/&quot; data-text=&quot;MySQL Casual Talks Vol. 7まとめ&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/mysql-casual-talks-7/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ふう、&lt;a href=&quot;http://mysql-casual.connpass.com/event/9767/&quot;&gt;MySQL Casual Talks Vol. 7&lt;/a&gt;行って参りました。前回は&lt;a href=&quot;http://www.slideshare.net/doublemarket/mysqlcasual6fabric&quot;&gt;自分が発表者&lt;/a&gt;でもあったので、正直なところ他の人の発表を聞く余裕はなく(汗) 今回は、同僚の発表もあったので楽しみにしていったら、相変わらずの濃ゆい話が盛りだくさんで、非常に楽しめました。毎度の事ながら、&lt;a href=&quot;https://twitter.com/myfinder&quot;&gt;@myfinderさん&lt;/a&gt;始め、会場提供・準備していただいたLINE&lt;/p&gt;

&lt;p&gt;のみなさま、Oracleのみなさまに感謝です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://togetter.com/li/756928&quot;&gt;Togetter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;yoku0825httpstwittercomyoku0825-mysql-fabric&quot;&gt;&lt;a href=&quot;https://twitter.com/yoku0825&quot;&gt;yoku0825さん&lt;/a&gt; MySQL Fabricつらい&lt;/h1&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/yoku0825/mysql-fabric-42641503&quot; title=&quot;MySQL Fabricつらい&quot; target=&quot;_blank&quot;&gt;MySQL Fabricつらい&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/yoku0825&quot; target=&quot;_blank&quot;&gt;yoku0825&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;GAから半年なのに誰も使ってない&lt;/li&gt;
  &lt;li&gt;アメリカのイベントでは、MySQL Fabricだけに布がプレゼントされた(白目&lt;/li&gt;
  &lt;li&gt;Fabric対応コネクタが各種言語向けに用意されてる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/yoku0825/DBD-mysql/tree/support_mysql_fabric&quot;&gt;yokuさん謹製fabric対応mysqlクライアント&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;fabricとConnector/C経由で通信する&lt;/li&gt;
      &lt;li&gt;ro(スレーブ、分散される)とrw(マスタ、当然1台)のモードがある&lt;/li&gt;
      &lt;li&gt;マスタを落とすとちゃんと切り替わりますよ(デモ)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tatsuruhttpstwittercomtatsuru-mysql-on-ec2&quot;&gt;&lt;a href=&quot;https://twitter.com/tatsuru&quot;&gt;tatsuruさん&lt;/a&gt; MySQL on EC2&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;3年ぐらい運用、結構消耗&lt;/li&gt;
  &lt;li&gt;MHA組んでおく
    &lt;ul&gt;
      &lt;li&gt;ENIをつけておいて、マスタ切り替えはそれを付け替える&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mackerelでモニタリング&lt;/li&gt;
  &lt;li&gt;バックアップスレーブでsnapshotとってる&lt;/li&gt;
  &lt;li&gt;スレーブ作る
    &lt;ul&gt;
      &lt;li&gt;snapshotから作る&lt;/li&gt;
      &lt;li&gt;dumpから作る&lt;/li&gt;
      &lt;li&gt;落ちたら捨てる前提(信頼性落とす、ダウンしたら捨てる)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;取りあえず2セット作って入れ替える、が可能なのがよい&lt;/li&gt;
  &lt;li&gt;スレーブのオートスケールは結構難しい
    &lt;ul&gt;
      &lt;li&gt;warmup難しい&lt;/li&gt;
      &lt;li&gt;5.7はできそう(buffer poolリストア)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;データはEBSに置いている
    &lt;ul&gt;
      &lt;li&gt;IOできなくなって死ぬことがある&lt;/li&gt;
      &lt;li&gt;ヘルスチェック工夫しよう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RDSはちょっと高いけど楽
    &lt;ul&gt;
      &lt;li&gt;フェイルオーバーが長い&lt;/li&gt;
      &lt;li&gt;可用性がちょっと微妙でやめた(2012年ぐらいの話なので古いかも)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ELBはDNSベースなのでちょっとってことでhaproxyで分散している&lt;/li&gt;
  &lt;li&gt;もはや自前でMySQL運用する時代じゃないよね&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;mita2httpstwittercommita2-percona-live&quot;&gt;&lt;a href=&quot;https://twitter.com/mita2&quot;&gt;ヤフー三谷さん @mita2&lt;/a&gt; Percona Live行ってきた&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle(200セット), MySQL/Percona(300セット)を運用中
    &lt;ul&gt;
      &lt;li&gt;Exadataとかも&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Percona Live 10月にロンドンで開催されたのに参加してきた&lt;/li&gt;
  &lt;li&gt;XtraDB Cluster
    &lt;ul&gt;
      &lt;li&gt;ActiveActiveの構成、高い冗長性&lt;/li&gt;
      &lt;li&gt;ヨーロッパでは広く普及&lt;/li&gt;
      &lt;li&gt;OpenStackのバックエンドに使われている&lt;/li&gt;
      &lt;li&gt;本家のGroup Replicationと似てる&lt;/li&gt;
      &lt;li&gt;どのノードに書いても同期レプリされる&lt;/li&gt;
      &lt;li&gt;MySQL Clusterよりは本家MySQLに近くてハードル低い&lt;/li&gt;
      &lt;li&gt;Writeのスケールはできない(MySQL Cluster使おう)&lt;/li&gt;
      &lt;li&gt;SST(丸ごとコピー)、IST(差分)でDonorからデータを送る&lt;/li&gt;
      &lt;li&gt;ノードへの分散はHAProxyとか使う&lt;/li&gt;
      &lt;li&gt;ヘルスチェックの仕組みもXtraDB型に準備されてる&lt;/li&gt;
      &lt;li&gt;書き込みは楽観的ロック&lt;/li&gt;
      &lt;li&gt;コミットしてノード間の情報が食い違ってるとコミット時にエラー&lt;/li&gt;
      &lt;li&gt;従って書き込みはできるだけ1台がいい&lt;/li&gt;
      &lt;li&gt;オンラインalterはできない(今後サポート予定)ので、ローリングで変更していく&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;okumura-hfmhttpstwittercomhfm-mysql-40&quot;&gt;&lt;a href=&quot;https://twitter.com/hfm&quot;&gt;ペパボ okumuraさん @hfm&lt;/a&gt; MySQL 4.0をリプレイスした&lt;/h1&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/hifumis/mysql-casual-42634961&quot; title=&quot;MySQL 4.0で9年動き続けたサーバを リプレイスしてバージョンアップした話&quot; target=&quot;_blank&quot;&gt;MySQL 4.0で9年動き続けたサーバを リプレイスしてバージョンアップした話&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/hifumis&quot; target=&quot;_blank&quot;&gt;Takahiro Okumura&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.hifumi.info/2014/12/13/mysql-casual-vol-7/&quot;&gt;ブログ記事&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;2005年 4.0.25 -&amp;gt; 9年 -&amp;gt; 5.0.96にバージョンアップ&lt;/li&gt;
  &lt;li&gt;@tnmt 氏がカジュアルに5.6バージョンアップを指示するイシューを投げたところから始まった&lt;/li&gt;
  &lt;li&gt;しかしやる事になった時は何にも知識ありませんでした&lt;/li&gt;
  &lt;li&gt;たくさんの爆弾が仕込まれていた。。
    &lt;ul&gt;
      &lt;li&gt;マスタとスレーブの食い違いなどなど&lt;/li&gt;
      &lt;li&gt;ハードもソフトも古い&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;検証の過程で色んなバージョンをインストールしたので、MySQL-AllStarというbox提供してます(4.0から5.6まで全部入り)&lt;/li&gt;
  &lt;li&gt;結局5.0まで上げることに&lt;/li&gt;
  &lt;li&gt;6/20 イベントがあるとレンタルサーバのアクセスが減るからwという理由でメンテ実施
    &lt;ul&gt;
      &lt;li&gt;ダンプからリストア、切り替えまで同じタイミングでやった&lt;/li&gt;
      &lt;li&gt;insertを実行するとbinlogが壊れることが発覚&lt;/li&gt;
      &lt;li&gt;失敗として切り戻し&lt;/li&gt;
      &lt;li&gt;5.0系を特定のgccでコンパイルすると起きるバグ？&lt;/li&gt;
      &lt;li&gt;gccの最適化のレベルによってテストが通ったり通らなかったり&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;その後別のバグ発生
    &lt;ul&gt;
      &lt;li&gt;rpmbuild中に必要なファイルが消える&lt;/li&gt;
      &lt;li&gt;邪魔してたパッケージ消してビルド成功&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;8/22無事バージョンアップ成功&lt;/li&gt;
  &lt;li&gt;4.0に入っていたデータの一部がリカバリできなかったのは手動で戻した&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;strsk-httpstwittercomstrsk-db&quot;&gt;&lt;a href=&quot;https://twitter.com/strsk&quot;&gt;サイバーエージェント @strsk さん&lt;/a&gt; ソーシャルゲームDBの危機回避&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://strsk.hatenablog.com/entry/2014/12/15/123211&quot;&gt;ブログ記事&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;ギフトとかカードの情報が増えまくる
    &lt;ul&gt;
      &lt;li&gt;1日数十GB、論削だけで物理削除してなかったり&lt;/li&gt;
      &lt;li&gt;削除するのではなく、必要なデータだけをINSERT SELECTで抽出してテーブルを作り直すと速い&lt;/li&gt;
      &lt;li&gt;deleteしてもテーブル容量減らない(MVCCのバージョン管理のため)&lt;/li&gt;
      &lt;li&gt;pt-online-schema-changeでテーブル再構築&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;レプリ遅延
    &lt;ul&gt;
      &lt;li&gt;truncateすると遅れる(deleteより遅い)&lt;/li&gt;
      &lt;li&gt;バッファプールを大きく使ってると遅くなるというバグ&lt;/li&gt;
      &lt;li&gt;結局deleteしました&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ryopeko-httpstwittercomryopeko-q4m&quot;&gt;&lt;a href=&quot;https://twitter.com/ryopeko&quot;&gt;@ryopeko さん&lt;/a&gt; Q4M&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/ryopeko/items/f42b65a11d7f1f74311e&quot;&gt;ブログ記事&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;パーフェクトRuby出しました&lt;/li&gt;
  &lt;li&gt;Rubyの人はRedis使う人多い(sidekiqで)けどQ4M
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/ryopeko/shinq&quot;&gt;shinq&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;ActiveJobを利用&lt;/li&gt;
      &lt;li&gt;Rails 4.2に入る予定のキュー機能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kakerukaeru-httpstwittercomkakerukaeru-continuous-restore&quot;&gt;&lt;a href=&quot;https://twitter.com/kakerukaeru&quot;&gt;サイバーエージェント @kakerukaeru さん&lt;/a&gt; continuous restore&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kakerukaeru.hatenablog.com/entry/2014/12/13/213342&quot;&gt;ブログ記事&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;DBのバックアップだけじゃなくてリストアも繰り返しやって、復旧可能性を担保&lt;/li&gt;
  &lt;li&gt;バァーン、バァーン、バババァーン&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ijin-httpstwittercomijin-consulmysql&quot;&gt;&lt;a href=&quot;https://twitter.com/ijin&quot;&gt;@ijin さん&lt;/a&gt; ConsulでMySQLのフェイルオーバー&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ijin.github.io/blog/2014/07/11/mysql-failover-with-consul/&quot;&gt;元ネタのブログ記事&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;consulはraftを使ってcap定理のcpを実現している&lt;/li&gt;
  &lt;li&gt;MHA発動時に実行されるfailover scriptでconsulのAPIを叩いてマスタのDNS名を変更する&lt;/li&gt;
  &lt;li&gt;consul event
    &lt;ul&gt;
      &lt;li&gt;eventをノードに伝えると伝播される(no guarantee)&lt;/li&gt;
      &lt;li&gt;watchで検知してスクリプトを動かす&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;consul templateを使いましょう&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kazeburo-httpstwittercomkazeburo-isuconmysql&quot;&gt;&lt;a href=&quot;https://twitter.com/kazeburo&quot;&gt;@kazeburo さん&lt;/a&gt; isuconのためのMySQLチューニング&lt;/h1&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/kazeburo/mysql-casual7isucon&quot; title=&quot;ISUCON4 予選問題で(中略)、”my.cnf”に1行だけ足して予選通過ラインを突破するの術&quot; target=&quot;_blank&quot;&gt;ISUCON4 予選問題で(中略)、”my.cnf”に1行だけ足して予選通過ラインを突破するの術&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/kazeburo&quot; target=&quot;_blank&quot;&gt;Masahiro Nagano&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;my.cnfをチューニングする
    &lt;ul&gt;
      &lt;li&gt;innodb_flush_log_at_trx_commit=2で結構上がる&lt;/li&gt;
      &lt;li&gt;innodb_flush_method=nosync/O_DIRECTでも上がる&lt;/li&gt;
      &lt;li&gt;この2つのオプションさえちゃんとやっておけばおk&lt;/li&gt;
      &lt;li&gt;データ量に応じてinnodb_buffer_pool_sizeも&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;neofact-httpstwittercomneofact-kuwatw-httpstwittercomkuwatw-nvmfs&quot;&gt;&lt;a href=&quot;https://twitter.com/neofact&quot;&gt;@neofact さん&lt;/a&gt;、 &lt;a href=&quot;https://twitter.com/kuwa_tw&quot;&gt;@kuwa_tw さん&lt;/a&gt; NVMFS&lt;/h1&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/akuwano/ca-nvmfs-42665725&quot; title=&quot;NVMFS 使ってみたとか 言っちゃって マジカジュアルな奴&quot; target=&quot;_blank&quot;&gt;NVMFS 使ってみたとか 言っちゃって マジカジュアルな奴&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;//www.slideshare.net/akuwano&quot; target=&quot;_blank&quot;&gt;Akihiro Kuwano&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/akuwano/20141215&quot;&gt;ブログ記事&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;圧縮効いて8〜6割の性能&lt;/li&gt;
  &lt;li&gt;容量的には半分ぐらいに圧縮できた&lt;/li&gt;
  &lt;li&gt;圧縮伸長でCPU食う(元々ioDriveではCPUバウンドだけどさらにきつくなる)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;doaki-httpstwittercomdoaki-n1&quot;&gt;&lt;a href=&quot;https://twitter.com/do_aki&quot;&gt;@do_aki さん&lt;/a&gt; N:1レプリケーション&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;いつもの&lt;/li&gt;
  &lt;li&gt;特に進捗なし&lt;/li&gt;
  &lt;li&gt;Raspberry piでN:1 replication動きましたw&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kamipo-httpstwittercomkamipo-activerecord&quot;&gt;&lt;a href=&quot;https://twitter.com/kamipo&quot;&gt;@kamipo さん&lt;/a&gt; ActiveRecord&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://kamipo.github.io/talks/20141212-mysqlcasual7/#/title&quot;&gt;発表資料&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ARのメンテナはみんなPostgreSQL派で、MySQLのプルリクは放置される傾向にある&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rails/rails/pulls/kamipo&quot;&gt;いっぱいMySQLのプルリク投げた！&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;For MySQLってつけたの全部放置されてるorz&lt;/li&gt;
      &lt;li&gt;機能をバックポートして&lt;a href=&quot;http://qiita.com/kamipo/items/11b55caf329210923a9a&quot;&gt;activerecord-mysql-awesome作った&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kamipoさんはすごいひと&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>日本Chefユーザ会 Meetup メモ</title>
   <link href="http://b.l0g.jp/chef/chef-meetup-20140919/"/>
   <updated>2014-09-19T06:23:12-07:00</updated>
   <id>http://b.l0g.jp/chef/chef-meetup-20140919</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/chef/chef-meetup-20140919/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;日本Chefユーザ会 Meetup メモ&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/chef/chef-meetup-20140919/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/chef/chef-meetup-20140919/&quot; data-text=&quot;日本Chefユーザ会 Meetup メモ&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/chef/chef-meetup-20140919/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.getchef.com/&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone wp-image-1613 size-thumbnail&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2014/09/Chef_Vertical_Website_Reg-150x150.png&quot; alt=&quot;Chef_Vertical_Website_Reg&quot; width=&quot;150&quot; height=&quot;150&quot; srcset=&quot;http://b.l0g.jp/wp-content/uploads/2014/09/Chef_Vertical_Website_Reg-150x150.png 150w, http://b.l0g.jp/wp-content/uploads/2014/09/Chef_Vertical_Website_Reg-144x144.png 144w&quot; sizes=&quot;(max-width: 150px) 100vw, 150px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;日本Chefユーザ会&quot; href=&quot;https://www.facebook.com/groups/272530339574523/&quot; target=&quot;_blank&quot;&gt;日本Chefユーザ会&lt;/a&gt;なるものがいつの間にかできていたようで、Chef社の人も招いて&lt;a title=&quot;日本Chefユーザー会主催のMeet up!&quot; href=&quot;http://connpass.com/event/8605/&quot; target=&quot;_blank&quot;&gt;Meetup&lt;/a&gt;が開催されると聞き、参加してきた。&lt;/p&gt;

&lt;p&gt;先日発表された&lt;a title=&quot;Chef Releases Chef 12 to Power DevOps Practices in the Enterprise&quot; href=&quot;https://www.getchef.com/blog/2014/09/08/chef-releases-chef-12-to-power-devops-practices-in-the-enterprise/&quot; target=&quot;_blank&quot;&gt;Chef 12&lt;/a&gt;(&lt;a title=&quot;Chef 12がリリース。商用版とオープンソース版の一本化で25ノードまで無償に。Docker対応、VMware vSphere、Microsoft Azureにも対応&quot; href=&quot;http://www.publickey1.jp/blog/14/chef_1225dockervmware_vspheremicrosoft_azure.html&quot; target=&quot;_blank&quot;&gt;参考日本語記事&lt;/a&gt;)の簡単な紹介と、Chefのテスト環境に流れを追っての概要とデモがあった。新しい情報はそれほどなかったように思ったが、テストについてのデモ後は質問が活発に出たりしてなかなか面白かったので、メモ公開。&lt;/p&gt;

&lt;p&gt;ちなみに、Chefユーザ会のハッシュタグは &lt;a href=&quot;https://twitter.com/search?src=typd&amp;amp;q=%23getchef_ja&quot;&gt;#getchef_ja&lt;/a&gt; だそうなので、日本語のChefに関連するつぶやきはここを見ておくのがよさそう。&lt;/p&gt;

&lt;h2 id=&quot;chef-12-a-hrefhttpstwittercommfdii-targetblankmichael-ducya&quot;&gt;Chef 12の紹介 (&lt;a href=&quot;https://twitter.com/mfdii&quot; target=&quot;_blank&quot;&gt;Michael Ducyさん&lt;/a&gt;)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;新しくなったchef server
    &lt;ul&gt;
      &lt;li&gt;従来1組織しか管理できなかったがmulti tenantサポート&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;chef client
    &lt;ul&gt;
      &lt;li&gt;chef pushというクライアント側へのプッシュ機能が付く予定&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Chef development kitがバージョンアップ
    &lt;ul&gt;
      &lt;li&gt;test-kichenやfoodcriticなどを含む&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Enterprise版の機能
    &lt;ul&gt;
      &lt;li&gt;HA&lt;/li&gt;
      &lt;li&gt;replication
        &lt;ul&gt;
          &lt;li&gt;複数のchefサーバを立てて同期できる&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;analytics&lt;/li&gt;
      &lt;li&gt;25ノードまでは有料版の機能を無料で使える
        &lt;ul&gt;
          &lt;li&gt;さらに30日間はサポートも無料&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;日本でEnterprise版を使いたければ、まず&lt;a title=&quot;クリエーションライン&quot; href=&quot;http://www.creationline.com/&quot; target=&quot;_blank&quot;&gt;クリエーションライン&lt;/a&gt;さんに問い合わせ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomcheeseplus-targetblankseth-thomasa&quot;&gt;テストについて (&lt;a href=&quot;https://twitter.com/cheeseplus&quot; target=&quot;_blank&quot;&gt;Seth Thomasさん&lt;/a&gt;)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;クックブックのテストをする時は、以下のツールを使っていくことが多いよ、という話&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://kitchen.ci/&quot; target=&quot;_blank&quot;&gt; test-kitchen&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;chef dev kitの一部&lt;/li&gt;
      &lt;li&gt;仮想マシンでクックブックをテスト&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://acrmp.github.io/foodcritic/&quot; target=&quot;_blank&quot;&gt;foodcritic&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;chef dev kitの一部&lt;/li&gt;
      &lt;li&gt;chefのお作法に沿った文法かチェック&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bbatsov/rubocop&quot; target=&quot;_blank&quot;&gt;rubocop&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Rubyのお作法チェック&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/guard/guard&quot; target=&quot;_blank&quot;&gt;guard&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;ファイルシステム変更確認&lt;/li&gt;
      &lt;li&gt;これでcookbookの変更とかをチェックして、test-kichenやfoodcritic、rubocopとか走らせる&lt;/li&gt;
      &lt;li&gt;下の質問にもあるが、ローカル環境で動かしておいて、コミット前のテストを自動化するのに使う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://serverspec.org/&quot; target=&quot;_blank&quot;&gt;serverspec&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;クックブックを実行した後に、対象のノードがどうなったかのチェックするのに使う&lt;/li&gt;
      &lt;li&gt;chefspecは、どうなるべきかクックブックで実装できてるかをチェックするツール&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;質問&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;クラスタがちゃんとセットアップできたかのチェックとかやりたいんだけど
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/opscode/chef-metal&quot;&gt;chef metal&lt;/a&gt;を使えばできる&lt;/li&gt;
      &lt;li&gt;ただしまだベータです&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;serverspecのspecファイルはどこに置くの
    &lt;ul&gt;
      &lt;li&gt;mysqlだとクックブックのディレクトリのtest/integration以下に置いてる&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/opscode-cookbooks/mysql&quot; target=&quot;_blank&quot;&gt;MySQLのクックブック&lt;/a&gt;が一番ちゃんとテストしてあって色々な点で参考になる。読むなら一番いい&lt;/li&gt;
      &lt;li&gt;test-kitchenのサンプルとしてもMySQLがいい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windowsで使いにくいんだけど
    &lt;ul&gt;
      &lt;li&gt;手順とか公開してます&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;serverspecは全部実行した後にやると思うけどchefspec, test-kitchenとかはどのタイミングでかける？
    &lt;ul&gt;
      &lt;li&gt;chefspecはlocalで実行する&lt;/li&gt;
      &lt;li&gt;その後test-kitchenで確認する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;guardはどう使う感じ？
    &lt;ul&gt;
      &lt;li&gt;基本はローカルで動かしておいてコミット前のチェックまで自動でやるもの&lt;/li&gt;
      &lt;li&gt;リモートで動かして使うことももちろんできる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;cookbook内のattributeをserverspecで使いたい時はどうしたらいい？
    &lt;ul&gt;
      &lt;li&gt;serverspec側を何とかいじってattributeの書いてあるファイルを見るとかする他ない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;test-kitchenするのにいいのありますか？(EC2だとお金かかっちゃうから)
    &lt;ul&gt;
      &lt;li&gt;DigitalOceanは(chef社からは)速いよ(ただし西海岸は。DigitalOceanはChefのユーザでもあるし)&lt;/li&gt;
      &lt;li&gt;速いところを探して使うしかない&lt;/li&gt;
      &lt;li&gt;test-kitchen –parallelを使えば並列実行できて速い&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;kitchen.yamlでnodeの情報にアクセスしたい
    &lt;ul&gt;
      &lt;li&gt;chef-zeroを使えばいい&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;chef-soloは将来的にdeprecatedになる予定&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;日本でのchefコミュニティを活性化させるにはどうしたらよいと思うか？
    &lt;ul&gt;
      &lt;li&gt;ビールが必要(笑)&lt;/li&gt;
      &lt;li&gt;頻繁に勉強会やmeetupやっていきたい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(逆に参加者への質問)女性chef関係者はいないのか？w&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://tech.rakuten.co.jp/&quot; target=&quot;_blank&quot;&gt;10/25の楽天テクノロジーカンファレンス&lt;/a&gt;でも、Michealさんが話をするそうで、参加者へのアンケート(？)の結果、Dockerと関連してChefを使う話を予定しているとのこと。&lt;/p&gt;

&lt;p&gt;この後、Chef社とクリエーションライン社のおごりで、楽しくビールを飲みながらChefの話をしてお開き。&lt;/p&gt;

&lt;p&gt;発表いただいたChef社の方、会場の準備などしていただいたクリエーションラインの方々、ありがとうございました。ビールごちそうさまでした。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WEB+DB PRESS vol. 79の記事を書きました</title>
   <link href="http://b.l0g.jp/misc/webdb-press-vol-79/"/>
   <updated>2014-02-21T01:00:06-08:00</updated>
   <id>http://b.l0g.jp/misc/webdb-press-vol-79</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/misc/webdb-press-vol-79/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;WEB+DB PRESS vol. 79の記事を書きました&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/misc/webdb-press-vol-79/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/misc/webdb-press-vol-79/&quot; data-text=&quot;WEB+DB PRESS vol. 79の記事を書きました&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/misc/webdb-press-vol-79/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2014/02/cover.jpg&quot;&gt;&lt;img class=&quot;size-medium wp-image-1594 alignnone&quot; style=&quot;border: 0px;&quot; alt=&quot;cover&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2014/02/cover-225x300.jpg&quot; width=&quot;225&quot; height=&quot;300&quot; srcset=&quot;http://b.l0g.jp/wp-content/uploads/2014/02/cover-225x300.jpg 225w, http://b.l0g.jp/wp-content/uploads/2014/02/cover-768x1024.jpg 768w, http://b.l0g.jp/wp-content/uploads/2014/02/cover-900x1200.jpg 900w, http://b.l0g.jp/wp-content/uploads/2014/02/cover.jpg 1224w&quot; sizes=&quot;(max-width: 225px) 100vw, 225px&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同じ会社で働いてる &lt;a href=&quot;https://twitter.com/kuwa_tw&quot;&gt;@kuwa_tw&lt;/a&gt; さんから紹介いただいて、&lt;a title=&quot;WEB+DB PRESS vol. 79&quot; href=&quot;http://gihyo.jp/magazine/wdpress/archive/2014/vol79&quot; target=&quot;_blank&quot;&gt;WEB+DB PRESS vol. 79&lt;/a&gt;の記事を書かせていただきました。雑誌に、というか印刷物に自分の書いたものが掲載されるのは初めての経験です。あまり歓迎されないけれども避けては通れない、メンテナンスという切り口で書かせていただいています。&lt;/p&gt;

&lt;p&gt;始め、執筆の話をもらった時は、自分の書いた文章が印刷されて世に出るなんて想像もつかない出来事だなあと思っていましたが、実際手元に届いても、これが広く読者の方々に読まれるというのがどういうことなのかよくわかっておりませんｗ 皆さんからマサカリが飛んできて初めて理解できるものなのかもしれません。ご意見などありましたら &lt;a href=&quot;https://twitter.com/dblmkt&quot;&gt;@dblmkt&lt;/a&gt; までいただけるとうれしいです。&lt;/p&gt;

&lt;p&gt;執筆のチャンスをくれた &lt;a href=&quot;https://twitter.com/kuwa_tw&quot;&gt;@kuwa_tw&lt;/a&gt; さんを始め、不慣れな我々をサポートしてくれた技術評論社の編集者の方、一緒に記事を執筆し色々なアドバイスをくれた同僚達にこの場を借りて感謝を表したいと思います。ありがとうございました！&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CentOS 6になったらTomcatのJVMが仮想メモリを大量に確保するようになった</title>
   <link href="http://b.l0g.jp/linux/big-mem-allocated-to-jvm-on-centos6/"/>
   <updated>2013-11-18T11:47:45-08:00</updated>
   <id>http://b.l0g.jp/linux/big-mem-allocated-to-jvm-on-centos6</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/linux/big-mem-allocated-to-jvm-on-centos6/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;CentOS 6になったらTomcatのJVMが仮想メモリを大量に確保するようになった&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/linux/big-mem-allocated-to-jvm-on-centos6/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/linux/big-mem-allocated-to-jvm-on-centos6/&quot; data-text=&quot;CentOS 6になったらTomcatのJVMが仮想メモリを大量に確保するようになった&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/linux/big-mem-allocated-to-jvm-on-centos6/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;CentOS 5+Tomcat 7+JDK 7+Apacheという組み合わせで動かしていたサーバ群に、OSだけCentOS 6にしてミドルウェアのバージョンは変えないサーバを何台か追加したところ、CentOS 6の方が、Tomcatが確保している仮想メモリ量が圧倒的にでかいことに気づいた。&lt;/p&gt;

&lt;p&gt;ちなみに、どちらのサーバもヒープサイズは「-Xmn1024m -Xmx2048m -Xms2048m」となっており、本来なら2GBプラスアルファ(コードキャッシュ他の領域分)しかメモリは食わないはずだ。もちろん、ロードバランサではどちらのサーバにも同じ重みでアクセスを流していおり、負荷は同じのはず。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CentOS 5のサーバ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;こちらはざっくり3GB弱の仮想メモリを確保していると出ている(左から5番目、VSZの列)。ヒープサイズから考えるとまあこんなものかというレベル。&lt;/p&gt;

&lt;p&gt;[code]&lt;/p&gt;

&lt;p&gt;# ps auwx&lt;/p&gt;

&lt;p&gt;USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND&lt;/p&gt;

&lt;p&gt;31234 10315 110 8.8 3134280 1447956 ? Sl Nov14 6870:09 /usr/local/java/bin/java -Djava.util.logging.config.file=/usr/l cal/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -XX:MaxPermSize=128m -XX:PermSize=128m -XX:SurvivorRatio=2 -Xmn1024m -Xmx2048m -Xms2048m (後略)&lt;/p&gt;

&lt;p&gt;[/code]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CentOS 6のサーバ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一方こちらは10GB弱ものメモリを確保していることになっている。ヒープサイズとの差分9GB近くはどっから出てきたのか？&lt;/p&gt;

&lt;p&gt;[code]&lt;/p&gt;

&lt;p&gt;# ps auwx&lt;/p&gt;

&lt;p&gt;USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND&lt;/p&gt;

&lt;p&gt;31234 19463 156 33.6 11270576 2708744 ? Sl Nov14 9532:10 /usr/local/java/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -server -XX:MaxPermSize=128m -XX:PermSize=128m -XX:SurvivorRatio=2 -Xmn1024m -Xmx2048m -Xms2048m (後略)&lt;/p&gt;

&lt;p&gt;[/code]&lt;/p&gt;

&lt;p&gt;CentOS 6の方のサーバのTomcatのプロセスIDを指定してpmapコマンドでメモリの確保状況を見てみると、何やら同じ容量(64MBぐらい)を確保しているanonという行がたくさん表示されているのが目につく。これが悪さしているようだ。ちなみに、一番右の列には通常そのメモリを確保しているファイル名が出るが、anonというのは匿名で割り当てのみがされた領域を示しているようだ。&lt;/p&gt;

&lt;p&gt;[code]&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;# pmap -x 19463&lt;/td&gt;
      &lt;td&gt;sort -k2 -n&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Address Kbytes RSS Dirty Mode Mapping&lt;/p&gt;

&lt;p&gt;(略)&lt;/p&gt;

&lt;p&gt;00007f08d0218000 63392 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f0878215000 63404 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f099c208000 63456 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f08941fe000 63496 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f09341fb000 63508 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f091c1ea000 63576 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f08901e5000 63596 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f08fc1e3000 63604 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f09c01e0000 63616 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;00007f094c1d8000 63648 0 0 —– [ anon ]&lt;/p&gt;

&lt;p&gt;(略)&lt;/p&gt;

&lt;p&gt;[/code]&lt;/p&gt;

&lt;p&gt;調べてみたところ、この現象は、CentOS 6に含まれているglibc 2.11の挙動によるものだそうだ。glibc 2.10から、スレッドごとにメモリ空間を割り当てるような実装に変わったとのこと。なお、CentOS 5ではglibcは2.5。以下、&lt;a title=&quot;glibc 2.10 news&quot; href=&quot;http://udrepper.livejournal.com/20948.html&quot; target=&quot;_blank&quot;&gt;glibcのコミッタUlrich Drepper氏による2.10のchangelog解説&lt;/a&gt;からの抜粋。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;glibcに対する今回の変更では、スレッドごとにメモリプールを作るようになった。これで多くの場面で間違った割り当てを排除することができる。メタデータは通常1つのスレッド内でしかアクセスしない(スレッドは割り当てられたコアから移動されないのが望ましい)。アドレス空間を吹き飛ばしてしまうようなメモリのハンドリングを防ぐため、メモリプールの使い過ぎに上限が設けられた。デフォルトでは、32ビットマシンではコアあたりメモリプール2つ、64ビットマシンではコアあたりメモリプール8つを生成する。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;プールが確保するサイズは64MBであり、上の例のCentOS 6のマシンの場合、CPUは24コアの64ビットマシンなので、「24コア x 8 x 64MB」が仮想メモリとして確保されているため、VSSの列の値が大きくなっていたというわけだ。なお、このプール用のメモリはあくまで割り当てられただけで使用されているわけではない。そのため、実際に使われているメモリはRSS(Resident Set Size)の列に表示されているものである(当然だが)。&lt;/p&gt;

&lt;p&gt;Tomcat動かしてて気づいたのでタイトルが「TomcatのJVMが～」となっているが、同じようなつくりのメモリを大きく確保するアプリケーションでは同じことになるのは言わずもがな。&lt;/p&gt;

&lt;p&gt;参考1 : &lt;a href=&quot;http://www.quora.com/Why-do-some-applications-use-significantly-more-virtual-memory-on-RHEL-6-compared-to-RHEL-5&quot; target=&quot;_blank&quot;&gt;Quoraのやりとり「なぜいくつかのアプリケーションはRHEL5と比べてRHEL6では明らかに大きな仮想メモリを使うのか？」&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考2 : &lt;a href=&quot;https://www.ibm.com/developerworks/community/blogs/kevgrig/entry/linux_glibc_2_10_rhel_6_malloc_may_show_excessive_virtual_memory_usage?lang=en&quot; target=&quot;_blank&quot;&gt;IBM developerWorksの記事「Linuxのglibc 2.10以上(RHEL6)のmallocは仮想メモリの使用量を過大に表示するのか」&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考3 : &lt;a href=&quot;http://stackoverflow.com/questions/561245/virtual-memory-usage-from-java-under-linux-too-much-memory-used&quot; target=&quot;_blank&quot;&gt;StackOverflowのやりとり「Linux上でのJavaの仮想メモリ使用量が大きすぎる」&lt;/a&gt;&lt;br /&gt;
解説が非常に詳しくてためになる。&lt;/p&gt;

&lt;p&gt;参考4 : &lt;a href=&quot;http://udrepper.livejournal.com/20948.html&quot; target=&quot;_blank&quot;&gt;上述glibcコミッタUlrich Drepper氏の記事&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQL Casual Talks vol.5 メモ</title>
   <link href="http://b.l0g.jp/mysql/mysql-casual-talks-vol-5/"/>
   <updated>2013-10-26T07:06:50-07:00</updated>
   <id>http://b.l0g.jp/mysql/mysql-casual-talks-vol-5</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/mysql-casual-talks-vol-5/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQL Casual Talks vol.5 メモ&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/mysql-casual-talks-vol-5/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/mysql-casual-talks-vol-5/&quot; data-text=&quot;MySQL Casual Talks vol.5 メモ&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/mysql-casual-talks-vol-5/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zusaar.com/event/1086003&quot;&gt;MySQL Casual Talks vol. 5&lt;/a&gt;に行ってきたので、自分なりのメモと資料へのリンク。&lt;/p&gt;

&lt;p&gt;途中、アラートが鳴り始めて確認してたりしてメモが適当なところがあるが仕方なしｗ&lt;/p&gt;

&lt;p&gt;かなりのスピードでじゃんじゃんプレゼンが進んで行ったが、どれも面白い・役立つ内容ばかりで、楽しいひと時でした。発表者の皆様、会場の提供や調整などしてくださった&lt;a href=&quot;https://twitter.com/myfinder&quot; target=&quot;_blank&quot;&gt;@myfinder&lt;/a&gt;さんはじめとする皆様、ありがとうございました。自分の隣でビール缶を次々と「カシュッ」と空けていた&lt;a href=&quot;https://twitter.com/oranie&quot; target=&quot;_blank&quot;&gt;@oranie&lt;/a&gt;さんのような余裕を持ちつつ、次回は自分も何かネタを提供できるといいなあ。&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomyuryu-targetblankyuryua-gtid&quot;&gt;&lt;a href=&quot;https://twitter.com/yuryu&quot; target=&quot;_blank&quot;&gt;@yuryu&lt;/a&gt;さん GTIDを使い始めてやめた話&lt;/h2&gt;

&lt;div style=&quot;margin-bottom: 5px;&quot;&gt;
  &lt;strong&gt; &lt;a title=&quot;MySQL5.6でGTIDを試してそっと閉じた&quot; href=&quot;https://www.slideshare.net/Yuryu/mysql56gtid&quot; target=&quot;_blank&quot;&gt;MySQL5.6でGTIDを試してそっと閉じた&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/Yuryu&quot; target=&quot;_blank&quot;&gt;Haruka Iwao&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;GTID – 全てのトランザクションを一意に識別、一貫性保証&lt;/li&gt;
  &lt;li&gt;マスタを切り替えると、マスタのUUIDが変わるのでGTIDが2個になる&lt;/li&gt;
  &lt;li&gt;利点
    &lt;ul&gt;
      &lt;li&gt;change master to … master_auto_position=1で簡単にレプリをはれる&lt;/li&gt;
      &lt;li&gt;mysql workbenchのmysqlfailoverとか使える&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;欠点
    &lt;ul&gt;
      &lt;li&gt;クラスタ全部GTID有効にする必要&lt;/li&gt;
      &lt;li&gt;MyISAM使用不可&lt;/li&gt;
      &lt;li&gt;HAしたいならMHAでいいんじゃね？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;バグ
    &lt;ul&gt;
      &lt;li&gt;GTID有効でFLUSH LOGSするとレプリ停止(5.6.11のみ)&lt;/li&gt;
      &lt;li&gt;stop/start slaveするとトランザクションがスキップされる可能性あり&lt;/li&gt;
      &lt;li&gt;ネットワーク切断でトランザクションスキップの可能性&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;結局、本格的に使うには時期尚早なので辞めました、ということ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomconmame-targetblankconmamea-mysql-56&quot;&gt;&lt;a href=&quot;https://twitter.com/con_mame&quot; target=&quot;_blank&quot;&gt;@con_mame&lt;/a&gt;さん MySQL 5.6移行記&lt;/h2&gt;

&lt;div style=&quot;margin-bottom: 5px;&quot;&gt;
  &lt;strong&gt; &lt;a title=&quot;僕らのMySQL5.6移行記(仮)&quot; href=&quot;https://www.slideshare.net/conmame/mysql56-27565355&quot; target=&quot;_blank&quot;&gt;僕らのMySQL5.6移行記(仮)&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/conmame&quot; target=&quot;_blank&quot;&gt;Yutaka Hoshino&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;クックパッでは5.5のサーバを5.6にバージョンアップしたり最初から使ったり&lt;/li&gt;
  &lt;li&gt;レプリしてクエリ流してコンフィグいじり始めた
    &lt;ul&gt;
      &lt;li&gt;うまく行ったのは最初だけで問題勃発&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EBSでスナップショット取ったボリュームを5.6マシンにぶら下げてmysql_upgrade実行&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cookpad/kage&quot; target=&quot;_blank&quot;&gt;Kage&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;リクエストをコピーしてsandbox環境に流す仕組み(ユーザへはproductionからの結果が返る)&lt;/li&gt;
      &lt;li&gt;レスポンスのdiffも取れる&lt;/li&gt;
      &lt;li&gt;バックエンドを5.6にして違いを確認&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;バージョン違い、設定違いのサーバを並べて比較&lt;/li&gt;
  &lt;li&gt;開発用DBを先に新しくしてリリース前に新環境を試す&lt;/li&gt;
  &lt;li&gt;バグ確認用(最新) → 検証用(1つ前) → 本番用(安定版)&lt;/li&gt;
  &lt;li&gt;各バージョンが入ったAMIを用意しておいてすぐ起動できるようにしてある&lt;/li&gt;
  &lt;li&gt;GTID有効だとsql_slave_skip_counter使えない&lt;/li&gt;
  &lt;li&gt;AWSだと色んな検証がCasualにできる&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bugs.mysql.com/&quot; target=&quot;_blank&quot;&gt;bugs&lt;/a&gt;は見ましょう！&lt;/li&gt;
  &lt;li&gt;5.6で遅くなるところもあるので、得意な部分から本番投入していっている&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomyoshiken-targetblankyoshikena-50-tritonn56-mroonga&quot;&gt;&lt;a href=&quot;https://twitter.com/yoshi_ken&quot; target=&quot;_blank&quot;&gt;@yoshi_ken&lt;/a&gt;さん 5.0 Tritonnから5.6 mroongaへの移行&lt;/h2&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/y-ken/mysql-migrate-mysql50-to-mysql56-with-fulltext&quot; title=&quot;Tritonn (MySQL5.0.87+Senna)からの mroonga (MySQL5.6) 移行体験記&quot; target=&quot;_blank&quot;&gt;Tritonn (MySQL5.0.87+Senna)からの mroonga (MySQL5.6) 移行体験記&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/y-ken&quot; target=&quot;_blank&quot;&gt;Kentaro Yoshida&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://gihyo.jp/dev/clip/01/groonga/0006&quot;&gt;技評の記事&lt;/a&gt;の裏話&lt;/li&gt;
  &lt;li&gt;旧構成 マスタはDRBDでミラー、スレーブにレプリ&lt;/li&gt;
  &lt;li&gt;5.6スレーブを追加してそこに孫をぶら下げて旧環境を切り離し&lt;/li&gt;
  &lt;li&gt;本番環境のアクセスログから抜き出したURLを使ってテスト
    &lt;ul&gt;
      &lt;li&gt;5.6で遅くなったクエリをチューニング&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/oranie/20130402/1364906656&quot; target=&quot;_blank&quot;&gt;SQLMODE厳格化&lt;/a&gt;への対応&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;テスト中に見つけたmroongaのバグはすぐに修正してもらえた&lt;/li&gt;
  &lt;li&gt;HWトラブル
    &lt;ul&gt;
      &lt;li&gt;マスタ死亡、起動しない、焦げ臭い！さらにもう一台も焦げた。。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GTIDよりsemi sync repl + MHAがいいのでわ&lt;/li&gt;
  &lt;li&gt;innodb_file_per_tableでなかったのでダンプしてバージョンアップした&lt;/li&gt;
  &lt;li&gt;memcached APIはバグで使えなかった&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomyoku0825-targetblankyoku0825a-ddl&quot;&gt;&lt;a href=&quot;https://twitter.com/yoku0825&quot; target=&quot;_blank&quot;&gt;@yoku0825&lt;/a&gt;さん アプリ担当が出してきたDDLがドイヒーな話&lt;/h2&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/yoku0825/ss-27597161&quot; title=&quot;とあるイルカのバーボンハウス&quot; target=&quot;_blank&quot;&gt;とあるイルカのバーボンハウス&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/yoku0825&quot; target=&quot;_blank&quot;&gt;yoku0825&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;すごい心が痛い&amp;amp;共感出来る内容だったけどテンポ早すぎてメモできなかったｗ&lt;/li&gt;
  &lt;li&gt;MariaDB 10からもGTIDが使えるようになった(ただしMySQLとは結構違う)&lt;/li&gt;
  &lt;li&gt;ログ用テーブル
    &lt;ul&gt;
      &lt;li&gt;突っ込みどころたくさんww&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;インデックス名はidx_カラム名_カラム名_…とすると長いけどexplainのときに分かりやすい&lt;/li&gt;
  &lt;li&gt;フレームワークが作る通りではなくDBの特性を考える&lt;/li&gt;
  &lt;li&gt;SQL文を見るだけでどのインデックスを使うかなどの意図が分かる名前付け&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomkamipo-targetblankkamipoa-mysql-build&quot;&gt;&lt;a href=&quot;https://twitter.com/kamipo&quot; target=&quot;_blank&quot;&gt;@kamipo&lt;/a&gt;さん mysql-build&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://kamipo.github.io/talks/20131025-mysqlcasual5/&quot; target=&quot;_blank&quot;&gt;プレゼン資料&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;この辺りトラブル発生してメモがおろそか&lt;/li&gt;
  &lt;li&gt;いろんなMySQLをインストールして使い分ける仕組み&lt;/li&gt;
  &lt;li&gt;percona serverのmysqldumpにはkeyを消してダンプして作り直すオプションがある
    &lt;ul&gt;
      &lt;li&gt;ダンプが高速化&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;fbの5.6にはlogical key readのオプションがある&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomdoaki-targetblankdoakia-multi-master-replication&quot;&gt;&lt;a href=&quot;https://twitter.com/do_aki&quot; target=&quot;_blank&quot;&gt;@do_aki&lt;/a&gt;さん multi master replication&lt;/h2&gt;

&lt;div style=&quot;margin-bottom: 5px;&quot;&gt;
  &lt;strong&gt; &lt;a title=&quot;殿堂入りのアレ～Multi-Source Replication を添えて～&quot; href=&quot;https://www.slideshare.net/do_aki/ss-27565738&quot; target=&quot;_blank&quot;&gt;殿堂入りのアレ～Multi-Source Replication を添えて～&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/do_aki&quot; target=&quot;_blank&quot;&gt;do_aki&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL Casual定番の内容&lt;/li&gt;
  &lt;li&gt;change masterを2秒ごとに切り替えてマルチマスタ&lt;/li&gt;
  &lt;li&gt;5.7では標準でできるようになった&lt;/li&gt;
  &lt;li&gt;過去に色々な方法でマルチマスタを試みている人がいるww&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomrkajiyama-targetblankrkajiyamaa-57-multi-source-replication&quot;&gt;&lt;a href=&quot;https://twitter.com/RKajiyama&quot; target=&quot;_blank&quot;&gt;@RKajiyama&lt;/a&gt;さん 5.7 Multi-source replication&lt;/h2&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/rkajiyama/20131025-casual-uppt&quot; title=&quot;MySQL Casual Talks vol.5 - MySQL Labs - @RKajiyama&quot; target=&quot;_blank&quot;&gt;MySQL Casual Talks vol.5 &amp;#8211; MySQL Labs &amp;#8211; @RKajiyama&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/rkajiyama&quot; target=&quot;_blank&quot;&gt;rkajiyama&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;labsにはDMR以前のものがありますよ
    &lt;ul&gt;
      &lt;li&gt;hadoop applier for mysql
        &lt;ul&gt;
          &lt;li&gt;hadoopをMySQLスレーブのように使う&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;JSON UDF&lt;/li&gt;
      &lt;li&gt;Multi source replication&lt;/li&gt;
      &lt;li&gt;MySQL Utilities Fabric
        &lt;ul&gt;
          &lt;li&gt;シャーディングの情報を管理する仕組み&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Fabric + multi source replication + multi thread slaveの組み合わせ良さげ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomsongmu-targetblanksongmua&quot;&gt;&lt;a href=&quot;https://twitter.com/songmu&quot; target=&quot;_blank&quot;&gt;@songmu&lt;/a&gt;さん&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://songmu.github.io/slides/mysql-casual-5/&quot; target=&quot;_blank&quot;&gt;プレゼン資料&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitDDL::Migrator, SQLTranslator(SQLFairy)
    &lt;ul&gt;
      &lt;li&gt;ブランチごとにテーブルやカラムが違うと大変&lt;/li&gt;
      &lt;li&gt;テーブル構成の違いなどが表示できる&lt;/li&gt;
      &lt;li&gt;ブランチを行ったり来たりしながらalterしたりできる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;App::RunCron
    &lt;ul&gt;
      &lt;li&gt;perlのラッパー、レポータを書くと色々できる&lt;/li&gt;
      &lt;li&gt;cronのログってnullに捨てちゃうけど困るよね&lt;/li&gt;
      &lt;li&gt;cronlog&lt;/li&gt;
      &lt;li&gt;cronの処理をラップしてエラー処理が可能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomnekogeruge987-targetblanknekogeruge987a-db2mysql55&quot;&gt;&lt;a href=&quot;https://twitter.com/nekogeruge_987&quot; target=&quot;_blank&quot;&gt;@nekogeruge_987&lt;/a&gt;さん DB2からMySQL5.5への移行&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;13年運用されてるデータベース&lt;/li&gt;
  &lt;li&gt;レコードをCSVにしてload infile&lt;/li&gt;
  &lt;li&gt;シェルスクリプトで自動化&lt;/li&gt;
  &lt;li&gt;4時間以内に終わらせるという時間制約
    &lt;ul&gt;
      &lt;li&gt;loadを高速化する工夫&lt;/li&gt;
      &lt;li&gt;ジョブフローの最適化(jenkins build flow plugin)&lt;/li&gt;
      &lt;li&gt;ジョブフローをGroovyで書ける(並列実行などなども可)&lt;/li&gt;
      &lt;li&gt;データ移行自体をCIする(1クリックデータ移行！)&lt;/li&gt;
      &lt;li&gt;/var/lib/mysql以下の並列rsync&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercommonry-targetblankmonrya-amazon-rds&quot;&gt;&lt;a href=&quot;https://twitter.com/monry&quot; target=&quot;_blank&quot;&gt;@monry&lt;/a&gt;さん Amazon RDS&lt;/h2&gt;

&lt;div style=&quot;margin-bottom: 5px;&quot;&gt;
  &lt;strong&gt; &lt;a title=&quot;20131025 my sql casual talks vol.5&quot; href=&quot;https://www.slideshare.net/monry84/20131025-my-sql-casual-talks-vol5&quot; target=&quot;_blank&quot;&gt;20131025 my sql casual talks vol.5&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/monry84&quot; target=&quot;_blank&quot;&gt;Tetsuya Mori&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;マスタ1台、スレーブ5台
    &lt;ul&gt;
      &lt;li&gt;243ドル/月&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;物理サーバが1台13万以上ならRDSの方が安い(3年償却)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomchobie-targetblankchobiea-&quot;&gt;&lt;a href=&quot;https://twitter.com/chobi_e&quot; target=&quot;_blank&quot;&gt;@chobi_e&lt;/a&gt;さん ストレージエンジンを作ってみた&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twitter.com/kazuho&quot; target=&quot;_blank&quot;&gt;kazuho&lt;/a&gt;さんの&lt;a href=&quot;http://d.hatena.ne.jp/kazuhooku/20131001/1380595265&quot; target=&quot;_blank&quot;&gt;リアルタイムランキング用MySQLストレージエンジンの話&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;本を読む&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/B00ACC6ANM/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=B00ACC6ANM&amp;amp;linkCode=as2&amp;amp;tag=l0gjp-22&quot; rel=&quot;nofollow&quot;&gt;Expert MySQL&lt;/a&gt;&lt;img style=&quot;border: none !important; margin: 0px !important;&quot; alt=&quot;&quot; src=&quot;http://ir-jp.amazon-adsystem.com/e/ir?t=l0gjp-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=B00ACC6ANM&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;

        &lt;p&gt;のChapter 10&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.amazon.co.jp/gp/product/1849510601/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=247&amp;amp;creative=7399&amp;amp;creativeASIN=1849510601&amp;amp;linkCode=as2&amp;amp;tag=doublemarket-22&quot; rel=&quot;nofollow&quot;&gt;Mysql 5.1 Plugin Development&lt;/a&gt;&lt;img style=&quot;border: none !important; margin: 0px !important;&quot; alt=&quot;&quot; src=&quot;http://ir-jp.amazon-adsystem.com/e/ir?t=doublemarket-22&amp;amp;l=as2&amp;amp;o=9&amp;amp;a=1849510601&quot; width=&quot;1&quot; height=&quot;1&quot; border=&quot;0&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;ランキングと言えばredis
        &lt;ul&gt;
          &lt;li&gt;sorted setのソースを取ってくる&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;意外と簡単に書けるので書いてみよう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MyNA会2013年9月 メモ</title>
   <link href="http://b.l0g.jp/mysql/myna-201309-memo/"/>
   <updated>2013-10-01T02:25:00-07:00</updated>
   <id>http://b.l0g.jp/mysql/myna-201309-memo</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/myna-201309-memo/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MyNA会2013年9月 メモ&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/myna-201309-memo/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/myna-201309-memo/&quot; data-text=&quot;MyNA会2013年9月 メモ&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/myna-201309-memo/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://atnd.org/events/43746&quot; target=&quot;_blank&quot;&gt;MyNA(日本MySQLユーザ会)会 2013年9月&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先週のMySQL Cluster Casual Talksに続いて、週末にかけて行われた&lt;a href=&quot;http://www.oracle.com/mysqlconnect/index.html&quot; target=&quot;_blank&quot;&gt;MySQL Connect&lt;/a&gt;で発表された最新情報を聞けるということで、MyNA会に参加してきた。基調講演の内容は既に報道されていたので(Publickey &lt;a href=&quot;http://www.publickey1.jp/blog/13/facebookmysqlmysql_connect_2013.html&quot; target=&quot;_blank&quot;&gt;(1)&lt;/a&gt;, &lt;a href=&quot;http://www.publickey1.jp/blog/13/facebooktwitterpaypallinkedinmysqlmysqlmysql_connect_2013.html&quot; target=&quot;_blank&quot;&gt;(2)&lt;/a&gt;, &lt;a href=&quot;http://www.publickey1.jp/blog/13/mysql_572mysqlmysql_connect_2013.html&quot; target=&quot;_blank&quot;&gt;(3)&lt;/a&gt;)ある程度分かっていたが、一番うれしかったのはMySQL Fabricのデモが見られたこと。MySQL Utilitiesの機能でシャーディングができるようになるということでどんな感じか見てみたかったので、(ラボ版で一部動かないところがまだあるということだったが)興味深かった。発表者のみなさま、会場を提供していただいたOracleのみなさまなど関係者の方々ありがとうございました。&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomrkajiyama-targetblankrkajiyamaa-mysql-connect&quot;&gt;&lt;a href=&quot;https://twitter.com/RKajiyama&quot; target=&quot;_blank&quot;&gt;@RKajiyama&lt;/a&gt;さん MySQL Connect基調講演の概要&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;いつOracleはMySQLを殺すのかと言われてきた → うわさを打ち消すために3年半の間大量のリリースをしてきた&lt;/li&gt;
  &lt;li&gt;チーム全体も増員、特に品質管理チーム&lt;/li&gt;
  &lt;li&gt;DMR(Development Milestone Release)というやり方
    &lt;ul&gt;
      &lt;li&gt;リリース候補版になったコンポーネントを含んだリリース&lt;/li&gt;
      &lt;li&gt;18から24ヶ月ごとにメジャーリリースしたい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Webや組み込み系に強いDBとしてOracleにとっても価値&lt;/strong&gt;がある
    &lt;ul&gt;
      &lt;li&gt;現在もLinux系の最も重要なスキル＝MySQL&lt;/li&gt;
      &lt;li&gt;今もユーザは多数&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5.7.2 DMRの発表
    &lt;ul&gt;
      &lt;li&gt;Release noteが超長かった＝たくさんの更新が含まれている&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://blogs.oracle.com/mysqlinnodb/entry/innodb_5_7_performance_improvements&quot; target=&quot;_blank&quot;&gt;InnoDBパフォーマンス向上&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;explain for connectionで別セッションのexplain&lt;/li&gt;
      &lt;li&gt;Optimzerの結果をWorkbenchでさらに詳しく&lt;/li&gt;
      &lt;li&gt;performance schema改善
        &lt;ul&gt;
          &lt;li&gt;メモリの使用状況&lt;/li&gt;
          &lt;li&gt;storedの詳細&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;tmpテーブルがInnoに&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;同じDB内でのマルチスレッドレプリケーション&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;5.7の以後のバージョンでの予定
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;マルチソースレプリケーション&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL Utilities 1.3
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;レプリケーションのフェイルオーバをデーモンで&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MySQL Utilities 1.4から
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/nixnutz/mysql-57-fabric-high-availability-and-sharding&quot; target=&quot;_blank&quot;&gt;Fabric&lt;/a&gt;&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;アプリから意識せずにシャーディングできる&lt;/li&gt;
          &lt;li&gt;Connectorが接続を受けて振り分ける&lt;/li&gt;
          &lt;li&gt;レンジかハッシュ、リシャーディング&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gree-scsk-mysql-connect&quot;&gt;いちいさん@Gree, いけださん@SCSK MySQL Connectの感想&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Oracle OpenWorld、JavaOneと一緒にやってる&lt;/li&gt;
  &lt;li&gt;SFのホテルいくつも貸し切り、道路も閉鎖して休憩スペースに&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://medianetwork.oracle.com/video/player/2686429205001&quot; target=&quot;_blank&quot;&gt;FacebookのMySQLの話&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;まつのぶさん MySQL 5.6@Facebook
    &lt;ul&gt;
      &lt;li&gt;5.1にパッチ当てたのを使っている
        &lt;ul&gt;
          &lt;li&gt;圧縮、クラッシュセーフスレーブ、フラッシングの高速化など&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;シャドウサーバ&lt;/li&gt;
      &lt;li&gt;5.5を飛ばして5.6へ
        &lt;ul&gt;
          &lt;li&gt;低リスクのところから徐々に移行&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;http://www.theregister.co.uk/2013/09/12/google_mariadb_mysql_migration/&quot; target=&quot;_blank&quot;&gt;GoogleがMySQLをやめてMariaDBに全面移行する&lt;/a&gt;というのは、XLDBというカンファレンスでの話を元にした記者の煽り記事&lt;/strong&gt;で、Googleの人曰く迷惑しているそうだ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomyyamasaki1-targetblankyyamasaki1a-json-udfs&quot;&gt;&lt;a href=&quot;https://twitter.com/yyamasaki1&quot; target=&quot;_blank&quot;&gt;@yyamasaki1&lt;/a&gt;さん JSON UDFs&lt;/h2&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/yoyamasaki/my-sql-jsonudf&quot; title=&quot;ドキュメントデータベースとして MySQLを使う!? ～MySQL JSON UDF～&quot; target=&quot;_blank&quot;&gt;ドキュメントデータベースとして MySQLを使う!? ～MySQL JSON UDF～&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/yoyamasaki&quot; target=&quot;_blank&quot;&gt;yoyamasaki&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL json UDFs
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://labs.mysql.com/&quot; target=&quot;_blank&quot;&gt;ラボ版の5.7&lt;/a&gt;に搭載された新機能&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;カラムにJSONをつっこんだものをファンクションで処理できる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercomrkajiyama-targetblankrkajiyamaa-mysql-fabric&quot;&gt;&lt;a href=&quot;https://twitter.com/RKajiyama&quot; target=&quot;_blank&quot;&gt;@RKajiyama&lt;/a&gt;さん MySQL Fabric&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://labs.mysql.com/&quot; target=&quot;_blank&quot;&gt;ラボ版のMySQL Utilities&lt;/a&gt;に搭載された新機能&lt;/li&gt;
  &lt;li&gt;マスタにスレーブがぶら下がってる構成
    &lt;ul&gt;
      &lt;li&gt;これを1つのシャード(グループ)として扱う&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;アプリからConnectorを使ってアクセスする
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;ConnectorはFabricに問い合わせ先を確認してからシャードにアクセス&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;state storeに情報保存&lt;/li&gt;
      &lt;li&gt;スキーマの情報などだけもってデータは持たない&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;グローバルグループ
    &lt;ul&gt;
      &lt;li&gt;全体に影響のある処理に関係するメタ情報を持つ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;アクセス時にRWかROを指定すると、Fabricが自動でマスタあるいはスレーブにアクセスを振る&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lab版は罠だらけ&lt;/strong&gt;なので気をつけよう。。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://vnwrites.blogspot.jp/&quot; target=&quot;_blank&quot;&gt;開発者の方のブログ&lt;/a&gt;が役に立つ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttpstwittercommktredwell-targetblanka-gnu-30mysql&quot;&gt;&lt;a href=&quot;https://twitter.com/mktredwell&quot; target=&quot;_blank&quot;&gt;赤井さん&lt;/a&gt; GNU 30周年とMySQL&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;GNUプロジェクトが始まって30年&lt;/li&gt;
  &lt;li&gt;MySQLの成長はGNUの恩恵を受けた&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GNUへのリスペクトを忘れないように&lt;/strong&gt;しよう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQL Cluster Casual Talksメモ</title>
   <link href="http://b.l0g.jp/mysql/mysql-cluster-casual-talks-memo/"/>
   <updated>2013-09-27T02:25:33-07:00</updated>
   <id>http://b.l0g.jp/mysql/mysql-cluster-casual-talks-memo</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/mysql-cluster-casual-talks-memo/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQL Cluster Casual Talksメモ&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/mysql-cluster-casual-talks-memo/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/mysql-cluster-casual-talks-memo/&quot; data-text=&quot;MySQL Cluster Casual Talksメモ&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/mysql-cluster-casual-talks-memo/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://atnd.org/events/42911&quot; target=&quot;_blank&quot;&gt;MySQL Cluster Casual Talks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一応仕事でMySQLをよく触っている身として、軽く検証はしてみたものの、担当している業務では参照メインのDBが多いこともあって実運用では使ったことがなかったMySQL Cluster。改めて利点も欠点も聞いておきたいと思ったのと、会社からすぐ近くのGMOさんが会場ということもあって参加してみた。&lt;/p&gt;

&lt;p&gt;MySQL Clusterの本も書かれている@nippondanjiこと奥野さんから、MySQL Clusterは何に向いていて、どう使えばよさを引き出せるのかを聞いたうえで、そのサポートを受けながら4年間運用されている@tsakuradaさんの実運用上のハマりどころを聞くことで、どういうところにMySQL Clusterを使えばいいのかイメージが浮かんだので、非常に今後の役に立ちそう。&lt;/p&gt;

&lt;p&gt;発表者のみなさま、会場提供していただいたGMOのみなさまありがとうございましたm(__)m さくらのクラウド2万円分クーポンももらったし、GMOクラウドのキャラクタのシールもたくさんもらったので宣伝しますｗ&lt;/p&gt;

&lt;p&gt;既にまとめは&lt;a href=&quot;http://twitter.com/76whizkidz&quot; target=&quot;_blank&quot;&gt;garage-kid&lt;/a&gt;さんが&lt;a href=&quot;http://d.hatena.ne.jp/garage-kid/20130926/mysqlclustercasualtalks&quot; target=&quot;_blank&quot;&gt;書いてくれている&lt;/a&gt;ので、これは個人的なポイントのまとめ。&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttptwittercomrkajiyama-targetblankrkajiyamaa-mysql-cluster5656&quot;&gt;&lt;a href=&quot;http://twitter.com/RKajiyama&quot; target=&quot;_blank&quot;&gt;@RKajiyama&lt;/a&gt;さん MySQL Cluster大地に立つ！「5.6とは違うのだよ、5.6とは！」&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL Clusterの概要
    &lt;ul&gt;
      &lt;li&gt;分散型、共有ディスク不要のHAクラスタ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;使用しているユーザ
    &lt;ul&gt;
      &lt;li&gt;元々はモバイル通信の位置情報をリアルタイムかつ高可用性を持って保存するためにできた&lt;/li&gt;
      &lt;li&gt;SQLインタフェースは昨今ゲーム業界などで使われ始めてから追加されてきた機能&lt;/li&gt;
      &lt;li&gt;艦○れでも使われている？&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttptwittercomnippondanji-targetblanknippondanjia-mysql-cluster&quot;&gt;&lt;a href=&quot;http://twitter.com/nippondanji&quot; target=&quot;_blank&quot;&gt;@nippondanji&lt;/a&gt;さん カジュアルにMySQL Clusterを使ってみよう&lt;/h2&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/nippondanji/mcct&quot; title=&quot;カジュアルにMySQL Clusterを使ってみよう@MySQL Cluster Casual Talks 2013.09&quot; target=&quot;_blank&quot;&gt;カジュアルにMySQL Clusterを使ってみよう@MySQL Cluster Casual Talks 2013.09&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/nippondanji&quot; target=&quot;_blank&quot;&gt;Mikiya Okuno&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;p&gt;データノード、SQLノード、管理ノードの3種類からなる&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1台だけならndb(MySQL Clusterのエンジン)よりInnoDBの方が速い&lt;/li&gt;
  &lt;li&gt;ただしNDB APIを使うならClusterの方が圧倒的に速い&lt;/li&gt;
  &lt;li&gt;ノードを増やすとスケールしていく点に優位性があるが、いつでも速くなるとは限らない(後述)&lt;/li&gt;
  &lt;li&gt;新しいバージョン使いましょう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;シェアードナッシング型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;データノードは2台ペアでノードグループを構成&lt;/li&gt;
  &lt;li&gt;データをフラグメントに分けて、それをノードグループ内で同期レプリする&lt;/li&gt;
  &lt;li&gt;RAID10的な感じでグループ内で1台落ちてもデータは保全される&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InnoDBとは特性が違う &amp;amp; いつでもノードを増やせばスケールするとは限らない&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;主キーを使った検索 → データノード数に応じてスケール&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(少数の行を取ってくる)スキャンは苦手&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;データがノードに分散しているので複数ノードをスキャンする必要があるため&lt;/li&gt;
      &lt;li&gt;フェッチするレコードが多いと並列処理できるので早くなる&lt;/li&gt;
      &lt;li&gt;Engine Condition Pushdown : where句部分を丸ごとデータノードに渡して並列処理して高速化する仕組み&lt;/li&gt;
      &lt;li&gt;sysbenchをただ走らせると遅いのはこのせい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ユーザ定義パーティション
    &lt;ul&gt;
      &lt;li&gt;スキャンを高速化させる仕組み&lt;/li&gt;
      &lt;li&gt;2つのテーブルの関連を考慮してデータノードへの分散を定義すれば、読み書きを特定のノードに抑えられるので高速に&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;レプリケーション
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;ndbに不得意な処理があるならInnoDB&lt;/strong&gt;のスレーブを作るという手もある&lt;/li&gt;
      &lt;li&gt;データノードが書き込みしたことをSQLノードに通知し、それをbinlogに書き込んでスレーブに送るという仕組み&lt;/li&gt;
      &lt;li&gt;通知を受け取るのがbinlog injector thread&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;インメモリDBだけど永続化処理が多いのでディスク書き込み多い＝速いディスクがいい&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;blobを別テーブルに保存するのでJOIN的処理が発生して遅くなる&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;varcharで頑張ろう&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NoSQLインタフェースを使えば爆速
    &lt;ul&gt;
      &lt;li&gt;各種言語のインタフェースあり&lt;/li&gt;
      &lt;li&gt;InnoDBのmemcachedインタフェースよりMySQL Clusterの方が現時点では賢い&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まとめ(MySQL Clusterの使いどころ)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大量の更新をさばきたい&lt;/li&gt;
  &lt;li&gt;HA機能が欲しい&lt;/li&gt;
  &lt;li&gt;高速JOINしたい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttptwittercomtsakurada-targetblanktsakuradaa-mysql-clusterversion-73&quot;&gt;&lt;a href=&quot;http://twitter.com/tsakurada&quot; target=&quot;_blank&quot;&gt;@tsakurada&lt;/a&gt;さん MySQL Clusterと丸４年の付き合いを振り返ってのよもやま話と、Version 7.3への期待（もっとユーザが増えるといいな～）&lt;/h2&gt;

&lt;div style=&quot;margin-bottom: 5px;&quot;&gt;
  &lt;strong&gt; &lt;a title=&quot;MCCT20130926 tsakuradac&quot; href=&quot;https://www.slideshare.net/TakeshiSakurada/mcct20130926-tsakuradac&quot; target=&quot;_blank&quot;&gt;MCCT20130926 tsakuradac&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/TakeshiSakurada&quot; target=&quot;_blank&quot;&gt;Takeshi Sakurada&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;p&gt;使用開始時の期待と使ってみたギャップ、現在の期待&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;インメモリだから速いはず
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;参照に関していえばFIO+InnoDBでも変わらないかも&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;スケールアウト簡単
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;構成によってはスケールしない&lt;/strong&gt;こともあるので要考慮&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;高可用性
    &lt;ul&gt;
      &lt;li&gt;期待通り、フェイルオーバーは数秒で完了&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;ライセンスがGPLでオープンソース&lt;/li&gt;
  &lt;li&gt;7.3でInnoとの互換性が上がって期待&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;サーバの構成&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SQLノードと管理ノードは同居してもよい、データノード2台と合わせて最低4台からが現実的&lt;/li&gt;
  &lt;li&gt;データが多いならデータノードを増やす(が制約はあるので注意)&lt;/li&gt;
  &lt;li&gt;アクセスが多いならSQLノードを増やす。制約は少ないので割と簡単&lt;/li&gt;
  &lt;li&gt;せっかくのMySQL ClusterなんだからHW構成上もSPOFを減らそう&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;クエリがキャンセルされた時それを検出して後続処理をやるアプリ作り込み必須&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;ノード障害時にクエリがキャンセルされるため&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;InnoDBとの組み合わせ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Innoと同じ感覚でテーブル設計してもよいか？
    &lt;ul&gt;
      &lt;li&gt;場合による。最近のバージョンではやってみる価値あり&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;InnoDBスレーブとの組み合わせ
    &lt;ul&gt;
      &lt;li&gt;分離レベルが違う点は要注意だがおおむね問題なし&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ハマりどころ(資料が詳しいのでそちら参照)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GCP Stop&lt;/li&gt;
  &lt;li&gt;ローリングリスタート&lt;/li&gt;
  &lt;li&gt;ボトルネックが見えづらい&lt;/li&gt;
  &lt;li&gt;データのライフサイクルを考えよう&lt;/li&gt;
  &lt;li&gt;リストアが大変&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4年間でだいぶ地雷を踏んだのでもう大丈夫ｗ 皆さんMySQL Cluster使いましょう&lt;/p&gt;

&lt;h2 id=&quot;a-hrefhttptwittercomyyamasaki1-targetblankyyamasaki1a-mysql-cluster-auto-installer&quot;&gt;&lt;a href=&quot;http://twitter.com/yyamasaki1&quot; target=&quot;_blank&quot;&gt;@yyamasaki1&lt;/a&gt;さん MySQL Cluster Auto-Installerのデモ&lt;/h2&gt;

&lt;div style=&quot;margin-bottom:5px&quot;&gt;
  &lt;strong&gt; &lt;a href=&quot;https://www.slideshare.net/yoyamasaki/5mysql-cluster&quot; title=&quot;5分で作るMySQL Cluster環境&quot; target=&quot;_blank&quot;&gt;5分で作るMySQL Cluster環境&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&quot;http://www.slideshare.net/yoyamasaki&quot; target=&quot;_blank&quot;&gt;yoyamasaki&lt;/a&gt;&lt;/strong&gt;
&lt;/div&gt;

&lt;p&gt;Auto-Installer簡単なので使いましょう&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ブラウザベースでぽちぽちやればインストール可能&lt;/li&gt;
  &lt;li&gt;初期パラメータをいくつかいじった方がいい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-hrefhttptwittercomyoku0825-targetblankyoku0825a-ndbcluster&quot;&gt;&lt;a href=&quot;http://twitter.com/yoku0825&quot; target=&quot;_blank&quot;&gt;@yoku0825&lt;/a&gt;さん ウチがNDBCLUSTERを使わない理由をもう一度考える&lt;/h2&gt;

&lt;p&gt;MySQL Clusterというと紛らわしいので、NDB Clusterと言いましょう&amp;lt;table border=0&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/table&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nagiosのプラグイン作成や設定ファイル操作にpynagが超便利！</title>
   <link href="http://b.l0g.jp/nagios/pynag-introduction/"/>
   <updated>2013-06-12T02:51:05-07:00</updated>
   <id>http://b.l0g.jp/nagios/pynag-introduction</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/nagios/pynag-introduction/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Nagiosのプラグイン作成や設定ファイル操作にpynagが超便利！&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/nagios/pynag-introduction/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/nagios/pynag-introduction/&quot; data-text=&quot;Nagiosのプラグイン作成や設定ファイル操作にpynagが超便利！&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/nagios/pynag-introduction/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nagiosの設定ファイルをパースする簡単な方法ないかなと思って調べてたら、&lt;a href=&quot;http://pynag.org/&quot; title=&quot;pynag.org&quot; target=&quot;_blank&quot;&gt;pynag&lt;/a&gt;という超便利なパッケージ発見。日本語の情報ほとんどないけど、Fedoraの標準パッケージになっているってことは割と一般的なんだろうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nagiosのプラグインを簡単に作りたい&lt;/li&gt;
  &lt;li&gt;Nagiosの設定ファイルをパースして値を取りたい&lt;/li&gt;
  &lt;li&gt;Nagiosの設定をコマンドラインやプログラムから取得・変更したい&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;って時に重宝する。pynagという名の通り、pythonで書かれている。公式ページのそのまんま訳に近いけど、使い方ご紹介。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;インストール&lt;/h2&gt;

&lt;p&gt;Fedoraの最近のバージョンには標準で含まれており、CentOSやRHELならepelを使えるようにしておけばyumでインストールできる。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo yum install http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm&lt;/p&gt;

&lt;p&gt;$ sudo yum install pynag&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;pipが使えるならpipでもインストールできる。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo pip install pynag&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;設定ファイルのパース&lt;/h2&gt;

&lt;p&gt;pynagパッケージのModelモジュールを使えば、 /etc/nagios など代表的なパスから nagios.cfg を探し出して読み込んでくれる。含まれるホストとそのホストに関連づいたContact groupを表示する例。&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;p&gt;from pynag import Model&lt;/p&gt;

&lt;p&gt;# Get all hosts&lt;/p&gt;

&lt;p&gt;all_hosts = Model.Host.objects.all&lt;/p&gt;

&lt;p&gt;for i in all_hosts:&lt;/p&gt;

&lt;p&gt;print i.host_name, i.contact_groups&lt;/p&gt;

&lt;p&gt;[/python]&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;設定書き換え&lt;/h2&gt;

&lt;p&gt;同じようにして、設定を保存することもできる。ホスト名がexamplehostのホストのContact groupを「mycontactgroup」にする例。&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;p&gt;from pynag import Model&lt;/p&gt;

&lt;p&gt;services = Model.Service.objects.filter(host_name=’examplehost’)&lt;/p&gt;

&lt;p&gt;for i in services:&lt;/p&gt;

&lt;p&gt;i.contactgroups = “mycontactgroup”&lt;/p&gt;

&lt;p&gt;i.save()&lt;/p&gt;

&lt;p&gt;[/python]&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;ステータスの取得&lt;/h2&gt;

&lt;p&gt;監視結果が保存されているstatus.datファイルのパースもしてくれるので、ホストやサービスのステータス取得もできる。&lt;/p&gt;

&lt;p&gt;ホストグループ名とサービス名を引数に与えてやると、ホストグループに所属するホスト全てに関するサービスのステータスを返すスクリプト。&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;p&gt;import sys&lt;/p&gt;

&lt;p&gt;from pynag import Model&lt;/p&gt;

&lt;p&gt;from pynag.Parsers import status&lt;/p&gt;

&lt;p&gt;argvs = sys.argv&lt;/p&gt;

&lt;p&gt;argc = len(argvs)&lt;/p&gt;

&lt;p&gt;status = status()&lt;/p&gt;

&lt;p&gt;if (argc != 3):&lt;/p&gt;

&lt;p&gt;print&lt;/p&gt;

&lt;p&gt;print(“Usage: ./%s hostgroup service” % argvs[0])&lt;/p&gt;

&lt;p&gt;print&lt;/p&gt;

&lt;p&gt;sys.exit()&lt;/p&gt;

&lt;p&gt;hostgroups = Model.Hostgroup.objects.filter(hostgroup_name=argvs[1])&lt;/p&gt;

&lt;p&gt;for hostgroup in hostgroups:&lt;/p&gt;

&lt;p&gt;print(“Hostgroup: %s” % hostgroup.hostgroup_name)&lt;/p&gt;

&lt;p&gt;print(“Member:”)&lt;/p&gt;

&lt;p&gt;for host in hostgroup.members.split(‘,’):&lt;/p&gt;

&lt;p&gt;print(“%s %s” % (host, status.get_servicestatus(host, argvs[2])[‘current_state’]))&lt;/p&gt;

&lt;p&gt;[/python]&lt;/p&gt;

&lt;p&gt;status.datのパースにはやや時間がかかるので、監視対象サーバの台数が多いと使用に耐えない。そういう場合は、高速にステータスを取得できる&lt;a href=&quot;http://mathias-kettner.de/checkmk_livestatus.html&quot; title=&quot;MK Livestatus&quot; target=&quot;_blank&quot;&gt;MK Livestatus&lt;/a&gt;と組み合わせることもできる。インストール方法は割愛するのでWebページを参照するべし。MK Livestatusを使って、上のスクリプトと同じようにホストグループとサービス名を引数に与えてホストのステータスを取得する例。&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;p&gt;import sys&lt;/p&gt;

&lt;p&gt;from pynag import Model&lt;/p&gt;

&lt;p&gt;from pynag.Parsers import mk_livestatus&lt;/p&gt;

&lt;p&gt;argvs = sys.argv&lt;/p&gt;

&lt;p&gt;argc = len(argvs)&lt;/p&gt;

&lt;p&gt;livestatus = mk_livestatus()&lt;/p&gt;

&lt;p&gt;if (argc != 3):&lt;/p&gt;

&lt;p&gt;print&lt;/p&gt;

&lt;p&gt;print(“Usage: ./%s hostgroup service” % argvs[0])&lt;/p&gt;

&lt;p&gt;print&lt;/p&gt;

&lt;p&gt;sys.exit()&lt;/p&gt;

&lt;p&gt;hostgroups = Model.Hostgroup.objects.filter(hostgroup_name=argvs[1])&lt;/p&gt;

&lt;p&gt;for hostgroup in hostgroups:&lt;/p&gt;

&lt;p&gt;print(“Hostgroup: %s” % hostgroup.hostgroup_name)&lt;/p&gt;

&lt;p&gt;print(“Member:”)&lt;/p&gt;

&lt;p&gt;for host in hostgroup.members.split(‘,’):&lt;/p&gt;

&lt;p&gt;print(host)&lt;/p&gt;

&lt;p&gt;print(livestatus.get_service(host,argvs[2])[‘host_services_with_info’])&lt;/p&gt;

&lt;p&gt;[/python]&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;コマンドラインから使う&lt;/h2&gt;

&lt;p&gt;Pythonのスクリプト内だけでなく、pynagコマンドとしてシェルから直接使うこともできる。where句で対象を絞ることが可能。&lt;/p&gt;

&lt;p&gt;全ホストオブジェクトを表示する例。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ pynag list where object_type=host&lt;/p&gt;

&lt;p&gt;object_type shortname filename&lt;/p&gt;

&lt;p&gt;——————————————————————————–&lt;/p&gt;

&lt;p&gt;host server01 /etc/nagios/Default_collector/hosts.cfg&lt;/p&gt;

&lt;p&gt;host server02 /etc/nagios/Default_collector/hosts.cfg&lt;/p&gt;

&lt;p&gt;(中略)&lt;/p&gt;

&lt;p&gt;———-123 objects matches search condition———————————-&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;MySQL_Connect_cというサービスのチェックコマンドを表示する例。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ pynag list effective_command_line where service_description=MySQL_Connect_c&lt;/p&gt;

&lt;p&gt;effective_command_line&lt;/p&gt;

&lt;p&gt;——————————————————————————–&lt;/p&gt;

&lt;p&gt;/usr/lib64/nagios/plugins/check_mysql_health –hostname –user nagios –password nagios –mode connection-time –database test –critical 1&lt;/p&gt;

&lt;p&gt;———-1 objects matches search condition————————————&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;もちろんコマンドラインから設定の変更も可能。ホスト名server01をserver02に変更する例。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ pynag update set host_name=server02 where host_name=server01 and object_type=host&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;where句にはlikeのような部分一致が使えないようだ。複雑なクエリを発行したいときは、pythonスクリプトとして作った方がいいかもしれない。コマンドラインでの使い方は&lt;a href=&quot;https://github.com/pynag/pynag/wiki/Pynag-command-line-utility&quot; title=&quot;pynag wiki&quot; target=&quot;_blank&quot;&gt;Wiki&lt;/a&gt;にもう少し詳しく書いてある。&lt;/p&gt;

&lt;h2 id=&quot;nagios&quot;&gt;Nagiosプラグイン作成時に使う&lt;/h2&gt;

&lt;p&gt;個人的に一番ツボなのがこの機能。自作のプラグインに、Nagiosのプラグインを書く際のガイドラインに準じた引数の処理などを簡単に加えることができる。&lt;/p&gt;

&lt;p&gt;/proc/loadavgの中身から、ロードアベレージを引いてくる簡単な例。&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;p&gt;#!/usr/bin/python&lt;/p&gt;

&lt;p&gt;import os,sys&lt;/p&gt;

&lt;p&gt;## プラグインのオプションを生成&lt;/p&gt;

&lt;p&gt;np = Plugin()&lt;/p&gt;

&lt;p&gt;## コマンドライン引数を追加&lt;/p&gt;

&lt;p&gt;np.add_arg(“l”,”load-file”, “Enter a load average file”, required=None)&lt;/p&gt;

&lt;p&gt;## プラグインをアクティベート&lt;/p&gt;

&lt;p&gt;np.activate()&lt;/p&gt;

&lt;p&gt;## load-fileオプションが指定されたらそのファイルからLAを読み込む&lt;/p&gt;

&lt;p&gt;## デバッグと、add_argメソッドのサンプルとして&lt;/p&gt;

&lt;p&gt;if np[‘load-file’]:&lt;/p&gt;

&lt;p&gt;load_file = np[‘load-file’]&lt;/p&gt;

&lt;p&gt;else:&lt;/p&gt;

&lt;p&gt;load_file = “/proc/loadavg”&lt;/p&gt;

&lt;p&gt;## ちょっとしたエラーチェック&lt;/p&gt;

&lt;p&gt;if not os.path.isfile(load_file):&lt;/p&gt;

&lt;p&gt;np.nagios_exit(np.UNKNOWN, “Missing Load average file %s” % load_file)&lt;/p&gt;

&lt;p&gt;## チェックに使う値を取得&lt;/p&gt;

&lt;p&gt;current_load = os.popen(“cat %s” % load_file).readline().split()[0]&lt;/p&gt;

&lt;p&gt;## パフォーマンスデータを付加&lt;/p&gt;

&lt;p&gt;np.add_perfdata(“1min”, current_load)&lt;/p&gt;

&lt;p&gt;## チェック実行&lt;/p&gt;

&lt;p&gt;np.check_range(current_load)&lt;/p&gt;

&lt;p&gt;[/python]&lt;/p&gt;

&lt;p&gt;上のスクリプトをcheck_cpu.pyとして保存しておく。5行目のPlugin()で、プラグインとして必要なオプションが用意されるので、以下のようにスクリプトに引数を指定しないで実行しただけで、簡易ヘルプが表示される。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ ./check_load.py&lt;/p&gt;

&lt;p&gt;usage: check_load.py [options]&lt;/p&gt;

&lt;p&gt;check_load.py: error: You must provide a WARNING and/or CRITICAL value&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;さらに、-hオプションをつけると、詳細なヘルプが表示される。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ ./check_load.py -h&lt;/p&gt;

&lt;p&gt;usage: check_load.py [options]&lt;/p&gt;

&lt;p&gt;options:&lt;/p&gt;

&lt;p&gt;-h, –help show this help message and exit&lt;/p&gt;

&lt;p&gt;-l LOAD-FILE, –load-file=LOAD-FILE&lt;/p&gt;

&lt;p&gt;Enter a load average file&lt;/p&gt;

&lt;p&gt;-v VERBOSE, –verbose=VERBOSE&lt;/p&gt;

&lt;p&gt;Verbosity Level&lt;/p&gt;

&lt;p&gt;-H HOST, –host=HOST Target Host&lt;/p&gt;

&lt;p&gt;-t TIMEOUT, –timeout=TIMEOUT&lt;/p&gt;

&lt;p&gt;Connection Timeout&lt;/p&gt;

&lt;p&gt;-c CRITICAL, –critical=CRITICAL&lt;/p&gt;

&lt;p&gt;Critical Threshhold&lt;/p&gt;

&lt;p&gt;-w WARNING, –warning=WARNING&lt;/p&gt;

&lt;p&gt;Warn Threshhold&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;ここで、スクリプト内の8行目、add_argメソッドで追加したオプションが、ヘルプの中に「-l LOAD-FILE, –load-file=LOAD-FILE」として表示されている。また、-Hでの監視対象ホスト指定や-c,-wによる閾値の指定オプションがはじめから用意されていることがわかる。自作スクリプトを書くたびにオプションのパースから書いていた事を考えれば、なんという簡単さ！&lt;/p&gt;

&lt;p&gt;もちろん、ヘルプでみたとおりのオプションを与えてやれば、プラグインとして使用可能。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ uptime&lt;/p&gt;

&lt;p&gt;13:16:19 up 396 days, 22:32, 3 users, load average: 0.60, 1.08, 1.04&lt;/p&gt;

&lt;p&gt;$ ./check_load.py -w 1 127.0.0.1&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;OK: 0.60 is inside warning=1 and critical=None&lt;/td&gt;
      &lt;td&gt;‘1min’=0.60;;;;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;元々やりたかったのは「同一ホストグループ内のある台数のチェック失敗まではWARNING、その台数以上のチェック失敗でCRITICALアラートを上げたい」ということだったのだが、以下のような短いプラグインスクリプトで実現できた。&lt;/p&gt;

&lt;p&gt;[python]&lt;/p&gt;

&lt;p&gt;#!/usr/bin/python&lt;/p&gt;

&lt;p&gt;import sys&lt;/p&gt;

&lt;p&gt;from pynag import Model&lt;/p&gt;

&lt;p&gt;from pynag.Parsers import status&lt;/p&gt;

&lt;p&gt;from pynag.Plugins import simple as Plugin&lt;/p&gt;

&lt;p&gt;np = Plugin()&lt;/p&gt;

&lt;p&gt;status = status()&lt;/p&gt;

&lt;p&gt;np.add_arg(“g”, “hostgroup”, “Hostgroup name”, required=1)&lt;/p&gt;

&lt;p&gt;np.add_arg(“s”, “service”, “Service name”, required=1)&lt;/p&gt;

&lt;p&gt;np.activate()&lt;/p&gt;

&lt;p&gt;errornum = 0&lt;/p&gt;

&lt;p&gt;hostgroups = Model.Hostgroup.objects.filter(hostgroup_name=np[‘hostgroup’])&lt;/p&gt;

&lt;p&gt;for hostgroup in hostgroups:&lt;/p&gt;

&lt;p&gt;for host in hostgroup.members.split(‘,’):&lt;/p&gt;

&lt;p&gt;if status.get_servicestatus(host, np[‘service’])[‘current_state’] != “0”:&lt;/p&gt;

&lt;p&gt;errornum = errornum + 1&lt;/p&gt;

&lt;p&gt;np.add_perfdata(“WARN/CRIT”, errornum)&lt;/p&gt;

&lt;p&gt;np.check_range(errornum)&lt;/p&gt;

&lt;p&gt;[/python]&lt;/p&gt;

&lt;p&gt;2台のチェックに失敗している時の例。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;# 2より多いとwarn、3より多いとcrit&lt;/p&gt;

&lt;p&gt;$ python check_wipeout.py –hostgroup=common_dbs –service=ifSpeed_eth0_w -w 2 -c 3&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;OK: 2 is inside warning=2 and critical=3&lt;/td&gt;
      &lt;td&gt;‘WARN/CRIT’=2;;;;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;$ echo $?&lt;/p&gt;

&lt;p&gt;# 1より多いとwarn、3より多いとcrit&lt;/p&gt;

&lt;p&gt;$ python check_wipeout.py –hostgroup=common_dbs –service=ifSpeed_eth0_w -w 1 -c 3&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;WARNING: 2 is outside warning range: 1&lt;/td&gt;
      &lt;td&gt;‘WARN/CRIT’=2;;;;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;$ echo $?&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;

&lt;p&gt;# 1より多いとcrit&lt;/p&gt;

&lt;p&gt;$ python check_wipeout.py –hostgroup=common_dbs –service=ifSpeed_eth0_w -c 1&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CRITICAL: 2 is outside critical range: 1&lt;/td&gt;
      &lt;td&gt;‘WARN/CRIT’=2;;;;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;$ echo $?&lt;/p&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;というわけで、pynagがあるとNagiosプラグインを書くのが超簡単になる！ pynag万歳！&lt;/p&gt;

&lt;p&gt;ドキュメントは&lt;a href=&quot;https://github.com/pynag/pynag/wiki&quot; title=&quot;pynag wiki&quot; target=&quot;_blank&quot;&gt;Github上のWiki&lt;/a&gt;を見るとよい。Wikiからだと分からない部分も多いが、&lt;a href=&quot;https://github.com/pynag/pynag&quot; title=&quot;pynag&quot; target=&quot;_blank&quot;&gt;ソース自体&lt;/a&gt;はそれほど複雑ではないので読んでみればわかるのでは。&amp;lt;table norder=0&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;/table&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Nagiosの設定ファイル生成ツールnconfが使いやすいのであーる</title>
   <link href="http://b.l0g.jp/nagios/setup-nconf/"/>
   <updated>2013-06-09T08:49:25-07:00</updated>
   <id>http://b.l0g.jp/nagios/setup-nconf</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/nagios/setup-nconf/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Nagiosの設定ファイル生成ツールnconfが使いやすいのであーる&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/nagios/setup-nconf/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/nagios/setup-nconf/&quot; data-text=&quot;Nagiosの設定ファイル生成ツールnconfが使いやすいのであーる&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/nagios/setup-nconf/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nagiosの設定ファイルを編集するツールには、&lt;a title=&quot;NagiosQL&quot; href=&quot;http://www.nagiosql.org/&quot; target=&quot;_blank&quot;&gt;NagiosQL&lt;/a&gt;など&lt;a title=&quot;Nagios Config Tools&quot; href=&quot;http://www.nagios.org/projects/nagiosconfigtools&quot; target=&quot;_blank&quot;&gt;いくつかある&lt;/a&gt;が、あれこれ触ってみた感じ&lt;a title=&quot;nconf&quot; href=&quot;http://www.nconf.org/dokuwiki/doku.php&quot; target=&quot;_blank&quot;&gt;nconf&lt;/a&gt;がよさげだった。JQueryなどを適宜使って動きは軽快だし、メニューの構成などもストレートで直感的に使えるところがNagiosQLよりも気にいった。&lt;/p&gt;

&lt;p&gt;監視の設定はできる限り自動生成するくらいが大規模なシステムでは最近の主流かもしれないが、そこまでの大きさのシステムではない時でも、設定ファイルを手で編集するのはいただけない。Nagiosを使うならとりあえずnconfも一緒に入れて設定すべし。&lt;/p&gt;

&lt;p&gt;最新版が2011年で開発が活発でないのは気になるが、基本的な機能は網羅されており不自由は感じないので、しばらく使っている。ってことで、CentOS6.4にNagiosとnconfをインストールして、監視を始めるまでの手順。&lt;/p&gt;

&lt;h2 id=&quot;nagios&quot;&gt;Nagiosのインストール&lt;/h2&gt;

&lt;p&gt;epelリポジトリにNagiosが含まれているので、epelをインストールしてからNagiosと、監視に使うプラグインをインストール。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo yum install http://ftp-srv2.kddilabs.jp/Linux/distributions/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm&lt;/p&gt;

&lt;p&gt;$ sudo yum install nagios nagios-plugins&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;Nagiosと一緒に、PHPやPerl、Apacheなども一緒にインストールされる。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/nagios start&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/httpd start&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;NagiosとApacheを起動したら、 http://(サーバのIP)/nagios をブラウザで開いて、ユーザ名 nagiosadmin、パスワード nagiosadmin でログインするとNagios管理画面が開ければNagiosの準備は一旦終わり。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/Nagios-Core.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1484&quot; style=&quot;border: 0px;&quot; alt=&quot;Nagios Core&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/Nagios-Core.png&quot; width=&quot;408&quot; height=&quot;245&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;MySQLのインストール&lt;/h2&gt;

&lt;p&gt;nconfの特徴として、設定をMySQLに入れておいて、そこからNagiosの設定ファイルを生成することが挙げられる。そのためにMySQLをインストール。nconfはPHPで書かれており、PHPからMySQLへ接続するためのphp-mysqlも一緒にインストール。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo yum install mysql-server php-mysql&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;mysql, mysql-libsなどもインストールされる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/&quot;&gt;この辺&lt;/a&gt;参照して、/etc/my.cnf の [mysqld] セクションに最低限の設定をしてから、MySQLを起動。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/mysqld start&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;nconf用データベースと、MySQLへ接続するためのアカウントも作成。以下の例では、データベース名がnconf、ユーザ名がnconf、パスワードはnconfpasswordとしているが、任意のものにできるので適宜変更すべし。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ mysql -uroot&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; create database nconf;&lt;/p&gt;

&lt;p&gt;Query OK, 1 row affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; grant SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP on nconf.* to ‘nconf’@’localhost’ identified by ‘nconfpassword’;&lt;/p&gt;

&lt;p&gt;Query OK, 0 rows affected (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;h2 id=&quot;nconf&quot;&gt;nconfのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nconf.org/&quot;&gt;nconfのサイト&lt;/a&gt;のDownloadからnconf-1.3.0-0.tgzをダウンロードして適当なディレクトリに配置。CentOSのApacheのDocumentRootに展開する。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;cd /var/www/html&lt;/p&gt;

&lt;p&gt;sudo tar zxvf /fuga/hoge/nconf-1.3.0-0.tgz&lt;/p&gt;

&lt;p&gt;chown -R apache. nconf&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;インストールに必要な設定は、GUIで行える。http://(サーバのIP)/nconf/ をブラウザで開く。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf01.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1488&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf01&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf01.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここで画面がforbiddenになる場合、SELinuxが有効になっている可能性がある(/var/log/audit/audit.logにその旨出力されているはずなので確認すべし)。そんな時は頑張って動くように設定するか、そっと/etc/sysconfig/selinuxのSELINUX=enabledをdisabledに書き換えてOSを再起動する。&lt;/p&gt;

&lt;p&gt;必須のパッケージが全てインストールされていれば、最初の画面でOKが並ぶので、Nextをクリック。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf02.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1489&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf02&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf02.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前項でMySQLに作成したデータベース名とアカウントを入力してNextを押すとチェックが走るので、OKが並んだらNext。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf03.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1490&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf03&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf03.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;nconfの接続に認証を必要とするかどうかの設定。後でも変更できるので一旦そのまま(AUTH_ENABLEDがFALSE)でNext。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf04.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1491&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf04&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf04.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;全て完了したらFinishをクリック。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf05.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1492&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf05&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf05.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インストールしたディレクトリ内のファイル、ディレクトリを削除しろというメッセージが出るので、リネームする(別に使わないと思うが一応)。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ cd /var/www/html/nconf&lt;/p&gt;

&lt;p&gt;$ sudo mv INSTALL INSTALL.org&lt;/p&gt;

&lt;p&gt;$ sudo mv INSTALL.php INSTALL.php.org&lt;/p&gt;

&lt;p&gt;$ sudo mv UPDATE UPDATE.org&lt;/p&gt;

&lt;p&gt;$ sudo mv UPDATE.php UPDATE.php.org&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;ここまででnconfの設定画面にはアクセスできるようになる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf07.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1504&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf07&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf07.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;nconfnagios&quot;&gt;nconfの設定・Nagiosの追加設定&lt;/h2&gt;

&lt;p&gt;前述の通りnconfはMySQLに設定を書いていて、それをNagiosの設定ファイルとして書き出し、Nagiosを再起動して設定を反映させるところまでnconfでやることができる。そのための追加設定がここから。&lt;/p&gt;

&lt;p&gt;/var/www/html/nconf/config/nconf.php (nconfのメイン設定ファイル)を以下の通り書き換え。&lt;/p&gt;

&lt;p&gt;23行目。Nagios本体のパスを指定する。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# 変更前&lt;/p&gt;

&lt;p&gt;define(‘NAGIOS_BIN’, ‘/var/www/html/nconf/bin/nagios’);&lt;/p&gt;

&lt;p&gt;# 変更後&lt;/p&gt;

&lt;p&gt;define(‘NAGIOS_BIN’, ‘/usr/sbin/nagios’);&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;75行目。Nagiosのメイン設定ファイル(nagios.cfg)の構文チェックを無効化。手元の環境では、有効にしてしまうと、正しいはずの設定ファイルのチェックがどうしてもエラーになってしまったのでやむなく。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# 変更前&lt;/p&gt;

&lt;p&gt;define(‘CHECK_STATIC_SYNTAX’, 1);&lt;/p&gt;

&lt;p&gt;# 変更後&lt;/p&gt;

&lt;p&gt;define(‘CHECK_STATIC_SYNTAX’, 0);&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;80行目。この配列に入っているユーザが、通知先などに自動で追加されてしまうので削除。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# 変更前&lt;/p&gt;

&lt;p&gt;$SUPERADMIN_GROUPS = array (“+admins”);&lt;/p&gt;

&lt;p&gt;# 変更後&lt;/p&gt;

&lt;p&gt;$SUPERADMIN_GROUPS = array (“”);&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;/var/www/html/nconf/config/deployment.ini (nconfの自動デプロイ設定ファイル)を以下の通り書き換え。&lt;/p&gt;

&lt;p&gt;「;; LOCAL deployment ;;」の下、6行目から29行目までの以下のセクションの行頭のセミコロンを外して有効化。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;;[extract config]&lt;/p&gt;

&lt;p&gt;;[copy collector config]&lt;/p&gt;

&lt;p&gt;;[copy global config]&lt;/p&gt;

&lt;p&gt;;[copy nagios.cfg]&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;また、nconfが生成するNagios設定ファイルのアーカイブを指定する、8行目を以下のとおり変更。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# 変更前&lt;/p&gt;

&lt;p&gt;source_file = “/var/www/nconf/output/NagiosConfig.tgz”&lt;/p&gt;

&lt;p&gt;# 変更後&lt;/p&gt;

&lt;p&gt;source_file = “/var/www/html/nconf/output/NagiosConfig.tgz”&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;Apacheの起動ユーザapacheがNagiosを再起動できるようにsudoersを編集。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo visudo&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;以下の1行を末尾に追加。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;apache ALL=(ALL)NOPASSWD: /etc/rc.d/init.d/nagios reload&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;nconfが生成した設定ファイルをNagiosの設定ファイルディレクトリ(/etc/nagios)に配置できるように細々した設定。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ cd /etc/nagios&lt;/p&gt;

&lt;p&gt;$ sudo mkdir Default_collector global&lt;/p&gt;

&lt;p&gt;$ sudo chown apache. Default_collector global nagios.cfg&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;nconfからnagios.cfgを編集・配置することもできるので、一応nconfのディレクトリ以下にnagios.cfgを置いておく。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo cp /etc/nagios/nagios.cfg /var/www/html/nconf/static_cfg/&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;p&gt;nconfが配置するファイルを設定ファイルとして使用するように、コピーした先の/var/www/html/nconf/static_cfg/nagios.cfgを編集。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# cfg_fileとcfg_dirを全てコメントアウトして以下の2行を追加。&lt;/p&gt;

&lt;p&gt;cfg_dir=/etc/nagios/global&lt;/p&gt;

&lt;p&gt;cfg_dir=/etc/nagios/Default_collector&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;これで設定はおしまい。ApacheとNagiosを再起動して一息つく。&lt;/p&gt;

&lt;p&gt;[shell]&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/httpd stop&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/nagios restart&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/httpd start&lt;/p&gt;

&lt;p&gt;[/shell]&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;動作確認&lt;/h2&gt;

&lt;p&gt;http://(サーバのIP)/nagios/ を開いて、左側のCurrent Status → Servicesをクリックすると、Nagios側では以下のようにデフォルトでlocalhostの監視のみが設定されている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nagios02.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1493&quot; style=&quot;border: 0px;&quot; alt=&quot;nagios02&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nagios02.png&quot; width=&quot;680&quot; height=&quot;409&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一方、 http://(サーバのIP)/nconf/ を開いて、左側のBasic Items → Hostsをクリックすると、nconf側ではlocalhost以外にサンプルとしてhplj2605dnなど合わせて4台分の設定が入っていることが分かる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf08.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1494&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf08&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf08.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここで、nconfの左側のメニューからBasic Items → Generate Nagios configをクリックすると、設定ファイルが生成される。以下の画面で「Deploy」をクリックする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf09.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1495&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf09&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf09.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下の画面のように、全てOKになれば、設定ファイルのデプロイとNagiosの再起動が終わっているはず。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf10.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1496&quot; style=&quot;border: 0px;&quot; alt=&quot;nconf10&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nconf10.png&quot; width=&quot;665&quot; height=&quot;430&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここで、Nagiosの画面を開くと、以下のようにnconfに入っていた設定が有効になって、ホストが増えていれば成功。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nagios03.png&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;alignnone  wp-image-1506&quot; style=&quot;border: 0px;&quot; alt=&quot;nagios03&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2013/06/nagios03.png&quot; width=&quot;680&quot; height=&quot;380&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;後は、nconfからあれこれ設定を入れて監視を始めるべし。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>IPv6環境でnet-snmpを使う</title>
   <link href="http://b.l0g.jp/linux/net-snmp-on-ipv6/"/>
   <updated>2013-05-31T05:25:46-07:00</updated>
   <id>http://b.l0g.jp/linux/net-snmp-on-ipv6</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/linux/net-snmp-on-ipv6/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;IPv6環境でnet-snmpを使う&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/linux/net-snmp-on-ipv6/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/linux/net-snmp-on-ipv6/&quot; data-text=&quot;IPv6環境でnet-snmpを使う&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/linux/net-snmp-on-ipv6/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;IPv6環境でSNMPで情報を引っ張ってきたいのだが、net-snmpをインストールしてsnmpdを起動したが、getできない。&lt;/p&gt;

&lt;p&gt;監視サーバをnagios01、監視対象ホストをclient01とした時の例。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;client01$ sudo yum install net-snmp net-snmp-utils&lt;/p&gt;

&lt;p&gt;client01$ sudo /etc/init.d/snmpd start&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;nagios01$ snmpwalk -v 1 -c public client01 UCD-SNMP-MIB::laLoad.1&lt;/p&gt;

&lt;p&gt;No log handling enabled – turning on stderr logging&lt;/p&gt;

&lt;p&gt;getaddrinfo: client01 Name or service not known&lt;/p&gt;

&lt;p&gt;snmpwalk: Unknown host (client01)&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;snmpwalkなどでIPv6のサーバへ問い合わせる場合は、ホスト名の前に「udp6」を明示的に指定する必要があるようだ。しかし、&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;nagios01$ snmpwalk -v 1 -c public udp6:client01 UCD-SNMP-MIB::laLoad.1&lt;/p&gt;

&lt;p&gt;Timeout: No Response from udp6:client01&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;タイムアウトになってしまう。ちなみに、&lt;a href=&quot;http://www.net-snmp.org/docs/NEWS.html&quot; target=&quot;_blank&quot;&gt;net-snmpは5.0以降IPv6に対応している&lt;/a&gt;ということなので、5.0以降がインストールされていれば、snmpwalkコマンドもIPv6を扱えるはず。&lt;/p&gt;

&lt;p&gt;クライアント側を見てみる。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;client01$ netstat -lanp&lt;/p&gt;

&lt;p&gt;Active Internet connections (servers and established)&lt;/p&gt;

&lt;p&gt;Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name&lt;/p&gt;

&lt;p&gt;(中略)&lt;/p&gt;

&lt;p&gt;udp 0 0 0.0.0.0:161 0.0.0.0:* 12403/snmpd&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;0.0.0.0:161ってことは、IPv4だけで、IPv6でリッスンしていない。&lt;/p&gt;

&lt;p&gt;設定ファイルを見てみる。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;client01$ cat /etc/snmp/snmpd.conf&lt;/p&gt;

&lt;p&gt;(以下抜粋)&lt;/p&gt;

&lt;p&gt;com2sec notConfigUser localhost public&lt;/p&gt;

&lt;p&gt;com2sec notConfigUser nagios01 public&lt;/p&gt;

&lt;p&gt;group notConfigGroup v1 nogConfigUser&lt;/p&gt;

&lt;p&gt;access notConfigGroup “” any noauth exact systemview none none&lt;/p&gt;

&lt;p&gt;syslocation Unknown (edit /etc/snmp/snmpd.conf)&lt;/p&gt;

&lt;p&gt;syscontact Root &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#114;&amp;#111;&amp;#111;&amp;#116;&amp;#064;&amp;#108;&amp;#111;&amp;#099;&amp;#097;&amp;#108;&amp;#104;&amp;#111;&amp;#115;&amp;#116;&quot;&gt;&amp;#114;&amp;#111;&amp;#111;&amp;#116;&amp;#064;&amp;#108;&amp;#111;&amp;#099;&amp;#097;&amp;#108;&amp;#104;&amp;#111;&amp;#115;&amp;#116;&lt;/a&gt; (configure /etc/snmp/snmp.local.conf)&lt;/p&gt;

&lt;p&gt;view all included .1 80&lt;/p&gt;

&lt;p&gt;dontLogTCPWrappersConnects yes&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;どうやら、デフォルトの設定では、IPv4しかリッスンしない設定らしい。以下のように、明示的にv6でも使えるように追記。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# 以下の4行を追記(下の2行は実際の設定に応じて変更)&lt;/p&gt;

&lt;p&gt;agentaddress udp:161&lt;/p&gt;

&lt;p&gt;agentaddress udp6:161&lt;/p&gt;

&lt;p&gt;com2sec6 notConfigUser localhost public&lt;/p&gt;

&lt;p&gt;com2sec6 notConfigUser nagios01 public&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;snmpd を再起動すると、v6でもリッスンするようになった。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;client01$ sudo /etc/init.d/snmpd restart&lt;/p&gt;

&lt;p&gt;client01$ netstat -lanp&lt;/p&gt;

&lt;p&gt;Active Internet connections (servers and established)&lt;/p&gt;

&lt;p&gt;Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name&lt;/p&gt;

&lt;p&gt;(中略)&lt;/p&gt;

&lt;p&gt;udp 0 0 0.0.0.0:161 0.0.0.0:* 12442/snmpd&lt;/p&gt;

&lt;p&gt;udp 0 0 :::161 :::* 12442/snmpd&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;これで値を取れるようになった。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;nagios01$ snmpwalk -v 1 -c public udp6:client01 UCD-SNMP-MIB::laLoad.1&lt;/p&gt;

&lt;p&gt;UCD-SNMP-MIB::laLoad.1 = STRING: 0.03&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IPv6環境でnet-snmpを使うときは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;net-snmp 5.0以降を使う
    &lt;ul&gt;
      &lt;li&gt;snmpd.confで、agentaddress udp6:161とcom2sec6を設定する
        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;snmpwalkなどで値を取る時はアドレスの前にudp6:をつける &amp;lt;/ul&amp;gt;&lt;/p&gt;

            &lt;hr /&gt;

            &lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>NICのリンクスピードを監視するNagiosスクリプト</title>
   <link href="http://b.l0g.jp/nagios/nagios-check-ifspeed-plugi/"/>
   <updated>2013-02-17T08:30:00-08:00</updated>
   <id>http://b.l0g.jp/nagios/nagios-check-ifspeed-plugi</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/nagios/nagios-check-ifspeed-plugi/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;NICのリンクスピードを監視するNagiosスクリプト&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/nagios/nagios-check-ifspeed-plugi/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/nagios/nagios-check-ifspeed-plugi/&quot; data-text=&quot;NICのリンクスピードを監視するNagiosスクリプト&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/nagios/nagios-check-ifspeed-plugi/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nagiosのプラグインには、NICのステータス(up/downとか)をチェックする check_ifstatus がある。しかし、ネゴシエーションなどの関係で、リンクアップはしているがリンクスピードが1Gbps full duplexであってほしいのに10Mbps halfとかになっているということはよくあること。&lt;/p&gt;

&lt;p&gt;探してみた感じこれをチェックするためのNagiosプラグインはなさそうだったので、シェルスクリプト書いてみた。本当はcheck_ifstatus(perl)を拡張するのがいいのかもしれないが。&lt;/p&gt;

&lt;noscript&gt;
  &lt;pre&gt;&lt;code class=&quot;language-shell shell&quot;&gt;#!/bin/bash

#END STATUS
OK=0
WARNING=1
CRITICAL=2
UNKNOWN=3

# snmpwalk command
SNMPWALK=/usr/local/net-snmp/bin/snmpwalk

# default parameter
RET=${OK}
IP=&quot;127.0.0.1&quot;
COMMUNITY=&quot;public&quot;
INTERFACE=&quot;eth0&quot;
SPEED=&quot;&quot;
WARN_FLG=&quot;FALSE&quot;
CRIT_FLG=&quot;FALSE&quot;

# get parameter
while getopts H:C:i:w:c: OPT
do
    case $OPT in
        &quot;H&quot;) IP=&quot;$OPTARG&quot; ;;
        &quot;C&quot;) COMMUNITY=&quot;$OPTARG&quot; ;;
        &quot;i&quot;) INTERFACE=&quot;$OPTARG&quot; ;;
        &quot;w&quot;) WARN_FLG=&quot;TRUE&quot; ; WARN_TH=&quot;$OPTARG&quot; ;;
        &quot;c&quot;) CRIT_FLG=&quot;TRUE&quot; ; CRIT_TH=&quot;$OPTARG&quot; ;;
    esac
done

# check parameter
if [ ${WARN_FLG} = &quot;FALSE&quot; ] &amp;amp;&amp;amp; [ ${CRIT_FLG} = &quot;FALSE&quot; ] ; then
    echo &quot;Parameter Error : -w or -c is required entry&quot;
    exit ${WARNING}
fi

# get speed
INDEX=`${SNMPWALK} -t 10 -v 2c -c ${COMMUNITY} ${IP} ifDescr | grep ${INTERFACE} | sed &#39;s/.*\.//&#39; | sed &#39;s/ .*//&#39;`
SPEED_bps=`${SNMPWALK} -t 10 -v 2c -c casnmp ${IP} ifSpeed.${INDEX} | awk &#39;{print $4}&#39;`
SPEED=`expr ${SPEED_bps} / 1000000`

if [ -z ${SPEED} ] ; then
    echo &quot;Can&#39;t get ${INTERFACE} speed&quot;
    exit ${WARNING}
fi

# get result
if [ ${WARN_FLG} = &quot;TRUE&quot; ] &amp;amp;&amp;amp; [ ${CRIT_FLG} = &quot;TRUE&quot; ] ; then
    if [ ${SPEED} -lt ${CRIT_TH} ] ; then
        RET=${CRITICAL}
    fi
    if [ ${SPEED} -lt ${WARN_TH} ] &amp;amp;&amp;amp; [ ${OFFSET} -ge ${CRIT_TH} ] ; then
        RET=${WARNING}
    fi
fi
if [ ${WARN_FLG} = &quot;TRUE&quot; ] &amp;amp;&amp;amp; [ ${CRIT_FLG} = &quot;FALSE&quot; ] ; then
    if [ ${SPEED} -lt ${WARN_TH} ] ; then
        RET=${WARNING}
    fi
fi
if [ ${WARN_FLG} = &quot;FALSE&quot; ] &amp;amp;&amp;amp; [ ${CRIT_FLG} = &quot;TRUE&quot; ] ; then
    if [ ${SPEED} -lt ${CRIT_TH} ] ; then
        RET=${CRITICAL}
    fi
fi

# information
echo &quot;${INTERFACE} speed is ${SPEED}Mbps now&quot;

exit ${RET}
&lt;/code&gt;&lt;/pre&gt;
&lt;/noscript&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linuxがモノリシックカーネルである理由</title>
   <link href="http://b.l0g.jp/linux/meaning-for-linux-monolithic-kernel/"/>
   <updated>2013-01-10T00:53:06-08:00</updated>
   <id>http://b.l0g.jp/linux/meaning-for-linux-monolithic-kernel</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/linux/meaning-for-linux-monolithic-kernel/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Linuxがモノリシックカーネルである理由&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/linux/meaning-for-linux-monolithic-kernel/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/linux/meaning-for-linux-monolithic-kernel/&quot; data-text=&quot;Linuxがモノリシックカーネルである理由&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/linux/meaning-for-linux-monolithic-kernel/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Quoraの問答は本当に面白いものばかり。技術的でないのもかなり興味深いものが多いが、またLinuxについてのネタで分かりやすいのがあったので訳してみた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.quora.com/Linux/What-is-meant-by-Linux-has-a-monolithic-kernel&quot;&gt;Linuxがモノリシックカーネルであるというのはどういう意味か？&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;モノリシックカーネル&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;モノリシックカーネルは、プロセスやメモリの管理、例外の取扱い、入出力のやり取り、ファイルシステムなどほとんどの基本的なシステムサービスを実行する。層構造になっており、基礎的なプロセス管理からOSの他の部分(ライブラリ群や、層の最上位であるアプリケーション)とのインタフェースからなっている。基本的なサービスをカーネルスペースに含めることは、次のような大きな3つの欠点となる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;カーネルサイズが大きくなる&lt;/li&gt;
  &lt;li&gt;拡張性に乏しい&lt;/li&gt;
  &lt;li&gt;メンテナンス性が悪い&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;マイクロカーネル&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;カーネルの機能を基本的なプロセス間通信と入出力制御のみに絞り、ユーザスペースの他のシステムサービスを普通のプロセス(「サーバ」と呼ばれる)としてしまうのがコンセプトである。あるサーバはメモリに関する管理を行い、別のサーバはプロセス管理、さらに他のサーバはドライバの管理…といった具合だ。サーバはカーネルスペースでは実行されないので、ユーザプロセスが特権モードに入ったり出たりするためにいわゆるコンテキストスイッチが発生してしまう。この方式では、マイクロカーネルはもはやシステムサービスの塊ではなく、プロセス間通信とプロセスとその下のハードウェアとの通信を制御するための、単にいくつかの基本的な抽象化とプリミティブを提供するだけである。通信は直接行われないので、独立した通信と拡張性をもたらす、メッセージングの仕組みが使われる。&lt;/p&gt;

&lt;p&gt;ここでLinuxカーネルの話に入ろう。Linuxカーネルは、モノリシックカーネルである。しかし、Linuxの美しいところは、どちらとしてもコンパイルできることである！&lt;/p&gt;

&lt;p&gt;モノリシックカーネル&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1つのバイナリファイル&lt;/li&gt;
  &lt;li&gt;全ドライバがカーネル自体に含まれる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;モジュラーカーネル&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;複数のカーネルのファイル&lt;/li&gt;
  &lt;li&gt;ドライバはmodprobeコマンドなどでカーネルにロードしたりアンロード可能。lsmodやmodprobeのmanページを参照&lt;/li&gt;
  &lt;li&gt;ほとんど全てのドライバはカーネルに対してビルドされてリンクされる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以下のカーネルコンフィグオプションの設定でモジュラーカーネルをビルドすることができる。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;Enable loadable module support (CONFIG_MODULES) [Y/n/?]&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;このオプションにYと答えるとモジュラーカーネルとなり、各機能やドライバそれぞれに関して3つの選択肢が現われる。&lt;/p&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;
      m
    &lt;/td&gt;
    
    &lt;td&gt;
      ドライバをモジュールとしてコンパイルできる
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      y
    &lt;/td&gt;
    
    &lt;td&gt;
      カーネル自身に組み込む
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      n
    &lt;/td&gt;
    
    &lt;td&gt;
      機能・ドライバを含まない
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;(CONFIG_MODULES)オプションを n に設定した場合モノリシックカーネルとなり、各機能やドライバそれぞれに2つの選択肢がある。&lt;/p&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;
      y
    &lt;/td&gt;
    
    &lt;td&gt;
      機能・ドライバを含む
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      n
    &lt;/td&gt;
    
    &lt;td&gt;
      機能・ドライバを含まない
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt; &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQLコマンドラインツールで使えるコマンド小ネタ</title>
   <link href="http://b.l0g.jp/mysql/mysql-commands-on-cli/"/>
   <updated>2012-12-11T07:29:16-08:00</updated>
   <id>http://b.l0g.jp/mysql/mysql-commands-on-cli</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/mysql-commands-on-cli/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQLコマンドラインツールで使えるコマンド小ネタ&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/mysql-commands-on-cli/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/mysql-commands-on-cli/&quot; data-text=&quot;MySQLコマンドラインツールで使えるコマンド小ネタ&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/mysql-commands-on-cli/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;知らなくても何とかなるけど、知っておくと役に立つmysqlシェルから使えるコマンド。&lt;/p&gt;

&lt;h3 id=&quot;system&quot;&gt;systemコマンド&lt;/h3&gt;

&lt;p&gt;MySQLのプロンプトを開いたままで、ロードアベレージを見たいとか、SQLを書いておいたファイル名を見たい、という時は、OSのシェルで実行できるコマンドをMySQLシェルから実行するsystemコマンドを使えばよい。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; system uptime&lt;/p&gt;

&lt;p&gt;10:47:48 up 24 min, 5 users, load average: 3.94, 3.68, 2.57&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; system ls&lt;/p&gt;

&lt;p&gt;test.sh sample01.sql&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;h3 id=&quot;tee&quot;&gt;teeコマンド&lt;/h3&gt;

&lt;p&gt;実行結果をターミナルにも表示するがファイルにも保存しておきたい時はteeコマンド。ファイルへの書き出しをやめる時はnotee。ファイルには、プロンプトから入力した文字列なども全部追記されていく。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; tee output.txt&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; show tables;&lt;/p&gt;

&lt;p&gt;+————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Tables_in_test&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TABLE01&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TABLE02&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TABLE03&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+————————————-+&lt;/p&gt;

&lt;p&gt;3 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; notee&lt;/p&gt;

&lt;p&gt;Outfile disabled.&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; quit&lt;/p&gt;

&lt;p&gt;$ cat output.txt&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; show tables;&lt;/p&gt;

&lt;p&gt;+————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Tables_in_test&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TABLE01&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TABLE02&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;TABLE03&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+————————————-+&lt;/p&gt;

&lt;p&gt;3 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;3 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; notee&lt;/p&gt;

&lt;p&gt;$&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;h3 id=&quot;pager&quot;&gt;pagerコマンド&lt;/h3&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; pager less;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;で、ページャをlessにできるので、実行結果が長い時などに重宝する。これは結構有名な気がするが、それだけではなく、grepなどのコマンドをセットすることもできるので、いろんなことができる。ちなみにlessの -S オプションをつけると、カラムが多くて横に広がってしまう結果も横スクロールできるようになる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; pager grep Behind&lt;/p&gt;

&lt;p&gt;PAGER set to ‘grep Behind’&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; show slave status\G&lt;/p&gt;

&lt;p&gt;Seconds_Behind_Master: 3133&lt;/p&gt;

&lt;p&gt;1 row in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;こんな感じで必要な行だけを取り出すこともできる。また、パイプも使うことができるので、以下のように組み合わせることも可能。あんまりいい例が考え付かなくて微妙ｗ&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; select * from test;&lt;/p&gt;

&lt;p&gt;+——+——+——+——+——+——+——+——+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt;d&lt;/td&gt;
      &lt;td&gt;e&lt;/td&gt;
      &lt;td&gt;f&lt;/td&gt;
      &lt;td&gt;g&lt;/td&gt;
      &lt;td&gt;h&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——+——+——+——+——+——+——+——+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——+——+——+——+——+——+——+——+&lt;/p&gt;

&lt;p&gt;1 row in set (0.01 sec)&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql&amp;gt; pager grep -v ‘-‘&lt;/td&gt;
      &lt;td&gt;tr -d ‘&lt;/td&gt;
      &lt;td&gt;’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;PAGER set to ‘grep -v ‘-‘&lt;/td&gt;
      &lt;td&gt;tr -d ‘&lt;/td&gt;
      &lt;td&gt;”&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;mysql&amp;gt; select * from test;&lt;/p&gt;

&lt;p&gt;a b c d e f g h&lt;/p&gt;

&lt;p&gt;1 2 3 4 5 6 7 8&lt;/p&gt;

&lt;p&gt;1 row in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;ページャを元に(標準出力に)戻すには&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; nopager;&lt;/p&gt;

&lt;p&gt;PAGER set to stdout&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQLスローログの手動ローテート</title>
   <link href="http://b.l0g.jp/mysql/slowlog-manual-rotate/"/>
   <updated>2012-11-13T05:18:15-08:00</updated>
   <id>http://b.l0g.jp/mysql/slowlog-manual-rotate</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/slowlog-manual-rotate/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQLスローログの手動ローテート&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/slowlog-manual-rotate/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/slowlog-manual-rotate/&quot; data-text=&quot;MySQLスローログの手動ローテート&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/slowlog-manual-rotate/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/slowlog-manual-rotate/attachment/mysql/&quot; rel=&quot;attachment wp-att-1371&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-1371&quot; style=&quot;border: 0px;&quot; title=&quot;mysql&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/2012/11/mysql.png&quot; alt=&quot;&quot; width=&quot;170&quot; height=&quot;115&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MySQLのスローログは、通常それほど大量に出るものではないからか、自動でローテートされるような設定は特にない。しかし、負荷が上がったりしてスローログが大量に出てしまい、ローテートしたい場合はよくあるだろう。手動でローテートする場合は以下のように行う。&lt;/p&gt;

&lt;p&gt;この例は、MySQLのデータディレクトリ(datadir)が /var/lib/mysql で、スローログファイル名(slow_query_log_file)がmysql-slow.logの場合。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;$ cd /var/lib/mysql&lt;/p&gt;

&lt;p&gt;$ mv mysql-slow.log mysql-slow.log.old&lt;/p&gt;

&lt;p&gt;$ mysqladmin flush-logs&lt;/p&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; flush logs;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;mysqladmin flush-logs あるいは flush logs で、ログファイルを開き直すことができる。&lt;/p&gt;

&lt;p&gt;なお、5.1.12以降だとログ出力をコンソールからオフにできるので、オフにしてからflush-logsし、その後オンに戻すとよいだろう。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; set global slow_query_log = ‘OFF’;&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; set global slow_query_log = ‘ON’;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;ここで、MySQL5.1以前のバージョンでは「mysqladmin flush-logs」を実行すると、バイナリログや一般クエリログも全部まとめてローテートされてしまう。binlogを有効にしているサーバ(レプリケーションしている構成のマスタなど)では注意した方がいいかもしれない。&lt;/p&gt;

&lt;p&gt;なお、5.5からは、&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;スローログだけ開き直す&lt;/h1&gt;

&lt;p&gt;mysql&amp;gt; flush slow logs;&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;一般クエリログだけ開き直す&lt;/h1&gt;

&lt;p&gt;mysql&amp;gt; flush general logs;&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;バイナリログだけローテート&lt;/h1&gt;

&lt;p&gt;mysql&amp;gt; flush binary logs;&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;エラーログだけローテート&lt;/h1&gt;

&lt;p&gt;mysql&amp;gt; flush error logs;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;というように、種類を指定できるようになっている。&lt;/p&gt;

&lt;p&gt;(2014/12/17 エラーログについてコメントで指摘いただいたので追加。情報提供ありがとうございます)&lt;/p&gt;

&lt;p&gt;ちなみにlogrotateで定期的にローテートする場合はこうやるそうだ。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[MySQL の slowlog を logrotate する方法&lt;/td&gt;
      &lt;td&gt;Carpe Diem](http://www.sssg.org/blogs/naoya/archives/1251)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;定期的にローテートする必要があるほどスローログが出るままにするってのはどうかと思うが、そういうこともあるかもｗ&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Cactiで一定値以上になるとグラフが正常に描画されない時</title>
   <link href="http://b.l0g.jp/cacti/broken-graph-with-big-value/"/>
   <updated>2012-11-12T11:20:28-08:00</updated>
   <id>http://b.l0g.jp/cacti/broken-graph-with-big-value</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/cacti/broken-graph-with-big-value/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Cactiで一定値以上になるとグラフが正常に描画されない時&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/cacti/broken-graph-with-big-value/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/cacti/broken-graph-with-big-value/&quot; data-text=&quot;Cactiで一定値以上になるとグラフが正常に描画されない時&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/cacti/broken-graph-with-big-value/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cactiを使っていると、下の画像のように、ある一定の値以上をグラフに描画できない時がある。この例の場合、青い線であらわされたout-boundのトラフィックが80Mbpsを超えるとグラフが描画されていない。&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;http://b.l0g.jp/cacti/broken-graph-with-big-value/attachment/graph_image/&quot; rel=&quot;attachment wp-att-1349&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/11/graph_image.png&quot; title=&quot;途切れたグラフ&quot; width=&quot;449&quot; height=&quot;137&quot; class=&quot;size-full wp-image-1349 aligncenter&quot; style=&quot;border: 0px;&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;このような場合は、以下を確認する。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;トラフィックの場合、値を32ビットカウンタで取得していないか。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;64ビットカウンタで値を取得しないと、桁あふれが起きてグラフが正常に描画されない。ホストの編集画面(Console → Devices → ホストをクリック)のAssociated Data Queriesで「SNMP – Interface Statistics 64bit only」を選ぶ。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;そのグラフの扱える最大値を超えていないか。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;グラフの編集画面(Console → Data Source → ホスト名 – 分類 – 項目(たとえば hogehoge-db01 – Traffic – eth0 のような)) のMaximum Valueの値が、小さく設定されているようなら、これを大きくしてみる。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RRDファイルに設定されている最大値を超えていないか。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RRDファイルにも各値の最大値が設定されている。これを無限大に設定してやる。以下は、上の画像のようにトラフィックが途切れる場合の対策の例。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$ rrdtool info hogehoge-db01_traffic_in_200.rrd&lt;/p&gt;

&lt;p&gt;filename = “mwap-r10_traffic_in_200.rrd”&lt;/p&gt;

&lt;p&gt;rrd_version = “0003”&lt;/p&gt;

&lt;p&gt;step = 300&lt;/p&gt;

&lt;p&gt;last_update = 1352714073&lt;/p&gt;

&lt;p&gt;ds[traffic_in].type = “COUNTER”&lt;/p&gt;

&lt;p&gt;ds[traffic_in].minimal_heartbeat = 600&lt;/p&gt;

&lt;p&gt;ds[traffic_in].min = 0.0000000000e+00&lt;/p&gt;

&lt;p&gt;ds[traffic_in].max = 1.0000000000e+07 ← ここが最大値&lt;/p&gt;

&lt;p&gt;ds[traffic_in].last_ds = “3293068416”&lt;/p&gt;

&lt;p&gt;ds[traffic_in].value = 1.2345678909e+08&lt;/p&gt;

&lt;p&gt;ds[traffic_in].unknown_sec = 0&lt;/p&gt;

&lt;p&gt;ds[traffic_out].type = “COUNTER”&lt;/p&gt;

&lt;p&gt;ds[traffic_out].minimal_heartbeat = 600&lt;/p&gt;

&lt;p&gt;ds[traffic_out].min = 0.0000000000e+00&lt;/p&gt;

&lt;p&gt;ds[traffic_out].max = 1.0000000000e+07 ← ここが最大値&lt;/p&gt;

&lt;p&gt;ds[traffic_out].last_ds = “2054038296”&lt;/p&gt;

&lt;p&gt;ds[traffic_out].value = 1.2345678909e+08&lt;/p&gt;

&lt;p&gt;ds[traffic_out].unknown_sec = 0&lt;/p&gt;

&lt;p&gt;(後略)&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;rrdtool tuneコマンドで変更&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ sudo rrdtool tune hogehoge-db01_traffic_in_200.rrd -a traffic_in:U&lt;/p&gt;

&lt;p&gt;$ sudo rrdtool tune hogehoge-db01_traffic_in_200.rrd -a traffic_out:U&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$ rrdtool info hogehoge-db01_traffic_in_200.rrd&lt;/p&gt;

&lt;p&gt;filename = “mwap-r10_traffic_in_200.rrd”&lt;/p&gt;

&lt;p&gt;rrd_version = “0003”&lt;/p&gt;

&lt;p&gt;step = 300&lt;/p&gt;

&lt;p&gt;last_update = 1352714073&lt;/p&gt;

&lt;p&gt;ds[traffic_in].type = “COUNTER”&lt;/p&gt;

&lt;p&gt;ds[traffic_in].minimal_heartbeat = 600&lt;/p&gt;

&lt;p&gt;ds[traffic_in].min = 0.0000000000e+00&lt;/p&gt;

&lt;p&gt;ds[traffic_in].max = NaN ← 無限大に変わってる&lt;/p&gt;

&lt;p&gt;ds[traffic_in].last_ds = “3293068416”&lt;/p&gt;

&lt;p&gt;ds[traffic_in].value = 1.2345678909e+08&lt;/p&gt;

&lt;p&gt;ds[traffic_in].unknown_sec = 0&lt;/p&gt;

&lt;p&gt;ds[traffic_out].type = “COUNTER”&lt;/p&gt;

&lt;p&gt;ds[traffic_out].minimal_heartbeat = 600&lt;/p&gt;

&lt;p&gt;ds[traffic_out].min = 0.0000000000e+00&lt;/p&gt;

&lt;p&gt;ds[traffic_out].max = NaN ← 無限大に変わってる&lt;/p&gt;

&lt;p&gt;ds[traffic_out].last_ds = “2054038296”&lt;/p&gt;

&lt;p&gt;ds[traffic_out].value = 1.2345678909e+08&lt;/p&gt;

&lt;p&gt;ds[traffic_out].unknown_sec = 0&lt;/p&gt;

&lt;p&gt;(後略)&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Linuxのバッファキャッシュとページキャッシュの違いは？</title>
   <link href="http://b.l0g.jp/linux/buffercache-and-page-cache/"/>
   <updated>2012-10-24T15:56:15-07:00</updated>
   <id>http://b.l0g.jp/linux/buffercache-and-page-cache</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/linux/buffercache-and-page-cache/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Linuxのバッファキャッシュとページキャッシュの違いは？&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/linux/buffercache-and-page-cache/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/linux/buffercache-and-page-cache/&quot; data-text=&quot;Linuxのバッファキャッシュとページキャッシュの違いは？&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/linux/buffercache-and-page-cache/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linuxが管理するキャッシュ領域には、バッファキャッシュとページキャッシュ領域があって、topコマンドや/proc/meminfoの「bufferes」「cached」という項目を見れば、現在のそれぞれのキャッシュ領域がどの程度なのかを確認することができる。&lt;/p&gt;

&lt;p&gt;どちらも、ディスクの読み書きをキャッシュしてデータへのアクセスを高速化するという点では同じだが、それぞれがどのような意味で、どういう違いがあるのかについて、&lt;a href=&quot;http://www.quora.com/Linux-Kernel/In-Linux-what-is-the-major-difference-between-the-buffer-cache-and-the-page-cache-Why-were-they-separate-entities-in-older-kernels-Why-were-they-merged-later-on&quot;&gt;Quoraに分かりやすい解説&lt;/a&gt;があったので、翻訳してみた。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ページキャッシュは、ファイルI/Oを最適化するために、ファイルのページをキャッシュする。バッファキャッシュは、ブロックI/Oを最適化するために、ディスクブロックをキャッシュする。&lt;/p&gt;

  &lt;p&gt;Linuxカーネル2.4よりも前では、2つのキャッシュは明白に違うものだった。ファイルはページキャッシュに、ディスクブロックはバッファキャッシュに載せられていた。ほとんどのファイルがディスク上のファイルシステムによって扱われているとすると、データは2回、すなわち両方のキャッシュそれぞれに取り扱われる。多くのUnixシステムはこれと同じようなパターンを採用している。&lt;/p&gt;

  &lt;p&gt;これはシンプルな実装だが、明らかに洗練されていないし、非効率である。Linuxカーネル2.4からは、2つのキャッシュのコンテンツは統合された。VM(Virtual Memory)サブシステムがI/Oを司るようになり、それはページキャッシュからデータを取り出す。キャッシュされたデータがファイルとブロックの両方のかたちをとる(ほとんどのデータがそうだが)場合、バッファキャッシュは単純にページキャッシュを指し示す。つまり、データは1つだけがメモリにキャッシュされていることになる。ページキャッシュは、ディスクキャッシュのことを考えた通りのものだ。それは、後続のI/Oを高速化するために、ディスクからデータをキャッシュする。&lt;/p&gt;

  &lt;p&gt;バッファキャッシュはいまだに残っているが、それは、カーネルは現在もページ単位ではなくブロック単位のブロックI/Oを行う必要があるからだ。ほとんどのブロックはファイルデータのかたちを取っているため、バッファキャッシュの多くはページキャッシュと同等である。しかし、少量のブロックデータ、例えばメタデータやrawブロックI/Oなどは、ファイルを前提にしたものではなく、もっぱらバッファキャッシュによって取り扱われる。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;現在のかたちに至った経緯まで含めて説明できるのは、経験豊かな人ならではというべきか。&lt;/p&gt;

&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot;&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873115019/l0gjp-22/ref=nosim/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51blzciVfIL._SL160_.jpg&quot; border=&quot;0&quot; alt=&quot;Linuxカーネル Hacks ―パフォーマンス改善、開発効率向上、省電力化のためのテクニック&quot; style=&quot;border: 0px;&quot; /&gt;&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font size=&quot;-1&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/Linux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-Hacks-%E2%80%95%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%94%B9%E5%96%84%E3%80%81%E9%96%8B%E7%99%BA%E5%8A%B9%E7%8E%87%E5%90%91%E4%B8%8A%E3%80%81%E7%9C%81%E9%9B%BB%E5%8A%9B%E5%8C%96%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-%E6%B1%A0%E7%94%B0-%E5%AE%97%E5%BA%83/dp/4873115019%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dl0gjp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873115019&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Linuxカーネル Hacks ―パフォーマンス改善、開発効率向上、省電力化のためのテクニック&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=l0gjp-22&amp;#038;l=ur2&amp;#038;o=9&quot; width=&quot;1&quot; height=&quot;1&quot; style=&quot;border: none;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;池田 宗広 大岩 尚宏 島本 裕志 竹部 晶雄 平松 雅巳 高橋 浩和  
      
      &lt;p&gt;
        オライリージャパン 2011-07-26&lt;br /&gt;売り上げランキング : 95520
      &lt;/p&gt;
      
      &lt;p&gt;
        &lt;a href=&quot;http://www.amazon.co.jp/Linux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-Hacks-%E2%80%95%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%94%B9%E5%96%84%E3%80%81%E9%96%8B%E7%99%BA%E5%8A%B9%E7%8E%87%E5%90%91%E4%B8%8A%E3%80%81%E7%9C%81%E9%9B%BB%E5%8A%9B%E5%8C%96%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-%E6%B1%A0%E7%94%B0-%E5%AE%97%E5%BA%83/dp/4873115019%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dl0gjp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873115019&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Amazonで詳しく見る&lt;/a&gt; &lt;font size=&quot;-2&quot;&gt;by &lt;a href=&quot;http://www.goodpic.com/mt/aws/index.html&quot;&gt;G-Tools&lt;/a&gt;&lt;/font&gt;   
        
        &lt;hr /&gt;
        
        &lt;p&gt;
          &lt;b&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/b&gt;
        &lt;/p&gt;
&lt;/p&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>readlineのショートカットまとめ</title>
   <link href="http://b.l0g.jp/shell/readline-shortcut-keys/"/>
   <updated>2012-10-20T10:11:42-07:00</updated>
   <id>http://b.l0g.jp/shell/readline-shortcut-keys</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/shell/readline-shortcut-keys/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;readlineのショートカットまとめ&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/shell/readline-shortcut-keys/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/shell/readline-shortcut-keys/&quot; data-text=&quot;readlineのショートカットまとめ&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/shell/readline-shortcut-keys/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tiswww.case.edu/php/chet/readline/rltop.html&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/10/gnu-head-sm.jpg&quot; alt=&quot;&quot; title=&quot;gnu-head-sm&quot; width=&quot;129&quot; height=&quot;122&quot; class=&quot;alignleft size-full wp-image-1310&quot; style=&quot;border: 0px; margin-left: 8px; margin-right: 8px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet tw-align-center&quot; lang=&quot;ja&quot;&gt;
  &lt;p&gt;
    mysqlコマンドのプロンプトで使えるキーボードショートカットについて探してたら、readline使ってるからbashとかと同じになるのか。今さら気付いて恥ずかしいが当たり前といえば当たり前かｗ
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; doublemarketさん (@dblmkt) &lt;a href=&quot;https://twitter.com/dblmkt/status/259533796645425153&quot; data-datetime=&quot;2012-10-20T05:57:33+00:00&quot;&gt;10月 20, 2012&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということで、調べたついでなのでreadlineのキーボードショートカットをまとめてみた。知らなかったのもあって意外と勉強になる。なお、使っているターミナルによってはAltの代わりに”Esc→キー”を使う必要がある。&lt;/p&gt;

&lt;p&gt;ちなみに、readlineを使っているのはbash, zsh, ksh, mysql, psql, ftp, bcなど色々あるがこれらのコマンドラインツールでは基本的に以下のショートカットキーが使える(ソフトウェアによっては全部が全部使えるわけではない)。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;カーソル移動系&lt;/h2&gt;

&lt;p&gt;さすがにここは定番すぎる。&lt;/p&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      キー入力
    &lt;/th&gt;
    
    &lt;th&gt;
      動作
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-b
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソルを左に1文字移動
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-f
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソルを右に1文字移動
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-b
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソルを左に1単語移動
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-f
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソルを右に1単語移動
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-a
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソルを行頭に移動
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-e
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソルを行末に移動
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-x-x
    &lt;/td&gt;
    
    &lt;td&gt;
      入力を始めた位置と現時点のカーソル位置を交互に移動
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-1&quot;&gt;削除系&lt;/h2&gt;

&lt;p&gt;この辺は、知っておくと素早くコマンドを修正できるがなかなか覚えられない。&lt;/p&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      キー入力
    &lt;/th&gt;
    
    &lt;th&gt;
      動作
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Back space
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソルの左の文字を削除
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Delete&lt;br /&gt;Ctrl-d
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソル位置の文字を削除
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-u
    &lt;/td&gt;
    
    &lt;td&gt;
      行頭からカーソル位置までの文字を削除
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-k
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソル位置から行末までの文字を削除
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-d
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソル位置から次のスペースまでの文字を削除
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-w
    &lt;/td&gt;
    
    &lt;td&gt;
      直前の空白からカーソル位置の1文字前までの文字を削除
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-y
    &lt;/td&gt;
    
    &lt;td&gt;
      直前に上の削除コマンドで削除した文字をカーソル位置にペースト
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-y
    &lt;/td&gt;
    
    &lt;td&gt;
      n回前に削除した文字をカーソル位置にペースト(入力するたびに前に戻っていく)
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-2&quot;&gt;ヒストリ系&lt;/h2&gt;

&lt;p&gt;最後の2つ、引数をペーストするのは知らなかった。そんなに使う感じしないけど。&lt;/p&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      キー入力
    &lt;/th&gt;
    
    &lt;th&gt;
      動作
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-p
    &lt;/td&gt;
    
    &lt;td&gt;
      1回前に実行されたコマンドを表示
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-n
    &lt;/td&gt;
    
    &lt;td&gt;
      1回後に実行されたコマンドを表示
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-&amp;gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      元々入力されていたコマンドを表示
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-r
    &lt;/td&gt;
    
    &lt;td&gt;
      現在表示されているものより前に実行されたコマンドをインクリメンタルサーチ
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-s
    &lt;/td&gt;
    
    &lt;td&gt;
      現在表示されているものより後に実行されたコマンドをインクリメンタルサーチ
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-J
    &lt;/td&gt;
    
    &lt;td&gt;
      インクリメンタルサーチを終了
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-G
    &lt;/td&gt;
    
    &lt;td&gt;
      インクリメンタルサーチを中止して元に戻る
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-Ctrl-y
    &lt;/td&gt;
    
    &lt;td&gt;
      直前のコマンドの第1引数をカーソル位置にペースト
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-.&lt;br /&gt;Alt-_
    &lt;/td&gt;
    
    &lt;td&gt;
      直前のコマンドの最後の引数をカーソル位置にペースト
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;undo&quot;&gt;Undo系&lt;/h2&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      キー入力
    &lt;/th&gt;
    
    &lt;th&gt;
      動作
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-_&lt;br /&gt;Ctrl-x Ctrl-u
    &lt;/td&gt;
    
    &lt;td&gt;
      入力しているコマンドを全部削除
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-r
    &lt;/td&gt;
    
    &lt;td&gt;
      入力している行を全部削除(複数行入力している時にその行だけを消す)
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-l
    &lt;/td&gt;
    
    &lt;td&gt;
      表示を全部消して現在入力している行を一番上に表示
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-3&quot;&gt;オートコンプリート系&lt;/h2&gt;

&lt;p&gt;Alt-*とかどういう時に使う想定なんだろうか。&lt;/p&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      キー入力
    &lt;/th&gt;
    
    &lt;th&gt;
      動作
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Tab
    &lt;/td&gt;
    
    &lt;td&gt;
      入力をオートコンプリート
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-?&lt;br /&gt;Tab Tab
    &lt;/td&gt;
    
    &lt;td&gt;
      オートコンプリートの候補を表示
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-*
    &lt;/td&gt;
    
    &lt;td&gt;
      オートコンプリートの候補を全部入力
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-4&quot;&gt;入れ替え系&lt;/h2&gt;

&lt;p&gt;このコマンドどちらも知らなかったが、オプションの順序を間違えた時に簡単に入れ替えたりするのにとても重宝する！&lt;/p&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      キー入力
    &lt;/th&gt;
    
    &lt;th&gt;
      動作
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Ctrl-t
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソルの直前の文字とカーソル位置の文字を入れ替える
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-t
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソル位置の前の単語とカーソル位置の単語を入れ替える
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-5&quot;&gt;その他編集系&lt;/h2&gt;

&lt;p&gt;これも知らなかった。そんなに使用頻度多くない人もいるだろうが、SQLを入力する時に予約語を大文字で入力したい人とか便利なんじゃないか。&lt;/p&gt;

&lt;table class=&quot;article&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;
      キー入力
    &lt;/th&gt;
    
    &lt;th&gt;
      動作
    &lt;/th&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-u
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソル位置の単語の、カーソル位置より後を大文字にし、カーソルは単語の最後に移動
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-l
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソル位置の単語の、カーソル位置より後を小文字にし、カーソルは単語の最後に移動
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Alt-c
    &lt;/td&gt;
    
    &lt;td&gt;
      カーソル位置の単語の先頭文字を大文字にし、カーソルは単語の最後に移動
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;参考1 : &lt;a href=&quot;http://www.bigsmoke.us/readline/shortcuts&quot;&gt;Readline shortcuts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;参考2 : &lt;a href=&quot;http://tiswww.case.edu/php/chet/readline/readline.html&quot;&gt;GNU Readline Library Documentation&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>systemtapでファイルシステムキャッシュのヒット率を見る</title>
   <link href="http://b.l0g.jp/linux/check-fs-cache-hitrate-with-stap/"/>
   <updated>2012-06-18T05:23:01-07:00</updated>
   <id>http://b.l0g.jp/linux/check-fs-cache-hitrate-with-stap</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/linux/check-fs-cache-hitrate-with-stap/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;systemtapでファイルシステムキャッシュのヒット率を見る&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/linux/check-fs-cache-hitrate-with-stap/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/linux/check-fs-cache-hitrate-with-stap/&quot; data-text=&quot;systemtapでファイルシステムキャッシュのヒット率を見る&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/linux/check-fs-cache-hitrate-with-stap/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/06/systemtaplogo1.png&quot; title=&quot;systemtaplogo1&quot; width=&quot;165&quot; height=&quot;25&quot; class=&quot;alignleft size-full wp-image-1280&quot; style=&quot;border: 0px; margin-left: 8px; margin-right: 8px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linuxでは、自動的にメモリの空き容量をファイルシステムキャッシュ(以下単にキャッシュ)として使用するような仕組みが用意されている。MySQLでMyISAMを使う時のようにOSのキャッシュを使用するような仕組みを使っていたり、単にファイルをNFSで公開しているファイルサーバなどでは、このキャッシュがどの程度効くかによってかなりパフォーマンスが違ってくる。&lt;/p&gt;

&lt;p&gt;多数のファイルが読みだされ、かつ読み出し対象ファイルの総容量が物理メモリ容量より多い場合(普通そうだと思うが)、どのくらいのキャッシュヒット率になっているかを知っておくのは、パフォーマンス改善の一助になる。しかし、あるファイルがキャッシュに載っているかどうかを調べたり、ファイルをキャッシュに載せたりするための単純なコマンドというのは実は存在していない(はず)。それで、&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; width=&quot;500&quot;&gt;
  &lt;p&gt;
    Linuxのファイルシステムキャッシュのヒット率って取得できないんだろうか。MyISAM使ってる時にどんくらいデータファイルがキャッシュヒットしてるか見たいなーと思ったけど、ググってみてもいい感じの情報が出てこない。カーネルソース読めって話かな…
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; doublemarket (@dblmkt) &lt;a href=&quot;https://twitter.com/dblmkt/statuses/207373195425230848&quot;&gt;May 29, 2012&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とつぶやいたら、&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; width=&quot;500&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https://twitter.com/dblmkt&quot;&gt;@dblmkt&lt;/a&gt; VFS 周りの値とってごにょっとする感じになると思うます。こんな感じ？ &lt;a href=&quot;http://t.co/5sa0HcvK&quot;&gt;http://t.co/5sa0HcvK&lt;/a&gt;
  &lt;/p&gt;
  
  &lt;p&gt;
    &amp;mdash; ishikawa84g＠驚きの白々しさ (@ishikawa84g) &lt;a href=&quot;https://twitter.com/ishikawa84g/statuses/207391303351287808&quot;&gt;May 29, 2012&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と教えてもらったので、&lt;a title=&quot;Measuring Linux Filesystem Cache Hit Rate&quot; href=&quot;http://sourceware.org/systemtap/wiki/WSCacheHitRate&quot; target=&quot;_blank&quot;&gt;リンク先のサイト&lt;/a&gt;にあるスクリプトでキャッシュヒット率を確認してみた。@ishikawa84g 先生ありがとうございます～。&lt;/p&gt;

&lt;p&gt;systemtapは、カーネル内部の挙動をトレースするためのツールの一種で、特別なスクリプトを書いてそれに従ってトレースすることができるので、色々な情報を取得することができる。&lt;/p&gt;

&lt;p&gt;試してみたのはCentOS 6.2のマシン。systemtapがインストールされてなければインストールする。kernel-develも入っていないようであれば一緒に入れてしまうべし。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ sudo yum install systemtap kernel-devel&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;上記リンク先にあるスクリプトをファイルに保存し、そのまま実行するとエラーになってしまう。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ sudo stap cache-hit-rate.stp&lt;/p&gt;

&lt;p&gt;semantic error: libdwfl failure (missing x86_64 kernel/module debuginfo under ‘/lib/modules/2.6.18-164.el5/build’): No such file or directory while resolving probe point kernel.function(“vfs_read”)&lt;/p&gt;

&lt;p&gt;semantic error: no match while resolving probe point vfs.read&lt;/p&gt;

&lt;p&gt;semantic error: no match while resolving probe point kernel.function(“generic_make_request”)&lt;/p&gt;

&lt;p&gt;semantic error: no match while resolving probe point ioblock.request&lt;/p&gt;

&lt;p&gt;Pass 2: analysis failed. Try again with another ‘–vp 01’ option.&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;カーネルのdebuginfoがないためのエラーのようだ。debuginfoは専用のリポジトリからダウンロードする必要があるため、CentOSのdebuginfoリポジトリを登録する。debuginfoはそれなりにサイズもあるので、既に運用しているサーバにこれから入れるのは少しためらわれることもありそうだ。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/CentOS-debuginfo.repo に以下の内容を書き込んで保存する。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;[debuginfo]&lt;/p&gt;

&lt;p&gt;name=CentOS-$releasever – DebugInfo&lt;/p&gt;

&lt;p&gt;baseurl=http://debuginfo.centos.org/$releasever/$basearch/&lt;/p&gt;

&lt;p&gt;gpgcheck=0&lt;/p&gt;

&lt;p&gt;enabled=0&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;kernel-debuginfoをインストールする。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ uname -a&lt;/p&gt;

&lt;p&gt;Linux centos62-64-01 2.6.32-220.el6.x86_64 #1 SMP Tue Dec 6 19:48:22 GMT 2011 x86_64 x86_64 x86_64 GNU/Linux&lt;/p&gt;

&lt;p&gt;$ sudo yum install –enablerepo=debuginfo kernel-debuginfo-2.6.32-220.el6.x86_64&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;パッケージが大きいので時間がかかる。この時、unameでカーネルバージョンを調べて使用しているカーネルと同じバージョンのdebuginfoを指定すること。指定しないとリポジトリにある最新のカーネルのdebuginfoがインストールされてしまう。&lt;/p&gt;

&lt;p&gt;この状態でstapコマンドを実行すると、キャッシュのヒット率が5秒おきに15回表示される。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ sudo stap cache-hit-rate.stp&lt;/p&gt;

&lt;p&gt;Starting…&lt;/p&gt;

&lt;p&gt;Total Reads (KB) Cache Reads (KB) Disk Reads (KB) Miss Rate Hit Rate&lt;/p&gt;

&lt;p&gt;0 0 0 0.00% 0.00%&lt;/p&gt;

&lt;p&gt;0 0 0 0.00% 0.00%&lt;/p&gt;

&lt;p&gt;0 0 0 0.00% 0.00%&lt;/p&gt;

&lt;p&gt;58802 66 58736 99.88% 0.11%&lt;/p&gt;

&lt;p&gt;0 0 0 0.00% 0.00%&lt;/p&gt;

&lt;p&gt;0 0 0 0.00% 0.00%&lt;/p&gt;

&lt;p&gt;58785 58345 440 0.74% 99.25%&lt;/p&gt;

&lt;p&gt;0 0 0 0.00% 0.00%&lt;/p&gt;

&lt;p&gt;0 0 0 0.00% 0.00%&lt;/p&gt;

&lt;p&gt;^C&lt;/p&gt;

&lt;p&gt;Average Hit Rate: 49.67&lt;/p&gt;

&lt;p&gt;Average Miss Rate: 50.32&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;キャッシュに読み込まれていないファイルを&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ cat bigfile &amp;gt; /dev/null&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;とやって読みだしたのが8行目で、ここではファイルのほぼ全てをディスクから読みだしている。もう一度同じコマンドを実行すると、1度目に実行したcatで読みだされた際にファイルがキャッシュに読み込まれているので、ほとんどディスクからの読み出しがなく、11行目のようにほぼキャッシュヒット率100%となり一瞬でファイルの全てにアクセスできる。&lt;/p&gt;

&lt;p&gt;スクリプトの作者も書いているが、LVMを使用している場合などにはヒット率が正しく出ない場合があるので、値は参考程度に考えておくべし。&lt;/p&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sourceware.org/systemtap/&quot; title=&quot;SystemTap&quot; target=&quot;_blank&quot;&gt;SystemTap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;Linux のイントロスペクションと SystemTap&quot; href=&quot;http://www.ibm.com/developerworks/jp/linux/library/l-systemtap/&quot; target=&quot;_blank&quot;&gt;Linux のイントロスペクションと SystemTap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://d.hatena.ne.jp/sh2/20100120&quot; title=&quot;SystemTapでMySQLのDisk I/Oを分析する&quot; target=&quot;_blank&quot;&gt;SystemTapでMySQLのDisk I/Oを分析する&lt;/a&gt;&lt;/p&gt;

&lt;table border=&quot;0&quot; cellpadding=&quot;5&quot;&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873115019/l0gjp-22/ref=nosim/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/51blzciVfIL._SL160_.jpg&quot; border=&quot;0&quot; alt=&quot;Linuxカーネル Hacks ―パフォーマンス改善、開発効率向上、省電力化のためのテクニック&quot; style=&quot;border: 0px;&quot; /&gt;&lt;/a&gt;
    &lt;/td&gt;
    
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font size=&quot;-1&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/Linux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-Hacks-%E2%80%95%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%94%B9%E5%96%84%E3%80%81%E9%96%8B%E7%99%BA%E5%8A%B9%E7%8E%87%E5%90%91%E4%B8%8A%E3%80%81%E7%9C%81%E9%9B%BB%E5%8A%9B%E5%8C%96%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-%E6%B1%A0%E7%94%B0-%E5%AE%97%E5%BA%83/dp/4873115019%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dl0gjp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873115019&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Linuxカーネル Hacks ―パフォーマンス改善、開発効率向上、省電力化のためのテクニック&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=l0gjp-22&amp;#038;l=ur2&amp;#038;o=9&quot; width=&quot;1&quot; height=&quot;1&quot; style=&quot;border: none;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;池田 宗広 大岩 尚宏 島本 裕志 竹部 晶雄 平松 雅巳 高橋 浩和  
      
      &lt;p&gt;
        オライリージャパン 2011-07-26&lt;br /&gt;売り上げランキング : 95520
      &lt;/p&gt;
      
      &lt;p&gt;
        &lt;a href=&quot;http://www.amazon.co.jp/Linux%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB-Hacks-%E2%80%95%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E6%94%B9%E5%96%84%E3%80%81%E9%96%8B%E7%99%BA%E5%8A%B9%E7%8E%87%E5%90%91%E4%B8%8A%E3%80%81%E7%9C%81%E9%9B%BB%E5%8A%9B%E5%8C%96%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-%E6%B1%A0%E7%94%B0-%E5%AE%97%E5%BA%83/dp/4873115019%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dl0gjp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873115019&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Amazonで詳しく見る&lt;/a&gt; &lt;font size=&quot;-2&quot;&gt;by &lt;a href=&quot;http://www.goodpic.com/mt/aws/index.html&quot;&gt;G-Tools&lt;/a&gt;&lt;/font&gt;   
        
        &lt;table border=&quot;0&quot; cellpadding=&quot;5&quot;&gt;
          &lt;tr&gt;
            &lt;td valign=&quot;top&quot;&gt;
              &lt;a href=&quot;http://www.amazon.co.jp/exec/obidos/ASIN/4873114047/l0gjp-22/ref=nosim/&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;&lt;img src=&quot;http://ecx.images-amazon.com/images/I/41TmOAawDsL._SL160_.jpg&quot; border=&quot;0&quot; alt=&quot;Debug Hacks -デバッグを極めるテクニック&amp;#038;ツール&quot; style=&quot;border: 0px;&quot; /&gt;&lt;/a&gt;
            &lt;/td&gt;
            
            &lt;td valign=&quot;top&quot;&gt;
              &lt;font size=&quot;-1&quot;&gt;&lt;a href=&quot;http://www.amazon.co.jp/Debug-Hacks-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E6%A5%B5%E3%82%81%E3%82%8B%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-%E3%83%84%E3%83%BC%E3%83%AB-%E5%90%89%E5%B2%A1/dp/4873114047%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dl0gjp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114047&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Debug Hacks -デバッグを極めるテクニック&amp;#038;ツール&lt;/a&gt;&lt;img src=&quot;http://www.assoc-amazon.jp/e/ir?t=l0gjp-22&amp;#038;l=ur2&amp;#038;o=9&quot; width=&quot;1&quot; height=&quot;1&quot; style=&quot;border: none;&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;吉岡 弘隆 大和 一洋 大岩 尚宏 安部 東洋 吉田 俊輔  
              
              &lt;p&gt;
                オライリージャパン 2009-04-27&lt;br /&gt;売り上げランキング : 190612
              &lt;/p&gt;
              
              &lt;p&gt;
                &lt;a href=&quot;http://www.amazon.co.jp/Debug-Hacks-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%82%92%E6%A5%B5%E3%82%81%E3%82%8B%E3%83%86%E3%82%AF%E3%83%8B%E3%83%83%E3%82%AF-%E3%83%84%E3%83%BC%E3%83%AB-%E5%90%89%E5%B2%A1/dp/4873114047%3FSubscriptionId%3D15SMZCTB9V8NGR2TW082%26tag%3Dl0gjp-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873114047&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;Amazonで詳しく見る&lt;/a&gt; &lt;font size=&quot;-2&quot;&gt;by &lt;a href=&quot;http://www.goodpic.com/mt/aws/index.html&quot;&gt;G-Tools&lt;/a&gt;&lt;/font&gt;   
                
                &lt;hr /&gt;
                
                &lt;p&gt;
                  &lt;b&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/b&gt;
                &lt;/p&gt;
&lt;/p&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;&lt;/font&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視対象設定編)</title>
   <link href="http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/"/>
   <updated>2012-05-28T05:00:12-07:00</updated>
   <id>http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視対象設定編)&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/&quot; data-text=&quot;MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視対象設定編)&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視サーバ構築編)&quot; href=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/&quot; target=&quot;_blank&quot;&gt;前回のエントリ&lt;/a&gt;ではMySQLのサーバを監視できるように、CactiをインストールしてPercona Monitoring Pluginsのテンプレートを読み込んだところまで書いた。今回は、監視対象となるMySQLサーバを設定して、リソース監視を行うまでを書いてみる。なお、プロンプトがtargetとなって いるものが監視対象への設定で、serverとなっているものが監視サーバへの設定を意味している。&lt;/p&gt;

&lt;h2 id=&quot;snmpubuntu-server&quot;&gt;SNMPの設定(Ubuntu serverの場合)&lt;/h2&gt;

&lt;p&gt;Ubuntuでは標準ではSNMPがインストールされていないので、まずはインストールする。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;target$ sudo apt-get install snmp snmpd&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;/etc/snmp/snmpd.confにsnmpdのデフォルト設定ファイルが置かれるので、監視サーバから情報を取 得できるように編集する。&lt;/p&gt;

&lt;p&gt;まず、監視サーバからの読み出し許可設定を追記。SNMPコミュニティ名は「public」がデフォルト設定としては一般的だが、適宜設定。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# 監視対象で設定&lt;/p&gt;

&lt;p&gt;rocommunity SNMPコミュニティ名 監視サーバのIP # 追記&lt;/p&gt;

&lt;p&gt;view all all # 追記&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;全インタフェースからの接続を許可するよう設定。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# 監視対象で設定&lt;/p&gt;

&lt;p&gt;#agentAddress udp:127.0.0.1:161 # この行はコメントアウト&lt;/p&gt;

&lt;p&gt;agentAddress udp:161 # 追記&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;snmpdを再起動した後、監視サーバから以下のコマンドを実行して応答があればSNMPの設定は完了。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;target$ sudo /etc/init.d/snmpd restart&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;server$ snmpwalk -v1 -c public 監視対象IPアドレス .1.3.6.1.2.1.1.1.0&lt;/p&gt;

&lt;p&gt;SNMPv2-MIB::sysDescr.0 = STRING: Linux ubuntu1110s-01 2.6.38-8-server #42-Ubuntu SMP Mon Apr 11 03:49:04 UTC 2011 x86_64&lt;/p&gt;

&lt;p&gt;↑ 応答の例&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;h2 id=&quot;snmpcentos&quot;&gt;SNMPの設定(CentOSの場合)&lt;/h2&gt;

&lt;p&gt;通常、SNMPはデフォルトでインストールされるので、設定ファイルを編集して監視サーバから接続できるようにする。基本的にはUbuntuと同じ設定にすればよい。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;# 監視対象で設定&lt;/p&gt;

&lt;p&gt;rocommunity SNMPコミュニティ名 監視サーバのIP # 追記&lt;/p&gt;

&lt;p&gt;view all all # 追記&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;snmpdが自動起動するように設定し(どうやら初期設定では自動起動しないようになっている模様)、snmpdを再起動して設定を反映させる。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;target$ sudo chkconfig snmpd on&lt;/p&gt;

&lt;p&gt;target$ sudo /etc/init.d/snmpd start&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;server$ snmpwalk -v1 -c public 監視対象IPアドレス .1.3.6.1.2.1.1.1.0&lt;/p&gt;

&lt;p&gt;SNMPv2-MIB::sysDescr.0 = STRING: Linux centos62-64-01 2.6.32-220.el6.x86_64 #1 SMP Tue Dec 6 19:48:22 GMT 2011 x86_64&lt;/p&gt;

&lt;p&gt;↑ 応答の例&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;h2 id=&quot;cactimysql&quot;&gt;Cacti監視のためのMySQL設定&lt;/h2&gt;

&lt;p&gt;Percona Monitoring Plugins for Cactiは、監視対象のMySQLにログインして、色々な種類のshowコ マンドを実行して得られた結果をグラフにするので、監視対象のMySQLにユーザを追加する必要があ る。ここで指定するユーザ名とパスワードは、&lt;a title=&quot;MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視サーバ構築編)&quot; href=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/&quot; target=&quot;_blank&quot;&gt;前回のエントリ&lt;/a&gt;でss_get_mysql_stats.phpファイルに書いた、 $mysql_user と $mysql_pass と一致させること。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;target$ mysql -uroot&lt;/p&gt;

&lt;p&gt;mysql-target&amp;gt; grant process, super on *.* to ユーザ名@監視サーバ identified by ‘パスワ ード’;&lt;/p&gt;

&lt;p&gt;mysql-target&amp;gt; flush privileges;&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;h2 id=&quot;cacti&quot;&gt;Cactiからの監視設定&lt;/h2&gt;

&lt;p&gt;監視サーバのCacti管理画面で、画像のように Create → New Graphs → Create New Host とたどり、監視対象デバイス作成画面を開く。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/attachment/05/&quot; rel=&quot;attachment wp-att-1215&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/05/05.png&quot; title=&quot;デバイ ス作成画面&quot; width=&quot;586&quot; height=&quot;372&quot; class=&quot;alignnone size-full wp-image-1215&quot; style=&quot;border: 0px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下のように入力し、「Create」ボタンを押す。&lt;/p&gt;

&lt;table border=&quot;&quot; align=&quot;center&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;
      Description
    &lt;/td&gt;
    
    &lt;td&gt;
      監視対象ホスト名など、一意に監視対象がわかる記述
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Hostname
    &lt;/td&gt;
    
    &lt;td&gt;
      監視対象IPアドレスあるいは名前解決できる場合ホスト名
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      Host Template
    &lt;/td&gt;
    
    &lt;td&gt;
      Percona MySQL Server HT
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      SNMP Community, SNMP Port
    &lt;/td&gt;
    
    &lt;td&gt;
      SNMPコミュニティ名にpublic以外を指定した場合は適宜設定
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Createボタンを押した後、画面下側に関連づけられたグラフが一覧表示される。Percona Monitoring Pluginsで取得できる情報は、あくまでMySQLのものだけで、実際にはLinuxの情報も取得しておく必要があるので、Host Templateに「Linux Server Default Set」を選んでもう一度Createボタンを押 して、最低限のOS関連情報も取れるようにしておこう。&lt;/p&gt;

&lt;p&gt;ここまで時点では、画面下側に表示されたグラフテンプレートがホストにひもづけられただけで、実際にグラフの作成は開始されていない。右上の「Create New Graphs」をクリックし、画像のように 作成したいグラフを選択して、「Create」を押すと、対応するグラフの情報取得が始まる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/attachment/06/&quot; rel=&quot;attachment wp-att-1237&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/05/06.png&quot; title=&quot;グラフ 作成&quot; width=&quot;592&quot; height=&quot;287&quot; class=&quot;alignnone size-full wp-image-1237&quot; style=&quot;border: 0px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/attachment/07/&quot; rel=&quot;attachment wp-att-1239&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/05/07.png&quot; title=&quot;グラフ 作成&quot; width=&quot;592&quot; height=&quot;470&quot; class=&quot;alignnone size-full wp-image-1239&quot; style=&quot;border: 0px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;ツリーへのホスト追加&lt;/h2&gt;

&lt;p&gt;この状態では左上の「graphs」タブに移動しても左側のツリーには追加したサーバは表示されていないだろう。もう一度「console」タブに戻り、 Management → Devices から、監視対象デバイスの一覧を開き、今追加したサーバにチェックを付ける。右下の「Choose an action」から、「Add graph to tree」を選択してGoボタンを押し、ツリーに追加すると、めでたく graph タブのツリーにホストが現れ、グラフが表示される。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/attachment/08/&quot; rel=&quot;attachment wp-att-1240&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/05/08.png&quot; title=&quot;ツリー に追加&quot; width=&quot;592&quot; height=&quot;353&quot; class=&quot;alignnone size-full wp-image-1240&quot; style=&quot;border: 0px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画像がリンク切れの場合、まだグラフを描画できる情報が集まっていないので、少し(5分おきの情報収集がデフォルトなので、2回分10分以上)待ってもう一度確認しよう。画像は表示されたのに、いくら待ってもグラフが表示されない場合は、監視対象から情報が取得できていない可能性があるので、SNMPの設定やMySQLの設定(特にユーザ関連)を見直すべし。&lt;/p&gt;

&lt;p&gt;グラフをどう読み取っていくかについては、以下の記事が参考になる。記事中には「better-cacti-template」とあるが、これはPercona Monitoring Plugin for Cactiの前身となるものなので、ほぼ同じと考えてよい。&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;これだけ見れば大丈夫！ーMySQLパフォーマンス監視のツボ（クエリ編）&quot; href=&quot;http://www.infiniteloop.co.jp/blog/2012/03/mysql-tuning-cacti-query/&quot; target=&quot;_blank&quot;&gt;これだけ見 れば大丈夫！ーMySQLパフォーマンス監視のツボ（クエリ編）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今回はPercona Monitoring Plugin for CactiのMySQLに関する部分だけを紹介したが、ApacheやMemcached、nginx、redisなどの情報グラフ化もできるので、お試しあれ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視サーバ構築編)</title>
   <link href="http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/"/>
   <updated>2012-05-17T13:01:24-07:00</updated>
   <id>http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視サーバ構築編)&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/&quot; data-text=&quot;MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視サーバ構築編)&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MySQLをリソース監視する仕組みにはいくつかあるが、対象のMySQLサーバが5台以上ある場合はCactiがおすすめ。導入のしやすさだけでMuninを選ぶ人が多い気がするが、その選択基準は間違っている！&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/attachment/cacti-211916/&quot; rel=&quot;attachment wp-att-1173&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/05/Cacti-211916.png&quot; title=&quot;Cactiグラフの例&quot; width=&quot;223&quot; height=&quot;256&quot; class=&quot;alignleft  wp-image-1173&quot; style=&quot;margin-top: 0px; margin-bottom: 0px; margin-left: 10px; margin-right: 40px; border-style: initial; border-color: initial; border-image: initial; border-width: 0px;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cactiのいいとこわるいとこ&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多数のグラフを見やすく並べられる&lt;/li&gt;
  &lt;li&gt;muninと比べて多数のサーバから軽快に情報を収集・表示できる&lt;/li&gt;
  &lt;li&gt;監視対象には、MySQLのユーザを追加するだけでかなりの項目数を監視できる&lt;/li&gt;
  &lt;li&gt;データの保存にデータベースが必須だったりしてセットアップがやや面倒&lt;/li&gt;
  &lt;li&gt;慣れるまで監視プラグインを書くのに手間取る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Muninのいいとこわるいとこ&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;監視プラグインを書くのが簡単&lt;/li&gt;
  &lt;li&gt;監視サーバにデータベースなどが必要なく、セットアップが簡単&lt;/li&gt;
  &lt;li&gt;グラフの並び方などが固定で、比較などがしにくい&lt;/li&gt;
  &lt;li&gt;監視対象にプラグインを入れなければならず、台数が多いとそれだけ手間が増える&lt;/li&gt;
  &lt;li&gt;監視対象が増えると監視サーバの負荷が急激にあがるので、あまり多数のサーバは監視できない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そんなわけで、CentOS 6.2上にCactiの監視サーバをセットアップし、&lt;a title=&quot;Percona Monitoring Plugin&quot; href=&quot;http://www.percona.com/software/percona-monitoring-plugins/&quot; target=&quot;_blank&quot;&gt;Percona Monitoring Plugins for Cacti&lt;/a&gt;を使ってMySQLサーバ(CentOSまたはUbuntu)のリソース監視を始めるまでの手順。その1は監視サーバのセットアップ編。&lt;/p&gt;

&lt;h2 id=&quot;rpmforge&quot;&gt;RPMforgeのリポジトリ追加&lt;/h2&gt;

&lt;p&gt;RPMforgeリポジトリには最新のCactiが含まれているため、これを導入する。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ wget http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm&lt;/p&gt;

&lt;p&gt;$ sudo rpm -ihv rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm&lt;/p&gt;

&lt;p&gt;$ sudo yum -y update rpmforge-release&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/rpmforge.repo ファイルをエディタで開き、 enabled = 0 にする。これで、オプションを付けないとRPMforgeはリポジトリとして有効にならないようになる。&lt;/p&gt;

&lt;h2 id=&quot;cacti&quot;&gt;Cactiのインストール&lt;/h2&gt;

&lt;p&gt;Cactiと、あわせて必要なnet-snmpやhttpd、MySQLなどをインストール。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ sudo yum install –enablerepo=rpmforge cacti net-snmp-utils mysql-server&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;指定したもの以外に、依存関係上httpd, mysql, perl, php, rrdtoolなどもインストールされる。&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;MySQLの設定&lt;/h2&gt;

&lt;p&gt;Cactiが取得した情報を格納するためのMySQLを設定する。ここでは最低限必要な設定だけを記述するが、CentOS 6.2のMySQLの/etc/my.cnfは非常にシンプルなので、必要に応じてパラメータを指定すること。&lt;/p&gt;

&lt;p&gt;[mysqld]セクションに以下を追加&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;skip-character-set-client-handshake&lt;/p&gt;

&lt;p&gt;character-set-server = utf8&lt;/p&gt;

&lt;p&gt;collation-server = utf8_general_ci&lt;/p&gt;

&lt;p&gt;init-connect = SET NAMES utf8&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;(2012.05.29) default-character-setは不要とnippondanjiさんからはてブコメントで指摘をいただいたので削除。直々にご指摘とは恐縮です。&lt;/p&gt;

&lt;p&gt;ここでMySQLを再起動する。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/mysqld restart&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;statusコマンドで、charactersetがutf8であることを確認。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; status;&lt;/p&gt;

&lt;p&gt;(略)&lt;/p&gt;

&lt;p&gt;Server characterset: utf8&lt;/p&gt;

&lt;p&gt;Db characterset: utf8&lt;/p&gt;

&lt;p&gt;Client characterset: utf8&lt;/p&gt;

&lt;p&gt;Conn. characterset: utf8&lt;/p&gt;

&lt;p&gt;(略)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.cacti.net/manual:088:1_installation.1_install_unix.5_install_and_configure_cacti&quot; target=&quot;_blank&quot;&gt;Cactiのドキュメント&lt;/a&gt;にしたがって、Cactiで使用するMySQLの設定を行う。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;$ mysqladmin –user=root create cacti&lt;/p&gt;

&lt;p&gt;$ mysql cacti &amp;lt; cacti.sql&lt;/p&gt;

&lt;p&gt;$ mysql –user=root mysql&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; grant all on cacti.* to ユーザ名@localhost identified by ‘パスワード’;&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; flush privileges;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;h2 id=&quot;apachephp&quot;&gt;Apache/PHPの設定&lt;/h2&gt;

&lt;p&gt;/var/www/cacti/include/config.php を上の項で作成したユーザに合わせて編集する。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$database_type = “mysql”;&lt;/p&gt;

&lt;p&gt;$database_default = “cacti”;&lt;/p&gt;

&lt;p&gt;$database_hostname = “localhost”; # DBサーバのホスト名&lt;/p&gt;

&lt;p&gt;$database_username = “cactiuser”; # 上の項で作成したユーザ&lt;/p&gt;

&lt;p&gt;$database_password = “cactipassword”; # 上の項で設定したパスワード&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;/etc/httpd/conf.d/cacti.php が存在することを確認する。他のホストからCactiにアクセスする際は、以下の行を追加してhttpdを再起動する。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;allow from 127.0.0.1&lt;/p&gt;

&lt;p&gt;allow from IPアドレス # 追記&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.cacti.net/manual:088:1_installation.1_install_unix.1_configure_php&quot; target=&quot;_blank&quot;&gt;Cactiのドキュメント&lt;/a&gt;を参考に、/etc/php.ini および /etc/php.d/*.ini の記述を確認。設定を変更したら、Apacheを再起動する。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/httpd restart&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;h2 id=&quot;iptables&quot;&gt;iptablesの設定&lt;/h2&gt;

&lt;p&gt;CentOS 6.2ではデフォルトでpingやSSHしか応答できないようにされているようなので、/etc/sysconfig/iptables に以下を追加してhttpのアクセスが可能なようにする。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;-A INPUT -m state –state NEW -m tcp -p tcp –dport 80 -j ACCEPT&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;iptablesを再起動&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$ sudo /etc/init.d/iptables restart&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;設定完了&lt;/h2&gt;

&lt;p&gt;Cactiをインストールした際に /etc/cron.d/cacti が既に作成されているので、この時点で5分おきに情報収集が始まっている。&lt;/p&gt;

&lt;p&gt;http://CactiサーバのIPアドレス/cacti を開くと、まずインストールの確認ウィザードが開始される。&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/attachment/03-2/&quot; rel=&quot;attachment wp-att-1159&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/05/03.png&quot; title=&quot;インストール確認ウィザード&quot; width=&quot;305&quot; height=&quot;244&quot; class=&quot;size-full wp-image-1159 aligncenter&quot; style=&quot;border-style: initial; border-color: initial; border-image: initial; border-width: 0px;&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;ここまでの設定を改めて確認されるだけなので、基本的にはNextを押していけばいい。各種ツールのパスを確認される画面が最後にあるが、ここでパスが見つからない場合は手動でパスを入力するか、不足しているツールをインストールして再度試すべし。&lt;/p&gt;

&lt;p&gt;この後ログイン画面が表示され、ユーザ名 admin 、 パスワード admin でログイン可能で、すぐにパスワードの変更を促されるので画面の指示に従って変更する。&lt;/p&gt;

&lt;h2 id=&quot;percona-monitoring-plugin-for-cacti&quot;&gt;Percona Monitoring Plugin for Cactiの導入&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.percona.com/downloads/percona-monitoring-plugins/&quot; target=&quot;_blank&quot;&gt;Percona&lt;/a&gt;からPercona monitoring pluginsをダウンロードし、ファイルを展開する。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ tar zxvf percona-monitoring-plugins-1.0.0.tar.gz&lt;/p&gt;

&lt;p&gt;$ cd percona-monitoring-plugins-1.0.0/cacti/scripts&lt;/p&gt;

&lt;p&gt;$ sudo cp ss_get_by_ssh.php ss_get_mysql_stats.php /var/www/cacti/scripts/&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;監視対象のMySQLにログインする際のアカウント情報を ss_get_mysql_stats.php に書き込む。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$mysql_user = ‘cactiuser’; # 監視対象にログインする際のMySQLユーザ&lt;/p&gt;

&lt;p&gt;$mysql_pass = ‘cactiuser’; # 監視対象にログインする際のパスワード&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;Cacti管理画面からImport/Export → Import templatesを選択し、Import Template from Local Fileで以下を指定してImportボタンを押し、テンプレートファイルを読み込ませる。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;percona-monitoring-plugins-1.0.0/cacti/templates/cacti_host_template_percona_mysql_server_ht_0.8.6i-sver1.0.0.xml&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;成功すると、それぞれの監視項目に対応したテンプレートごとに[success]と表示される。&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;http://b.l0g.jp/mysql/install-cacti-to-monitor-mysql-1/attachment/04-2/&quot; rel=&quot;attachment wp-att-1160&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/05/04.png&quot; title=&quot;テンプレート読み込み&quot; width=&quot;360&quot; height=&quot;393&quot; class=&quot;size-full wp-image-1160 aligncenter&quot; style=&quot;border-style: initial; border-color: initial; border-image: initial; border-width: 0px;&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;これでMySQLサーバを監視するための監視サーバの準備は完了。&lt;/p&gt;

&lt;p&gt;(2012.05.28追記) 監視対象側の設定についても書いたので、続けてどうぞ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/use-cacti-to-monitor-mysql-2/&quot; title=&quot;MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視対象設定編)&quot;&gt;MySQLの監視はCacti+Percona Monitoring Pluginsがおすすめ(監視対象設定編)&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MyISAMを使っている時key_buffer_sizeは大きくし過ぎてもいけない</title>
   <link href="http://b.l0g.jp/mysql/do-not-set-too-much-keybuffer/"/>
   <updated>2012-05-01T13:46:40-07:00</updated>
   <id>http://b.l0g.jp/mysql/do-not-set-too-much-keybuffer</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/do-not-set-too-much-keybuffer/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MyISAMを使っている時key_buffer_sizeは大きくし過ぎてもいけない&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/do-not-set-too-much-keybuffer/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/do-not-set-too-much-keybuffer/&quot; data-text=&quot;MyISAMを使っている時key_buffer_sizeは大きくし過ぎてもいけない&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/do-not-set-too-much-keybuffer/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MyISAMのみを使っているMySQLサーバで、key_buffer_sizeのサイズは大きくても小さくてもダメですよ、という例。&lt;/p&gt;

&lt;p&gt;その前にちょっと復習。MySQLの主なストレージエンジンといえばMyISAMとInnoDBだが、データやインデックスのキャッシュの仕組みには、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;InnoDB : インデックス、データともMySQLがキャッシュ管理する(innodb_buffer_pool_sizeで設定)&lt;/li&gt;
  &lt;li&gt;MyISAM : インデックスはMySQLがキャッシュ管理する(key_buffer_sizeで大きさを設定)。データはOSのキャッシュ機構におまかせ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という違いがある。&lt;/p&gt;

&lt;p&gt;ものすごく簡単に言えば、InnoDBの場合はなるべく大きな innodb_buffer_pool_size を設定してやれば、インデックスかデータかに関わらずメモリ上にキャッシュされて高速化が図れる可能性がある。一方MyISAMの場合、key_buffer_size を大きくしてもインデックスしかキャッシュされないので、OSがデータ部分をキャッシュするメモリ(つまりMySQLに割り当ててないメモリ)もある程度確保しておく必要がある。この辺りのことはMySQLのドキュメントには以下のように書かれている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;innodb_buffer_pool_size&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;専用サーバの場合物理メモリの80%。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a title=&quot;MySQL 5.1 リファレンスマニュアル 13.5.4. InnoDB 起動オプションとシステム変数&quot; href=&quot;http://dev.mysql.com/doc/refman/5.1/ja/innodb-parameters.html&quot; target=&quot;_blank&quot;&gt;MySQL 5.1 リファレンスマニュアル 13.5.4. InnoDB 起動オプションとシステム変数&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;key_buffer_size&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;「一般的には、マシンのメモリ使用率 25 % の値であることが好ましい」一方で&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;「Key_reads/Key_read_requests の比率は、0.01 より小さいことが望ましい」つまり&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;99.9%がキャッシュされていることが望ましいということ。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a title=&quot;MySQL 5.1 リファレンスマニュアル 4.2.3. システム変数&quot; href=&quot;http://dev.mysql.com/doc/refman/5.1/ja/server-system-variables.html&quot; target=&quot;_blank&quot;&gt;MySQL 5.1 リファレンスマニュアル 4.2.3. システム変数&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;とある参照用のスレーブ(MyISAMのみ使用)で、アクセス数とともにデータ量も増加して、インデックスがメモリに乗りきらず、Key_reads/Key_read_requests (以下key bufferヒット率という)が80%台まで落ちてしまっていた。&lt;/p&gt;

&lt;p&gt;メモリを増設してkey_buffer_sizeを調子に乗ってでっかく取ってみたが、key bufferヒット率は99.9%になったものの、相変わらずディスクからの読み出しは多い。ここで、上に書いた仕組みに思い当たり、データ部分をキャッシュするOS用のメモリが不足しているのでは、と思って一旦key_buffer_sizeを少し減らしてみた。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;インデックスのサイズ : 22GB&lt;/li&gt;
  &lt;li&gt;従来 key_buffer_size : 4GB (OS物理メモリ12GB)&lt;/li&gt;
  &lt;li&gt;増強後 key_buffer_size : 12GB (OS物理メモリ24GB)&lt;/li&gt;
  &lt;li&gt;その後 key_buffer_size : 8GB (OS物理メモリ24GB)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すると一目瞭然、以下のグラフの青枠部のようにディスクからの読み出しは半分以下に減った(赤線が設定を変更した時点)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/mysql/do-not-set-too-much-keybuffer/attachment/la-io/&quot; rel=&quot;attachment wp-att-1018&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/2012/04/la-io.png&quot; alt=&quot;&quot; title=&quot;ロードアベレージとディスクIOの変化&quot; width=&quot;522&quot; height=&quot;343&quot; class=&quot;alignnone size-full wp-image-1018&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;key_buffer_sizeを大きくしたからといってパフォーマンスが上がるというわけではないのである。上の例から分かるように、全インデックスがメモリに乗らなくても、よく使うインデックスがほぼメモリに乗っていれば問題ない。常に&lt;strong&gt;key bufferヒット率が最大になり、ディスク読み出しが最小になる key_buffer_size を探ることが必要&lt;/strong&gt;ということだ。サイズはオンラインでも変更できる。ただし、コマンドを実行するとkey bufferの中身は一旦空になり、改めてキャッシュが構築されるため一時的にディスクIOが大量に発生するので注意(停止できるサーバならキャッシュウォームアップをした方がよい)。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; set global key_buffer_size = バイトでのサイズ(1GBなら1073741824);&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;確認は show variables で。以下は4GBの例。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; show variables like ‘key_buffer_size’;&lt;/p&gt;

&lt;p&gt;+—————–+————+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Variable_name&lt;/td&gt;
      &lt;td&gt;Value&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+—————–+————+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;key_buffer_size&lt;/td&gt;
      &lt;td&gt;4294967296&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+—————–+————+&lt;/p&gt;

&lt;p&gt;1 row in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;そもそもインデックスがでか過ぎるのでシェイプアップすべきとか、テーブル分割を考えるべきといった別の解決方法も考えられるのだが、わかりやすいグラフが取れたのでひとつの例として。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQLエラーログに出てきたエラーコードのとっかかり</title>
   <link href="http://b.l0g.jp/mysql/diagnosing-with-perror-command/"/>
   <updated>2012-04-26T05:02:56-07:00</updated>
   <id>http://b.l0g.jp/mysql/diagnosing-with-perror-command</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/diagnosing-with-perror-command/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQLエラーログに出てきたエラーコードのとっかかり&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/diagnosing-with-perror-command/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/diagnosing-with-perror-command/&quot; data-text=&quot;MySQLエラーログに出てきたエラーコードのとっかかり&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/diagnosing-with-perror-command/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MySQLのエラーログに記録されるエラーコードは、MySQL自体が判断して表示するものと、OSが返したエラーコードをMySQLが表示しているものとの2種類に分けられる。それぞれまずどう調べ始めるか、という話。&lt;a href=&quot;http://www.mysqlperformanceblog.com/2012/03/26/how-to-diagnose-errors-in-the-mysql-error-log/&quot; title=&quot;How to diagnose errors in the MySQL error log&quot; target=&quot;_blank&quot;&gt;MySQL Performance Blogのエントリ&lt;/a&gt;に、後で自分の役に立つように情報を加えてみた。&lt;/p&gt;

&lt;p&gt;例えば、レプリケーションがうまくいかない時に表示される&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;Got fatal error 1236 from master when reading data from binary log: ‘Client requested master to start replication from impossible position’&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;というエラーの「1236」は、MySQL自体が判断した結果なので、以下のサイトで一覧が見られる。というか、表示されているままで、それ以上の情報はエラーログの前後や他のログ(OSログなど)を確認するしかない。&lt;/p&gt;

&lt;p&gt;4.1&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/4.1/ja/error-returns.html&quot; title=&quot;MySQL 4.1 リファレンスマニュアル 12.1. 返されるエラー&quot; target=&quot;_blank&quot;&gt;MySQL 4.1 リファレンスマニュアル 12.1. 返されるエラー&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.0/5.1/5.5 (バージョン部分を変えるだけで全部URLは同じ)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/error-messages-server.html&quot; target=&quot;_blank&quot;&gt;MySQL 5.0 Reference Manual C.3. Server Error Codes and Messages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.0/en/error-messages-client.html&quot; target=&quot;_blank&quot;&gt;MySQL 5.0 Reference Manual C.4. Client Error Codes and Messages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一方、以下のようなエラーの場合、&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;120326 16:56:45 [ERROR] /usr/sbin/mysqld: Incorrect key file for table ‘/tmp/#sql_21b2_0.MYI’; try to repair it&lt;/p&gt;

&lt;p&gt;120326 16:56:45 [ERROR] Got an error from unknown thread, storage/myisam/mi_write.c:223&lt;/p&gt;

&lt;p&gt;120326 16:56:45 [ERROR] /usr/sbin/mysqld: Sort aborted: Error writing file ‘/tmp/MYK74Kpi’ (Errcode: 28)&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;エラーコードを調べないままだと、ファイルへの書き出しで失敗したことまでは分かっても、その先何が起きているのかは分からない。ここで、「Errcode: 28」は、OSが返しているエラーを表示している。これがどのような意味かは、perrorコマンドで分かる。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;$ perror 28&lt;/p&gt;

&lt;p&gt;OS error code 28: No space left on device&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;エラーログだけでは判断がつかないが、エラーコード28の意味が分かると、単純な問題であることが判明する。MyISAMはディスクがいっぱいであるというエラーを正しく扱わないという問題があるので、このようなことになる。&lt;/p&gt;

&lt;p&gt;perrorコマンド、MySQLに付属している小ネタ的コマンドだが、OSエラーコードをそのまま表示する他のソフトウェアのエラーログを見る時にも役立ちそうだ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQL 5.6.5の新機能GTIDを試してみる</title>
   <link href="http://b.l0g.jp/mysql/mysql565-gtid/"/>
   <updated>2012-04-22T14:46:03-07:00</updated>
   <id>http://b.l0g.jp/mysql/mysql565-gtid</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/mysql565-gtid/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQL 5.6.5の新機能GTIDを試してみる&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/mysql565-gtid/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/mysql565-gtid/&quot; data-text=&quot;MySQL 5.6.5の新機能GTIDを試してみる&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/mysql565-gtid/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4月10日にリリースされたMySQL 5.6.5 DMRに、&lt;a href=&quot;http://dev.mysql.com/tech-resources/articles/mysql-5.6-replication.html&quot; target=&quot;_blank&quot;&gt;GTID(Global Transaction ID)という機能が搭載された&lt;/a&gt;。これは、トランザクションにID(GTID)を持たせることによって、レプリケーションの進行具合を、従来の「マスタのbinlogファイル名 + ポジション」という情報ではなく、GTIDで管理できるようになるという機能である。従来のバージョンと比べた時に一番分かりやすい点としては、「change masterする時にポジションを指定しなくてよくなる」ということだろう。&lt;/p&gt;

&lt;p&gt;MySQLのレプリケーション機能開発者&lt;a href=&quot;http://d2-systems.blogspot.jp/2012/04/global-transaction-identifiers-are-in.html&quot; target=&quot;_blank&quot;&gt;Luis Soares氏のブログ&lt;/a&gt;を参考に、GTIDの機能を試してみた。&lt;/p&gt;

&lt;h2 id=&quot;mysql-565&quot;&gt;MySQL 5.6.5のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/downloads/mysql/#downloads&quot; target=&quot;_blank&quot;&gt;MySQLのダウンロードサイト&lt;/a&gt;からDevelopment Releaseを選択し、5.6.5 m8をダウンロードする。自分はUbuntu 11.04を使ったので、debファイルをダウンロードし、以下のコマンドを実行したところ、/opt/mysql以下にインストールされた。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;dpkg -i mysql-5.6.5-m8-ubuntu10.04-x86_64.deb&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;ちなみに自分はマシンを2台用意できなかったので、/opt/mysql以下をコピーしてからmysql_install_dbコマンドを実行し、それぞれmy.cnfを作成して、1台の検証用サーバにポートを分けて2つのMySQLを起動した。&lt;/p&gt;

&lt;h2 id=&quot;gtid&quot;&gt;GTIDを使うのに必要な設定&lt;/h2&gt;

&lt;p&gt;GTIDを使用するには、レプリケーションを組むサーバ全体でGTIDを有効にする必要があり、それぞれのサーバのmy.cnfで以下のオプションを指定する。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;log-bin&lt;/p&gt;

&lt;p&gt;log-slave-updates&lt;/p&gt;

&lt;p&gt;gtid-mode=ON&lt;/p&gt;

&lt;p&gt;disable-gtid-unsafe-statements&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;はじめの2つはレプリケーションを設定したことのある人なら見慣れたオプションだが、後半の2つが新しく追加されたもの。gtid-modeは単純にGTIDの機能を使用可能にするオプションで、disable-gtid-unsafe-statementsは、GTIDと互換性のない一部のSQLの実行を無効にするものである。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2013.03.26追記)&lt;/strong&gt; disable-gtid-unsafe-statementsはMySQL 5.6.9で廃止されたので、5.6.9以降ではenforce-gtid-consistencyを使用すること。&lt;/p&gt;

&lt;p&gt;これらの設定を行ってMySQLを起動すると、GTIDが有効になる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; show variables like ‘%gtid%’;&lt;/p&gt;

&lt;p&gt;+——————————–+———–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Variable_name&lt;/td&gt;
      &lt;td&gt;Value&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————————–+———–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;disable_gtid_unsafe_statements&lt;/td&gt;
      &lt;td&gt;ON&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;gtid_done&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;gtid_lost&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;gtid_mode&lt;/td&gt;
      &lt;td&gt;ON&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;gtid_next&lt;/td&gt;
      &lt;td&gt;AUTOMATIC&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;gtid_owned&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————————–+———–+&lt;/p&gt;

&lt;p&gt;6 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;レプリケーションの設定&lt;/h2&gt;

&lt;p&gt;GTIDを設定するとトランザクションごとにGTIDを持つと書いたが、まず簡単なcreate文を書いてみる。その後show binlog eventsでbinlogの中身を見てみると、クエリの情報の他にGTIDがセットされていることが分かる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql-master&amp;gt; use test;&lt;/p&gt;

&lt;p&gt;Database changed&lt;/p&gt;

&lt;p&gt;mysql-master&amp;gt; create table t1 (a INT);&lt;/p&gt;

&lt;p&gt;Query OK, 0 rows affected (0.13 sec)&lt;/p&gt;

&lt;p&gt;mysql-master&amp;gt; show binlog events;&lt;/p&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Log_name&lt;/td&gt;
      &lt;td&gt;Pos&lt;/td&gt;
      &lt;td&gt;Event_type&lt;/td&gt;
      &lt;td&gt;Server_id&lt;/td&gt;
      &lt;td&gt;End_log_pos&lt;/td&gt;
      &lt;td&gt;Info&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Format_desc&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;Server ver: 5.6.5-m8-log, Binlog ver: 4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;Previous_gtids&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;147&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;147&lt;/td&gt;
      &lt;td&gt;Gtid&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;191&lt;/td&gt;
      &lt;td&gt;SET @@SESSION.GTID_NEXT= ‘7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:1’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;191&lt;/td&gt;
      &lt;td&gt;Query&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
      &lt;td&gt;use `test`; create table t1 (a INT)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;p&gt;4 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;この例で表示されている、’7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:1’が、直後のcreate tableに割り当てられたGTIDである。さらにinsert文を発行してみる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql-master&amp;gt; insert into t1 values (1);&lt;/p&gt;

&lt;p&gt;Query OK, 1 row affected (0.13 sec)&lt;/p&gt;

&lt;p&gt;mysql-master&amp;gt; show binlog events;&lt;/p&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Log_name&lt;/td&gt;
      &lt;td&gt;Pos&lt;/td&gt;
      &lt;td&gt;Event_type&lt;/td&gt;
      &lt;td&gt;Server_id&lt;/td&gt;
      &lt;td&gt;End_log_pos&lt;/td&gt;
      &lt;td&gt;Info&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Format_desc&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;Server ver: 5.6.5-m8-log, Binlog ver: 4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;Previous_gtids&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;147&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;147&lt;/td&gt;
      &lt;td&gt;Gtid&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;191&lt;/td&gt;
      &lt;td&gt;SET @@SESSION.GTID_NEXT= ‘7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:1’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;191&lt;/td&gt;
      &lt;td&gt;Query&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
      &lt;td&gt;use `test`; create table t1 (a INT)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
      &lt;td&gt;Gtid&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;328&lt;/td&gt;
      &lt;td&gt;SET @@SESSION.GTID_NEXT= ‘7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:2’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;328&lt;/td&gt;
      &lt;td&gt;Query&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;403&lt;/td&gt;
      &lt;td&gt;BEGIN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;403&lt;/td&gt;
      &lt;td&gt;Query&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;498&lt;/td&gt;
      &lt;td&gt;use `test`; insert into t1 values (1)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;498&lt;/td&gt;
      &lt;td&gt;Xid&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;525&lt;/td&gt;
      &lt;td&gt;COMMIT /* xid=10 */&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;p&gt;8 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;insert文には、’7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:2’というGUIDが振られたことが見て取れる。GUIDは、コロンの前のサーバのUUID(server_uuid変数)と、コロンの後の単純なトランザクションの通し番号からなっているのである。&lt;/p&gt;

&lt;p&gt;この時点で、マスタ上には1行だけ値を持つテーブルt1があり、スレーブ側には何も入っていない状態になっているはず。これまでのMySQLの場合スレーブサーバを作るには、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;マスタを停止してファイルを取るかダンプしてデータをスレーブにコピー&lt;/li&gt;
  &lt;li&gt;スレーブで、マスタの停止あるいはダンプ時点のbinlogファイル名とポジションを指定してchange master&lt;/li&gt;
  &lt;li&gt;start slaveしてレプリケーションを開始し、マスタとスレーブの一致を確認&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という手順が必要だった。一方5.6.5では、以下の文をスレーブで実行するだけで、マスタと同じ状態までレプリケーションが行われる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql-slave&amp;gt; change master to&lt;/p&gt;

&lt;p&gt;master_host = ‘マスタのIP’,&lt;/p&gt;

&lt;p&gt;master_port=マスタのMySQLポート番号,&lt;/p&gt;

&lt;p&gt;master_user=’レプリ用ユーザ’,&lt;/p&gt;

&lt;p&gt;master_password=’レプリ用ユーザパスワード’,&lt;/p&gt;

&lt;p&gt;master_auto_position=1;&lt;/p&gt;

&lt;p&gt;mysql-slave&amp;gt; start slave;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;最後のmaster_auto_positionによって、GTIDを使って自動的にポジションが決まるので、ポジションを指定する必要がない。レプリケーションを始めた状態でshow slave status\Gを実行すると、手元の環境では以下のようになった(長いので一部の行を省略)。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql-slave&amp;gt; show slave status\G&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*\&lt;em&gt;* 1. row ***&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Slave_IO_State: Waiting for master to send event&lt;/p&gt;

&lt;p&gt;Master_Host: 127.0.0.1&lt;/p&gt;

&lt;p&gt;Master_User: root&lt;/p&gt;

&lt;p&gt;Master_Port: 3306&lt;/p&gt;

&lt;p&gt;Connect_Retry: 60&lt;/p&gt;

&lt;p&gt;Master_Log_File: mysql-bin.000001&lt;/p&gt;

&lt;p&gt;Read_Master_Log_Pos: 525&lt;/p&gt;

&lt;p&gt;Relay_Log_File: ubuntu-relay-bin.000002&lt;/p&gt;

&lt;p&gt;Relay_Log_Pos: 727&lt;/p&gt;

&lt;p&gt;Relay_Master_Log_File: mysql-bin.000001&lt;/p&gt;

&lt;p&gt;Exec_Master_Log_Pos: 525&lt;/p&gt;

&lt;p&gt;Relay_Log_Space: 924&lt;/p&gt;

&lt;p&gt;Seconds_Behind_Master: 0&lt;/p&gt;

&lt;p&gt;Master_Server_Id: 1&lt;/p&gt;

&lt;p&gt;Master_UUID: 7c3125e9-8c6d-11e1-8be6-2c4138876db7&lt;/p&gt;

&lt;p&gt;Master_Info_File: /opt/mysql3307/server-5.6/data/master.info&lt;/p&gt;

&lt;p&gt;SQL_Delay: 0&lt;/p&gt;

&lt;p&gt;SQL_Remaining_Delay: NULL&lt;/p&gt;

&lt;p&gt;Slave_SQL_Running_State: Slave has read all relay log; waiting for the slave I/O thread to update it&lt;/p&gt;

&lt;p&gt;Master_Retry_Count: 86400&lt;/p&gt;

&lt;p&gt;Retrieved_Gtid_Set: 7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:1-2&lt;/p&gt;

&lt;p&gt;Executed_Gtid_Set: 7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:1-2&lt;/p&gt;

&lt;p&gt;1 row in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;最後の2行、Retrieved_Gtid_Setはマスタから転送してきたトランザクションのGTIDで、Executed_Gtid_Setはスレーブで実行されたトランザクションのGTIDである。ここでスレーブ側のbinlogの中身を見てみると、マスタで実行された文がそのまま実行されており、マスタのGTIDも保持されていることが分かる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql-slave&amp;gt; show binlog events;&lt;/p&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Log_name&lt;/td&gt;
      &lt;td&gt;Pos&lt;/td&gt;
      &lt;td&gt;Event_type&lt;/td&gt;
      &lt;td&gt;Server_id&lt;/td&gt;
      &lt;td&gt;End_log_pos&lt;/td&gt;
      &lt;td&gt;Info&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Format_desc&lt;/td&gt;
      &lt;td&gt;13307&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;Server ver: 5.6.5-m8-log, Binlog ver: 4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;120&lt;/td&gt;
      &lt;td&gt;Previous_gtids&lt;/td&gt;
      &lt;td&gt;13307&lt;/td&gt;
      &lt;td&gt;147&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;147&lt;/td&gt;
      &lt;td&gt;Gtid&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;191&lt;/td&gt;
      &lt;td&gt;SET @@SESSION.GTID_NEXT= ‘7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:1’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;191&lt;/td&gt;
      &lt;td&gt;Query&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
      &lt;td&gt;use `test`; create table t1 (a INT)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;284&lt;/td&gt;
      &lt;td&gt;Gtid&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;328&lt;/td&gt;
      &lt;td&gt;SET @@SESSION.GTID_NEXT= ‘7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:2’&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;328&lt;/td&gt;
      &lt;td&gt;Query&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;403&lt;/td&gt;
      &lt;td&gt;BEGIN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;403&lt;/td&gt;
      &lt;td&gt;Query&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;498&lt;/td&gt;
      &lt;td&gt;use `test`; insert into t1 values (1)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql-bin.000001&lt;/td&gt;
      &lt;td&gt;498&lt;/td&gt;
      &lt;td&gt;Xid&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;525&lt;/td&gt;
      &lt;td&gt;COMMIT /* xid=18 */&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————+—–+—————-+———–+————-+——————————————————————-+&lt;/p&gt;

&lt;p&gt;8 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;なお、以下のselect文で、最後に実行された文のGTIDが参照できる。この結果がマスタとスレーブで一致していれば、データは同一であるということになる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql-master&amp;gt; SELECT @@GLOBAL.GTID_DONE;&lt;/p&gt;

&lt;p&gt;+——————————————+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@@GLOBAL.GTID_DONE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————————————+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;7C3125E9-8C6D-11E1-8BE6-2C4138876DB7:1-2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————————————+&lt;/p&gt;

&lt;p&gt;1 row in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;ここまでで確認できたのは、基本的なGTIDの機能だけだが、この他にも自動フェイルオーバーが可能なmysqlfailoverや、レプリケーションの状態を詳細に確認できるmysqlrpladminなど、興味深いツールもあるので、試してみたい。5.6ではレプリケーション関連の色々な機能追加があるので、これからも便利な機能が出てくるのではと楽しみである。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>TCP/IPの送信用ポート範囲を変更する</title>
   <link href="http://b.l0g.jp/linux/ip-local-port-range/"/>
   <updated>2012-04-17T13:00:53-07:00</updated>
   <id>http://b.l0g.jp/linux/ip-local-port-range</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/linux/ip-local-port-range/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;TCP/IPの送信用ポート範囲を変更する&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/linux/ip-local-port-range/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/linux/ip-local-port-range/&quot; data-text=&quot;TCP/IPの送信用ポート範囲を変更する&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/linux/ip-local-port-range/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linuxで、TCP/IPの送信時に使用するポートの範囲を決めるのは、net.ipv4.ip_local_port_range というカーネルパラメータ。手元のCentOSでは以下がデフォルト値になっていた。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;# sysctl net.ipv4.ip_local_port_range&lt;/p&gt;

&lt;p&gt;net.ipv4.ip_local_port_range = 32768 61000&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;これだと、32768 から 61000 までの 28232 個の中からランダムに選ばれたポートを使って、サーバ側にアクセスする。このポートが足りなくなった場合、/etc/sysctl.conf に設定を書き込んでOSを再起動することで、範囲を変えられる。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;# /etc/sysctl.conf に以下を追記&lt;/p&gt;

&lt;p&gt;net.ipv4.ip_local_port_range = 1024 65000&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;再起動&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;# sysctl net.ipv4.ip_local_port_range&lt;/p&gt;

&lt;p&gt;net.ipv4.ip_local_port_range = 1024 65000&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;これで1024から65000までのポートを使用できるようになる。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQLスレーブのmy.cnfにはreport-hostを必ず書こう</title>
   <link href="http://b.l0g.jp/mysql/report-host-in-slave-mycnf/"/>
   <updated>2012-04-12T14:06:24-07:00</updated>
   <id>http://b.l0g.jp/mysql/report-host-in-slave-mycnf</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/report-host-in-slave-mycnf/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQLスレーブのmy.cnfにはreport-hostを必ず書こう&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/report-host-in-slave-mycnf/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/report-host-in-slave-mycnf/&quot; data-text=&quot;MySQLスレーブのmy.cnfにはreport-hostを必ず書こう&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/report-host-in-slave-mycnf/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;世の中では当たり前のことなのかもしれないが、なぜか今勤めてる会社では一般的ではないのでメモしておく。&lt;/p&gt;

&lt;p&gt;MySQLでレプリケーション構成を取っている時、スレーブとなるマシンのmy.cnfには、server-idと一緒にreport-hostを必ず書いておこう。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;server-id = 一意のID&lt;/p&gt;

&lt;p&gt;report-host = ホスト名&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;(2012.10.15追記) report-hostではなくslave-hostになってたと@ishikawa84gさんから指摘を受けたので修正。&lt;/p&gt;

&lt;p&gt;これで、マスターでshow slave hostsコマンドを打つだけで、スレーブの一覧が表示される。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;show slave hosts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;+———–+—————-+——+———–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Server_id&lt;/td&gt;
      &lt;td&gt;Host&lt;/td&gt;
      &lt;td&gt;Port&lt;/td&gt;
      &lt;td&gt;Master_id&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———–+—————-+——+———–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;16800111&lt;/td&gt;
      &lt;td&gt;nanikano-dbs01&lt;/td&gt;
      &lt;td&gt;3306&lt;/td&gt;
      &lt;td&gt;16800101&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;16800112&lt;/td&gt;
      &lt;td&gt;nanikano-dbs02&lt;/td&gt;
      &lt;td&gt;3306&lt;/td&gt;
      &lt;td&gt;16800101&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;16800113&lt;/td&gt;
      &lt;td&gt;nanikano-dbs03&lt;/td&gt;
      &lt;td&gt;3306&lt;/td&gt;
      &lt;td&gt;16800101&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———–+—————-+——+———–+&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;report-hostを書いていない時にマスタからスレーブの一覧を取得しようと思うと、マスターに接続しているプロセスの一覧から、スレーブへログを渡しているものを抜き出して知るしかない。以下のように、show processlistの結果から、ユーザがレプリケーション用のもの(change masterした時に指定したユーザ)で、CommandがBinlog Dumpとなっているものがスレーブとのレプリケーション用のプロセスだと分かる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;show processlist;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;+———+———–+———————+———-+————-+——–+—————————————————————-+——————+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Id&lt;/td&gt;
      &lt;td&gt;User&lt;/td&gt;
      &lt;td&gt;Host&lt;/td&gt;
      &lt;td&gt;db&lt;/td&gt;
      &lt;td&gt;Command&lt;/td&gt;
      &lt;td&gt;Time&lt;/td&gt;
      &lt;td&gt;State&lt;/td&gt;
      &lt;td&gt;Info&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———+———–+———————+———-+————-+——–+—————————————————————-+——————+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1592850&lt;/td&gt;
      &lt;td&gt;user00001&lt;/td&gt;
      &lt;td&gt;192.168.0.203:38102&lt;/td&gt;
      &lt;td&gt;nantoka&lt;/td&gt;
      &lt;td&gt;Sleep&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1592854&lt;/td&gt;
      &lt;td&gt;user00001&lt;/td&gt;
      &lt;td&gt;192.168.0.203:38106&lt;/td&gt;
      &lt;td&gt;hogefuga&lt;/td&gt;
      &lt;td&gt;Sleep&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1592856&lt;/td&gt;
      &lt;td&gt;user00001&lt;/td&gt;
      &lt;td&gt;192.168.0.203:38108&lt;/td&gt;
      &lt;td&gt;hogefuga&lt;/td&gt;
      &lt;td&gt;Sleep&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1596335&lt;/td&gt;
      &lt;td&gt;user00001&lt;/td&gt;
      &lt;td&gt;192.168.0.203:38328&lt;/td&gt;
      &lt;td&gt;hogefuga&lt;/td&gt;
      &lt;td&gt;Sleep&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1596337&lt;/td&gt;
      &lt;td&gt;user00001&lt;/td&gt;
      &lt;td&gt;192.168.0.203:38331&lt;/td&gt;
      &lt;td&gt;nantoka&lt;/td&gt;
      &lt;td&gt;Sleep&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(中略)&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1596701&lt;/td&gt;
      &lt;td&gt;repluser&lt;/td&gt;
      &lt;td&gt;192.168.0.72:40783&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
      &lt;td&gt;Binlog Dump&lt;/td&gt;
      &lt;td&gt;80289&lt;/td&gt;
      &lt;td&gt;Has sent all binlog to slave; waiting for binlog to be updated&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1596702&lt;/td&gt;
      &lt;td&gt;repluser&lt;/td&gt;
      &lt;td&gt;192.168.0.73:49388&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
      &lt;td&gt;Binlog Dump&lt;/td&gt;
      &lt;td&gt;80289&lt;/td&gt;
      &lt;td&gt;Has sent all binlog to slave; waiting for binlog to be updated&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1596706&lt;/td&gt;
      &lt;td&gt;repluser&lt;/td&gt;
      &lt;td&gt;192.168.0.55:47014&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
      &lt;td&gt;Binlog Dump&lt;/td&gt;
      &lt;td&gt;80289&lt;/td&gt;
      &lt;td&gt;Has sent all binlog to slave; waiting for binlog to be updated&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1596707&lt;/td&gt;
      &lt;td&gt;repluser&lt;/td&gt;
      &lt;td&gt;192.168.1.81:54804&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
      &lt;td&gt;Binlog Dump&lt;/td&gt;
      &lt;td&gt;80289&lt;/td&gt;
      &lt;td&gt;Has sent all binlog to slave; waiting for binlog to be updated&lt;/td&gt;
      &lt;td&gt;NULL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———+———–+———————+———-+————-+——–+—————————————————————-+——————+&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;多数のアプリケーションサーバからの接続があったりしてコネクション数が大量で、show processlistが多くの行を返す場合などにはこれでは見づらく、show slave hostコマンドできれいに見られるのがうれしい。細かいことだけど、あとで見やすいようにしておくのは結構重要だと思う。&lt;/p&gt;

&lt;p&gt;ちなみに、report-hostは「set report-host = hoge」などとオンラインで変更することはできないので、レプリケーションのセットアップ時などセットアップの初期段階で設定しておくべし。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2012年4月18日追記&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MySQL 5.5.3よりも新しいバージョンの場合、スレーブでreport-hostを設定しなくてもマスタでshow slave hostsを実行すると一覧が表示されるようになっているようだ(&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.5/en/show-slave-hosts.html&quot; title=&quot;MySQL 5.5 Reference Manual 13.7.5.34. SHOW SLAVE HOSTS Syntax&quot; target=&quot;_blank&quot;&gt;出典&lt;/a&gt;)。5.5.3以前の場合、report-hostを書かないとそのスレーブは表示されてこない。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; show slave hosts;&lt;/p&gt;

&lt;p&gt;+———–+——+——+———–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Server_id&lt;/td&gt;
      &lt;td&gt;Host&lt;/td&gt;
      &lt;td&gt;Port&lt;/td&gt;
      &lt;td&gt;Master_id&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———–+——+——+———–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;111&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3306&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;112&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;3306&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———–+——+——+———–+&lt;/p&gt;

&lt;p&gt;2 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;ただしこの場合Hostの欄は上のように空になり、report-hostを設定するとその値がHost列に表示されるようになっている。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>cygwinのbashでclearを使いたい</title>
   <link href="http://b.l0g.jp/uncategorized/clear-on-cygwin-bash/"/>
   <updated>2012-03-06T06:31:01-08:00</updated>
   <id>http://b.l0g.jp/uncategorized/clear-on-cygwin-bash</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/uncategorized/clear-on-cygwin-bash/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;cygwinのbashでclearを使いたい&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/uncategorized/clear-on-cygwin-bash/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/uncategorized/clear-on-cygwin-bash/&quot; data-text=&quot;cygwinのbashでclearを使いたい&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/uncategorized/clear-on-cygwin-bash/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ameblo.jp/principia-ca/entry-11147827610.html&quot; target=&quot;_blank&quot;&gt;masudakさんのエントリ&lt;/a&gt; を読んで、そういえば作業用PCにCygwin入れてないなと思ってインストールしてみたら、clearコマンドがなかった。&lt;/p&gt;

&lt;p&gt;学生時代からの癖で事あるごとに「clear;ls」と入力するのが好きな自分は、clearコマンドがないと生きていけない。&lt;/p&gt;

&lt;p&gt;どうやらclearコマンドが欲しい場合は、ncursesを入れると使えるようになるようだ。Cygwinのsetup.exeで、「Utils → ncurses」をインストールするようにチェックを入れれば、めでたくclearできるようになる。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>lsコマンドのソートオプションまとめ</title>
   <link href="http://b.l0g.jp/shell/ls-sort-options/"/>
   <updated>2012-02-24T13:57:39-08:00</updated>
   <id>http://b.l0g.jp/shell/ls-sort-options</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/shell/ls-sort-options/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;lsコマンドのソートオプションまとめ&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/shell/ls-sort-options/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/shell/ls-sort-options/&quot; data-text=&quot;lsコマンドのソートオプションまとめ&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/shell/ls-sort-options/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;lsコマンドにはソートオプションがいくつかあるけど、いつもどれがどれだか分からなくなるのでメモ。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;時刻でソートするもの&lt;/h2&gt;

&lt;h3 id=&quot;c&quot;&gt;-c&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  -ltと一緒に指定すると、ctime(最終ステータス変更時刻)を表示してそれでソート
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  -lと一緒に指定すると、ctimeを表示するがファイル名でソート
&lt;/p&gt;

&lt;h3 id=&quot;u&quot;&gt;-u&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  -ltと一緒に指定すると、atime(最終アクセス時刻)を表示してそれでソート
&lt;/p&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  -lと一緒に指定すると、atimeを表示するがファイル名でソート
&lt;/p&gt;

&lt;h3 id=&quot;t&quot;&gt;-t&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  タイムスタンプでソート
&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;名前でソートするもの&lt;/h2&gt;

&lt;h3 id=&quot;x&quot;&gt;-X&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  拡張子のアルファベット順にソート
&lt;/p&gt;

&lt;h3 id=&quot;v&quot;&gt;-v&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  バージョン順にソート
&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;サイズでソートするもの&lt;/h2&gt;

&lt;h3 id=&quot;s&quot;&gt;-S&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  ファイルサイズでソート(大きいものが上)
&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;その他&lt;/h2&gt;

&lt;h3 id=&quot;u-1&quot;&gt;-U&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  ソートせずにディレクトリに置かれている順に表示
&lt;/p&gt;

&lt;h3 id=&quot;f&quot;&gt;-f&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  ソートしない
&lt;/p&gt;

&lt;h3 id=&quot;r&quot;&gt;-r&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  指定されたオプションの逆順でソート
&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;ソート以外の便利なオプション&lt;/h2&gt;

&lt;h3 id=&quot;m&quot;&gt;-m&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  コンマ区切り
&lt;/p&gt;

&lt;h3 id=&quot;q&quot;&gt;-Q&lt;/h3&gt;

&lt;p style=&quot;padding-left: 30px;&quot;&gt;
  ダブルクォーテーションでくくられる
&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQL ユーザのホストをワイルドカードで指定してもlocalhostは含まれない</title>
   <link href="http://b.l0g.jp/mysql/user-at-localhost/"/>
   <updated>2012-02-03T12:07:36-08:00</updated>
   <id>http://b.l0g.jp/mysql/user-at-localhost</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/user-at-localhost/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQL ユーザのホストをワイルドカードで指定してもlocalhostは含まれない&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/user-at-localhost/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/user-at-localhost/&quot; data-text=&quot;MySQL ユーザのホストをワイルドカードで指定してもlocalhostは含まれない&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/user-at-localhost/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;MySQLをインストールしたので、とりあえずワイルドカードでホスト名を指定してテスト用のユーザを作成。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; show databases;&lt;/p&gt;

&lt;p&gt;+——————–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Database&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;information_schema&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;mysql&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;performance_schema&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;test&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————–+&lt;/p&gt;

&lt;p&gt;5 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; grant select on hoge.* to testuser@’%’ identified by ‘password’;&lt;/p&gt;

&lt;p&gt;Query OK, 0 rows affected (0.07 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; select host,user from mysql.user;&lt;/p&gt;

&lt;p&gt;+———–+———-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;host&lt;/td&gt;
      &lt;td&gt;user&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———–+———-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td&gt;testuser&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;127.0.0.1&lt;/td&gt;
      &lt;td&gt;root&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;localhost&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;localhost&lt;/td&gt;
      &lt;td&gt;root&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———–+———-+&lt;/p&gt;

&lt;p&gt;7 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; quit&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;この状態で、MySQLがインストールされているサーバ自体からそのままtestuserでログインしようとすると、アクセスが拒否される。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;testserver$ mysql -utestuser -p&lt;/p&gt;

&lt;p&gt;Enter password:&lt;/p&gt;

&lt;p&gt;ERROR 1045 (28000): Access denied for user ‘testuser’@’localhost’ (using password: YES)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;しかし、他のサーバからアクセスしてみると、接続は成功して、hogeデータベースへのアクセスもできる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;anotherserver$ mysql -utestuser -p -h testserver hoge&lt;/p&gt;

&lt;p&gt;Enter password:&lt;/p&gt;

&lt;p&gt;Welcome to the MySQL monitor. Commands end with ; or \g.&lt;/p&gt;

&lt;p&gt;Your MySQL connection id is 8&lt;/p&gt;

&lt;p&gt;Server version: 5.5.17 MySQL Community Server (GPL)&lt;/p&gt;

&lt;p&gt;Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.&lt;/p&gt;

&lt;p&gt;Oracle is a registered trademark of Oracle Corporation and/or its&lt;/p&gt;

&lt;p&gt;affiliates. Other names may be trademarks of their respective&lt;/p&gt;

&lt;p&gt;owners.&lt;/p&gt;

&lt;p&gt;Type ‘help;’ or ‘\h’ for help. Type ‘\c’ to clear the current input statement.&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; show databases;&lt;/p&gt;

&lt;p&gt;+——————–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Database&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————–+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;information_schema&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;test&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————–+&lt;/p&gt;

&lt;p&gt;3 rows in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;「testuser@’%’」の「%」はワイルドカードなので、localhostも含めた全てのホストを指すものかと思ったら、どうやらそれは間違いのようだ。&lt;/p&gt;

&lt;p&gt;調べてみたところ、以下のような仕組み。&lt;/p&gt;

&lt;p&gt;4.8.2 MySQL への新規ユーザの追加&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/ja/adding-users.html&quot; target=&quot;_blank&quot;&gt;http://dev.mysql.com/doc/refman/5.1/ja/adding-users.html&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;monty というユーザ名と some_pass というパスワードのアカウントが 2つ存在します。どちらもフル権限を持つスーパーユーザのアカウントです。’monty’@’localhost’) というアカウントは、ローカル ホストから接続するときにだけ使用できます。一方の ‘monty’@’%’ というアカウントは、どのホストからでも接続できます。注意： monty というアカウントは両方とも、monty としてどこからでも接続できる必要があります。この localhost でアカウントを持っていない場合、monty でローカル ホストから接続したときに、mysql_install_db で作成している localhost のエントリで、匿名ユーザのアカウントとして優先になります。つまり、 monty が匿名ユーザとして扱われます。この理由は、’monty’@’%’ よりも、匿名ユーザの方が具体的な Host カラム値にあるため、匿名の方が、user テーブルのソート順で先にきます。. (user テーブルのソートに関しては、項4.7.5. 「アクセス制御の段階 1： 接続確認」 を参照してください。)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;分かったような、わからないような。参照先を見てみるとより詳しい説明がある。&lt;/p&gt;

&lt;p&gt;4.7.5. アクセス制御の段階 1： 接続確認&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.1/ja/connection-access.html&quot; target=&quot;_blank&quot;&gt;http://dev.mysql.com/doc/refman/5.1/ja/connection-access.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;長いので引用は避けるが、MySQLがuserテーブルに書かれた情報をどのようにソートして使用しているかが影響しているようだ。上のページの説明によると、以下の順でソートを行っている。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;最も具体的なホスト名(つまり、%のように明示的でない指定は後回し)&lt;/li&gt;
  &lt;li&gt;最も具体的なユーザ名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;つまり、はじめの方に出てきたユーザのテーブルは、実際には以下のように並んでいることになる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;+———–+———-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;host&lt;/td&gt;
      &lt;td&gt;user&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———–+———-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;localhost&lt;/td&gt;
      &lt;td&gt;root&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;localhost&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;127.0.0.1&lt;/td&gt;
      &lt;td&gt;root&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;%&lt;/td&gt;
      &lt;td&gt;testuser&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+———–+———-+&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;ログイン時のユーザ名とホスト名の組み合わせは、このようにソートしたテーブルを上から順に検索していき、最初に一致したもので認証が行われる。&lt;/p&gt;

&lt;p&gt;ここで、「testuser」というユーザがlocalhostからアクセスしてくると、2行目の「localhostの匿名ユーザ(userが空白 = 匿名ユーザ)」に先に一致してしまうのである。&lt;/p&gt;

&lt;p&gt;この裏付けに、パスワードなしでtestuserでログインできるようにしてみると、確かに実際には匿名ユーザとしてログインしてしまっていることがわかる。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;$ mysql -utestuser&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; select current_user();&lt;/p&gt;

&lt;p&gt;+—————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;current_user()&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+—————-+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@localhost&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+—————-+&lt;/p&gt;

&lt;p&gt;1 row in set (0.00 sec)&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;従って、「testuser@localhost」としてログインしたいなら、明示的に&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; grant select on hoge.* to testuser@’localhost’ identified by ‘password’;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;とも実行して、「localhostのtestuser」を作成する必要がある。&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;注 : セキュリティ上、ホストを「%」でワイルドカード指定するのはよろしくないので、やらないようにしましょう(汗)&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>MySQLでテーブルの行数を数える</title>
   <link href="http://b.l0g.jp/mysql/counting-row-num/"/>
   <updated>2011-12-06T07:24:45-08:00</updated>
   <id>http://b.l0g.jp/mysql/counting-row-num</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/mysql/counting-row-num/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;MySQLでテーブルの行数を数える&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/mysql/counting-row-num/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/mysql/counting-row-num/&quot; data-text=&quot;MySQLでテーブルの行数を数える&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/mysql/counting-row-num/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;テーブル内の行数を数えるのに一番簡単なのは、&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;select count(*) from ‘テーブル名’;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;と実行することだが、これだと最悪そのテーブルを総なめすることになる。&lt;/p&gt;

&lt;p&gt;こういう時はinformation schemaから情報を引く。information_schema.tablesテーブルのtable_rowsカラムが行数。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; select table_schema, table_name, table_rows from information_schema.tables&lt;/p&gt;

&lt;p&gt;-&amp;gt; where table_schema = ‘hoge’;&lt;/p&gt;

&lt;p&gt;+——————–+—————————————+————+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;table_schema&lt;/td&gt;
      &lt;td&gt;table_name&lt;/td&gt;
      &lt;td&gt;table_rows&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————–+—————————————+————+&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_FollowMe_Links&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_commentmeta&lt;/td&gt;
      &lt;td&gt;180&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_comments&lt;/td&gt;
      &lt;td&gt;60&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_ktaisession&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_links&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_options&lt;/td&gt;
      &lt;td&gt;236&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_postmeta&lt;/td&gt;
      &lt;td&gt;509&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_posts&lt;/td&gt;
      &lt;td&gt;323&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_term_relationships&lt;/td&gt;
      &lt;td&gt;39&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_term_taxonomy&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_terms&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_usermeta&lt;/td&gt;
      &lt;td&gt;31&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;hoge&lt;/td&gt;
      &lt;td&gt;wp_users&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;+——————–+—————————————+————+&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;showを使っても行数を引くことができるが、showの性質上表示させるカラムなどを細かく指定できず使いづらいこともあるので、information_schemaを引く方が好き。&lt;/p&gt;

&lt;p&gt;[sql]&lt;/p&gt;

&lt;p&gt;show table status;&lt;/p&gt;

&lt;p&gt;[/sql]&lt;/p&gt;

&lt;p&gt;なおこれらのコマンドで引ける行数は、MyISAMなどのストレージエンジンでは正確な値だが、InnoDBの場合は概算値となる。なので、InnoDBの場合はselect count(*)するしかない。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ubuntu Server 11.04マシンでUSB無線LANアダプタを使う</title>
   <link href="http://b.l0g.jp/linux/usbwlan-ubuntuserver/"/>
   <updated>2011-11-28T08:17:40-08:00</updated>
   <id>http://b.l0g.jp/linux/usbwlan-ubuntuserver</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/linux/usbwlan-ubuntuserver/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Ubuntu Server 11.04マシンでUSB無線LANアダプタを使う&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/linux/usbwlan-ubuntuserver/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/linux/usbwlan-ubuntuserver/&quot; data-text=&quot;Ubuntu Server 11.04マシンでUSB無線LANアダプタを使う&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/linux/usbwlan-ubuntuserver/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;少し前に自宅で色々と検証したりするために、&lt;a href=&quot;http://nttxstore.jp/_II_HP13476513&quot; target=&quot;_blank&quot;&gt;HP ML110 G6&lt;/a&gt;を買い、Ubuntu Server 11.04をインストールした。自宅は通信費節約のため、固定回線を引かず、外出時もそのまま使えるようにUQ WiMAXの回線を契約し、&lt;a href=&quot;http://121ware.com/product/atermstation/product/wimax/wm3500r/&quot; target=&quot;_blank&quot;&gt;Aterm WM3500R&lt;/a&gt;という無線LANルータを使っている。このため、ML110を無線LAN接続する必要がある。&lt;/p&gt;

&lt;p&gt;近くのビックカメラで、安くて小さいUSB無線LANアダプタとしてプラネックスのGW-USNano2-Mを買ってきて、無線LANルータ経由でインターネットに接続するまでのメモ。&lt;/p&gt;

&lt;p&gt;Ubuntu DesktopならGUIツールであれこれできるが、Serverなので全部CLIで。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;ドライバパッケージをダウンロード&lt;/h2&gt;

&lt;p&gt;GW-USNano2-?(MやG)は、RealtekのRTL8192CUという無線LANチップを使っているようなので、これに対応したドライバをダウンロード。&lt;a href=&quot;http://www.realtek.com.tw/downloads/&quot; target=&quot;_blank&quot;&gt;Realtekのダウンロードページ&lt;/a&gt;を開き、以下のようにリンクをたどる&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Communications Network ICs&lt;/li&gt;
  &lt;li&gt;Wireless LAN ICs&lt;/li&gt;
  &lt;li&gt;WLAN NIC&lt;/li&gt;
  &lt;li&gt;IEEE 802.11b/g/n Single-Chip&lt;/li&gt;
  &lt;li&gt;Software&lt;/li&gt;
  &lt;li&gt;RTL8192CUにチェックし、goボタン&lt;/li&gt;
  &lt;li&gt;「Linux driver for Kernel 2.6.38(and earlier)」から、RTL8192CU_linux_v3.1.2590.20110922.zipをダウンロード&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-1&quot;&gt;ドライバのインストール&lt;/h2&gt;

&lt;p&gt;パッケージを展開し、コンパイル、インストール&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$ unzip RTL8192CU_linux_v3.1.2590.20110922.zip&lt;/p&gt;

&lt;p&gt;$ cd RTL8192CU_8188CUS_8188CE-VAU_linux_v3.1.2590.20110922/&lt;/p&gt;

&lt;p&gt;$ sudo sh install.sh&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;※ Ubuntu Serverをインストールした直後は、makeやgccがインストールされないので、事前にsudo apt-get install make gccしておく。&lt;/p&gt;

&lt;p&gt;インストールされたら、ドライバモジュールがロードされていることを確認&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$ lsmod&lt;/p&gt;

&lt;p&gt;Module Size Used by&lt;/p&gt;

&lt;p&gt;nls_utf8 12557 0&lt;/p&gt;

&lt;p&gt;isofs 40283 0&lt;/p&gt;

&lt;p&gt;vesafb 13761 1&lt;/p&gt;

&lt;p&gt;8192cu 508081 0 ← ロードされている&lt;/p&gt;

&lt;p&gt;lp 17789 0&lt;/p&gt;

&lt;p&gt;parport 46458 1 lp&lt;/p&gt;

&lt;p&gt;usbhid 46956 0&lt;/p&gt;

&lt;p&gt;hid 91020 1 usbhid&lt;/p&gt;

&lt;p&gt;tg3 141750 0&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;lan&quot;&gt;無線LAN設定&lt;/h2&gt;

&lt;p&gt;WPA認証情報をファイルに書き込む。SSIDとキーは使用している無線LANアクセスポイントのものに置き換える。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$ wpa_passphrase [SSID] [キー] &amp;gt; wpa_supplicant.conf&lt;/p&gt;

&lt;p&gt;$ sudo mv wpa_supplicant.conf /etc/wpa_supplicant/&lt;/p&gt;

&lt;p&gt;$ sudo chown root:root /etc/wpa_supplicant/wpa_supplicant.conf&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;認証の設定を/etc/network/interfaceに設定を書き込む。DHCPを使用する場合の例。3行目のSSIDは上と同じく置き換えること。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;auto wlan0&lt;/p&gt;

&lt;p&gt;iface wlan0 inet dhcp&lt;/p&gt;

&lt;p&gt;wpa-essid [SSID]&lt;/p&gt;

&lt;p&gt;wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;マシンを再起動&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;$ sudo reboot&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;再起動後、wlan0というインタフェースができており、ネットワークに接続できればOK。iwconfigコマンドで無線インタフェースの状態を確認できる。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;lo no wireless extensions.&lt;/p&gt;

&lt;p&gt;eth0 no wireless extensions.&lt;/p&gt;

&lt;p&gt;wlan0 IEEE 802.11bgn ESSID:”aterm-xxxxxx-g” Nickname:”&amp;lt;WIFI@REALTEK&amp;gt;”&lt;/p&gt;

&lt;p&gt;Mode:Managed Frequency:2.412 GHz Access Point: xx:xx:xx:xx:xx:xx&lt;/p&gt;

&lt;p&gt;Bit Rate:150 Mb/s Sensitivity:0/0&lt;/p&gt;

&lt;p&gt;Retry:off RTS thr:off Fragment thr:off&lt;/p&gt;

&lt;p&gt;Power Management:off&lt;/p&gt;

&lt;p&gt;Link Quality=47/100 Signal level=47/100 Noise level=0/100&lt;/p&gt;

&lt;p&gt;Rx invalid nwid:0 Rx invalid crypt:0 Rx invalid frag:0&lt;/p&gt;

&lt;p&gt;Tx excessive retries:0 Invalid misc:0 Missed beacon:0&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>historyに時刻を記録する</title>
   <link href="http://b.l0g.jp/shell/history-with-timestamp/"/>
   <updated>2011-11-24T16:05:53-08:00</updated>
   <id>http://b.l0g.jp/shell/history-with-timestamp</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/shell/history-with-timestamp/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;historyに時刻を記録する&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/shell/history-with-timestamp/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/shell/history-with-timestamp/&quot; data-text=&quot;historyに時刻を記録する&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/shell/history-with-timestamp/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;bash 3.0以上(最近のLinuxは大抵3.0以上)を使用している場合は、「HISTTIMEFORMAT」というシェル変数に時刻のフォーマットを入れることで、historyコマンドの実行結果(ファイル)にコマンドだけではなく時刻も記録できる。以下はhistoryコマンドの実行結果の例。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;100 2011-11-22 10:16:59 ls&lt;/p&gt;

&lt;p&gt;101 2011-11-22 10:17:03 cd /var/log/&lt;/p&gt;

&lt;p&gt;102 2011-11-22 10:17:04 ls&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;ホームディレクトリ以下の.bashrcや/etc/profile(全ユーザに適用したい場合)に&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;HISTTIMEFORMAT=’%Y-%m-%d %T ‘&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;と書いておけばよい。時刻のフォーマットはdateコマンドと同じものが使えるようだ(man dateを参照)。&lt;/p&gt;

&lt;p&gt;なお、historyコマンドでは上記のようなフォーマットが有効だが、.bash_historyファイルには、&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;#1321924619&lt;/p&gt;

&lt;p&gt;ls&lt;/p&gt;

&lt;p&gt;#1321924623&lt;/p&gt;

&lt;p&gt;cd /var/log/&lt;/p&gt;

&lt;p&gt;#1321924624&lt;/p&gt;

&lt;p&gt;ls&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;のように、UNIX時刻が付加される形で記録される。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>携帯キャリアの使用するIPアドレス帯一覧</title>
   <link href="http://b.l0g.jp/uncategorized/carrier-ipaddress/"/>
   <updated>2011-09-30T15:30:40-07:00</updated>
   <id>http://b.l0g.jp/uncategorized/carrier-ipaddress</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/uncategorized/carrier-ipaddress/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;携帯キャリアの使用するIPアドレス帯一覧&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/uncategorized/carrier-ipaddress/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/uncategorized/carrier-ipaddress/&quot; data-text=&quot;携帯キャリアの使用するIPアドレス帯一覧&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/uncategorized/carrier-ipaddress/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;携帯キャリアのIPアドレス帯を調べる機会があったので、メモとして載せておく。ソフトバンクは2011年9月30日からサイトのアドレスが変わっているので注意。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;auフィーチャーフォン&lt;br /&gt;
&lt;a href=&quot;http://www.au.kddi.com/ezfactory/tec/spec/ezsava_ip.html&quot; target=&quot;_blank&quot;&gt;http://www.au.kddi.com/ezfactory/tec/spec/ezsava_ip.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;auフィーチャーフォンメール&lt;br /&gt;
&lt;a href=&quot;http://www.au.kddi.com/service/email/support/chui/shiyo/iip_ichiran.html &quot; target=&quot;_blank&quot;&gt;http://www.au.kddi.com/service/email/support/chui/shiyo/iip_ichiran.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;docomoフィーチャーフォン&lt;br /&gt;
&lt;a href=&quot;http://www.nttdocomo.co.jp/service/developer/make/content/ip/ &quot; target=&quot;_blank&quot;&gt;http://www.nttdocomo.co.jp/service/developer/make/content/ip/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;docomoスマートフォン(spモード)&lt;br /&gt;
&lt;a href=&quot;http://www.nttdocomo.co.jp/service/developer/smart_phone/technical_info/etc/index.html &quot; target=&quot;_blank&quot;&gt;http://www.nttdocomo.co.jp/service/developer/smart_phone/technical_info/etc/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;softbankフィーチャーフォン&lt;br /&gt;
&lt;a href=&quot;http://creation.mb.softbank.jp/mc/tech/tech_web/web_ipaddress.html &quot; target=&quot;_blank&quot;&gt;http://creation.mb.softbank.jp/mc/tech/tech_web/web_ipaddress.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;softbankフィーチャーフォンメール&lt;br /&gt;
&lt;a href=&quot;http://creation.mb.softbank.jp/mc/tech/tech_mail/mail_ipaddress.html &quot; target=&quot;_blank&quot;&gt;http://creation.mb.softbank.jp/mc/tech/tech_mail/mail_ipaddress.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;softbankスマートフォン&lt;br /&gt;
&lt;a href=&quot;https://www.support.softbankmobile.co.jp/partner/home_tech1/index.cfm &quot; target=&quot;_blank&quot;&gt;https://www.support.softbankmobile.co.jp/partner/home_tech1/index.cfm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;softbankスマートフォンメール&lt;br /&gt;
&lt;a href=&quot;https://www.support.softbankmobile.co.jp/partner/home_tech2/index.cfm &quot; target=&quot;_blank&quot;&gt;https://www.support.softbankmobile.co.jp/partner/home_tech2/index.cfm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;willcom&lt;br /&gt;
&lt;a href=&quot;http://www.willcom-inc.com/ja/service/contents_service/create/center_info/ &quot; target=&quot;_blank&quot;&gt;http://www.willcom-inc.com/ja/service/contents_service/create/center_info/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;emobile&lt;br /&gt;
 &lt;a href=&quot;http://developer.emnet.ne.jp/ipaddress.html&quot; target=&quot;_blank&quot;&gt;http://developer.emnet.ne.jp/ipaddress.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CentOSで各種ビープ音を鳴らさないようにする</title>
   <link href="http://b.l0g.jp/linux/beep-centos/"/>
   <updated>2011-08-18T16:59:08-07:00</updated>
   <id>http://b.l0g.jp/linux/beep-centos</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/linux/beep-centos/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;CentOSで各種ビープ音を鳴らさないようにする&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/linux/beep-centos/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/linux/beep-centos/&quot; data-text=&quot;CentOSで各種ビープ音を鳴らさないようにする&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/linux/beep-centos/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;&lt;strong&gt;＜ログイン時＞&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;Xを起動するようにしていると(ランレベル5)、ログイン画面表示時にビープ音が鳴る。&lt;/p&gt;

&lt;p&gt;「システム(System)」→「管理(Administration)」→「ログイン画面(Login Screen)」から「アクセシビリティ(Accessibility)」タブを開き、「ログイン画面を表示した時」のチェックを外す。&lt;/p&gt;

&lt;p&gt;ログアウトし、次にログイン画面が表示されるときには、ビープ音は鳴らないようになっているはず。&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;&lt;strong&gt;＜ターミナル使用時＞&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;ターミナルを使用している時にタブを使ったりすると、ビープ音が鳴ることがある。&lt;/p&gt;

&lt;p&gt;/etc/inputrc に以下の行を追加する(コメントアウトされた状態で既に記述があるはず)&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;set bell-style none&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;ログインしなおすと、設定が有効になりビープ音は鳴らなくなる。&lt;/p&gt;

&lt;h4 id=&quot;vi&quot;&gt;&lt;strong&gt;＜vi＞&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;vi(vim)を使用していると、コマンドを間違えた時などにビープ音が鳴る。&lt;/p&gt;

&lt;p&gt;viの設定ファイル(ホームディレクトリの.vimrcや/etc/skel/.vimrcなど)に以下の行を追加する。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;set visualbell&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;記述してからviを起動すると、ビープ音は鳴らなくなる。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;&lt;strong&gt;＜全部のビープ音を鳴らないようにする＞&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;ビープ音は、pcspkrというモジュールを経由して、マザーボード上のスピーカを動かして鳴らしている。このモジュール自体をロードしないようにしてしまえば、ビープ音は鳴らない。&lt;/p&gt;

&lt;p&gt;/etc/modprobe.d/blacklist ファイルに以下の行を追加する。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;blacklist pcspkr&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h4 id=&quot;vmware-player&quot;&gt;&lt;strong&gt;＜VMware Playerを使用している場合＞&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;VMware Playerを使用している時には、ゲストOSでビープ音が鳴るタイミングで、VMware Playerを通じて、ホストマシンのビープ音が鳴ってしまう。これを鳴らさないようにするには、VMware側の設定でビープを無効にしてしまう。&lt;/p&gt;

&lt;p&gt;C:\Users(ユーザ名)\AppData\Roaming\VMware\preferences.ini ファイルと、対象になる仮想マシンの設定ファイル(.vmx)に以下の行を追加する。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;mks.noBeep = “TRUE”&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;出典 : &lt;a href=&quot;http://kb.vmware.com/kb/1664&quot; target=&quot;_blank&quot;&gt;VMwareのKnowledge base&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;windows&quot;&gt;&lt;strong&gt;＜Windowsでビープ音を鳴らさないようにする＞&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;ついでにWindowsの場合も。ビープ音を鳴らすドライバを無効にしてしまう。以下、Windows 7での例。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;コントロールパネルなどから「デバイスマネージャ」を起動&lt;/li&gt;
  &lt;li&gt; 「表示」→「非表示のデバイスの表示」&lt;/li&gt;
  &lt;li&gt;ツリーから「プラグアンドプレイではないドライバ」→「Beep」を右クリックし、プロパティ&lt;/li&gt;
  &lt;li&gt; 「ドライバー」タブで「停止」を選択&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>bshでのクォーテーションの入れ子</title>
   <link href="http://b.l0g.jp/shell/bsh-nested-quotation/"/>
   <updated>2011-08-03T14:30:47-07:00</updated>
   <id>http://b.l0g.jp/shell/bsh-nested-quotation</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/shell/bsh-nested-quotation/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;bshでのクォーテーションの入れ子&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/shell/bsh-nested-quotation/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/shell/bsh-nested-quotation/&quot; data-text=&quot;bshでのクォーテーションの入れ子&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/shell/bsh-nested-quotation/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;特殊文字(？など)をそのまま文字として扱いたい場合などに、シングルクォーテーション(‘)やダブルクォーテーション(“)で文字をくくる。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「”」でくくった文字列は、その中に特殊文字が含まれているならそれを展開する。&lt;/li&gt;
  &lt;li&gt;「’」でくくった文字列は、その中に特殊文字が含まれていてもそれを展開せず、そのまま表示する。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;[hoge@symf test]$ abc=3&lt;/p&gt;

&lt;p&gt;↑ abcという変数に3を代入&lt;/p&gt;

&lt;p&gt;[hoge@symf test]$ echo $abc&lt;/p&gt;

&lt;p&gt;3&lt;/p&gt;

&lt;p&gt;↑ abcという変数の中身を表示&lt;/p&gt;

&lt;p&gt;[hoge@symf test]$ echo “$abc”&lt;/p&gt;

&lt;p&gt;3&lt;/p&gt;

&lt;p&gt;↑ 「”」は特殊文字を展開するので変数として扱われるので、上に同じ&lt;/p&gt;

&lt;p&gt;[hoge@symf test]$ echo ‘$abc’&lt;/p&gt;

&lt;p&gt;$abc&lt;/p&gt;

&lt;p&gt;↑ 「’」は特殊文字をそのまま表示する&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;クォーテーションを入れ子にする際には、シングルとダブルで少しやり方が違う。「man bash」の「クォート」の項には以下のように書かれている。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;シングルクォートで文字を囲むと、クォート内部のそれぞれの文字は文字としての値を 保持 します。シングルクォートの間にシングルクォートを置くことはできません。これはバックスラッシュを前に付けても同じです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;ダブルクォートで文字を囲むとクォート内部の全ての文字は文字としての値を保持しま すが、 $, ‘, \ は例外となります。 $ と ‘ はダブルクォートの内部でも特殊な意味を失いません。バックスラッシュの場合は、次の文字が $, ‘, “, \,のいずれかである 場合に限り特殊な意味を失いません。前にバックスラッシュを付ければ、ダブルクォート文字をダブルクォートによるクォートの内部でクォートできます。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;つまりこういうこと。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;[hoge@symf test]$ ssh server “psql -c &quot;create database test with ENCODING = ‘UTF8’ ;&quot; “&lt;/p&gt;

&lt;p&gt;↑ 「”」の中に「&quot;」があるので、これは成功&lt;/p&gt;

&lt;p&gt;[hoge@symf test]$ ssh server ‘psql -c &quot;create database test with ENCODING = ‘UTF8’ ;&quot; ‘&lt;/p&gt;

&lt;p&gt;↑ 「’」の中では「\」をつけてもダメなので、これは失敗&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;create databaseじゃなくてcreatedbを使えば、クォートを入れ子にしなくてもいいって？あくまで例ですから (`・ω・´)ｷﾘｯ&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>shのwhileループでファイルを読み、中でsshを実行すると1回しかループしない</title>
   <link href="http://b.l0g.jp/dev/ssh-inside-while/"/>
   <updated>2011-03-18T07:39:57-07:00</updated>
   <id>http://b.l0g.jp/dev/ssh-inside-while</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/ssh-inside-while/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;shのwhileループでファイルを読み、中でsshを実行すると1回しかループしない&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/ssh-inside-while/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/ssh-inside-while/&quot; data-text=&quot;shのwhileループでファイルを読み、中でsshを実行すると1回しかループしない&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/ssh-inside-while/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;シェル(sh)スクリプトネタ。&lt;/p&gt;

&lt;p&gt;while 文で以下のように指定すると、行ごとにファイルを読み込むことができる。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;#!/bin/sh&lt;/p&gt;

&lt;p&gt;# ファイルを1行ずつ読み込んで表示&lt;/p&gt;

&lt;p&gt;TESTFILE=./hoge.txt&lt;/p&gt;

&lt;p&gt;while read line&lt;/p&gt;

&lt;p&gt;do&lt;/p&gt;

&lt;p&gt;echo $line&lt;/p&gt;

&lt;p&gt;done &amp;lt; $TESTFILE&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;しかし、 while ループの中で ssh や rsh を実行すると、読み込むファイルが複数行あっても、1行目しか処理されない。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;#!/bin/sh&lt;/p&gt;

&lt;p&gt;# TESTFILEが複数行あっても1行目のみ処理されてループ終了&lt;/p&gt;

&lt;p&gt;while read line&lt;/p&gt;

&lt;p&gt;do&lt;/p&gt;

&lt;p&gt;ssh 192.168.0.1 touch $line&lt;/p&gt;

&lt;p&gt;done &amp;lt; $TESTFILE&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;SSH を実行すると、標準入力がそちらに振り向けられるため、read で読んだ1行のみならず、ファイル全体が SSH に渡されてしまう。従って、SSH を実行した後はもう読める行がないので while ループは1回で終了してしまう。&lt;/p&gt;

&lt;p&gt;これを防ぐには、ssh に -n オプションを付け、/dev/null をリダイレクトし、標準入力をリダイレクトしないようにする。&lt;/p&gt;

&lt;p&gt;[bash]&lt;/p&gt;

&lt;p&gt;#!/bin/sh&lt;/p&gt;

&lt;p&gt;# TESTFILEが複数行あればその行数分処理が実行される&lt;/p&gt;

&lt;p&gt;while read line&lt;/p&gt;

&lt;p&gt;do&lt;/p&gt;

&lt;p&gt;ssh -n 192.168.0.1 touch $line&lt;/p&gt;

&lt;p&gt;done &amp;lt; $TESTFILE&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;

&lt;p&gt;なおこれは rsh コマンドでも同じ仕様になっているようだ。&lt;/p&gt;

&lt;p&gt;なぜ1行目だけで終わってしまうのか分からずうんうんうなってたら、この本に書いてあった。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ディレクトリをディレクトリにマウント</title>
   <link href="http://b.l0g.jp/dev/mounting-directory-on-directory/"/>
   <updated>2011-02-23T15:42:16-08:00</updated>
   <id>http://b.l0g.jp/dev/mounting-directory-on-directory</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/mounting-directory-on-directory/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;ディレクトリをディレクトリにマウント&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/mounting-directory-on-directory/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/mounting-directory-on-directory/&quot; data-text=&quot;ディレクトリをディレクトリにマウント&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/mounting-directory-on-directory/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linuxで、ディスクデバイスではなく、ディレクトリをディレクトリにマウントしたい時は&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;mount –bind マウントしたいディレクトリ マウントポイント&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;fstabに書いてしまうときは以下のように書く。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;マウントしたいディレクトリ マウントポイント none bind 0 0&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;例えば /home を /hoge/home としてマウントしたい時は&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;/home /hoge/home none bind 0 0&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;なお、マウントしたいディレクトリ(上の例では/hoge)よりも後にこの行を書かないと、マウントできないので注意。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>sarコマンドでシステムのボトルネックを探る(2)</title>
   <link href="http://b.l0g.jp/dev/finding-bottleneck-with-sar2/"/>
   <updated>2011-02-21T14:07:48-08:00</updated>
   <id>http://b.l0g.jp/dev/finding-bottleneck-with-sar2</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/finding-bottleneck-with-sar2/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;sarコマンドでシステムのボトルネックを探る(2)&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/finding-bottleneck-with-sar2/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/finding-bottleneck-with-sar2/&quot; data-text=&quot;sarコマンドでシステムのボトルネックを探る(2)&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/finding-bottleneck-with-sar2/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CPUの処理の状況を調べるためには、sar (sar -u)が有効であることを&lt;a href=&quot;http://b.l0g.jp/dev/finding-bottleneck-with-sar1/&quot; target=&quot;_blank&quot;&gt;前のエントリ&lt;/a&gt;で書いた。次はメモリの使用状況を調べてみる。まず見てみるのは、メモリとスワップの使用状況を示す sar -r の結果である。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;[doublemarket@hoge ~]$ sar -r&lt;/p&gt;

&lt;p&gt;Linux 2.6.18-194.8.1.el5 (hoge) 2011年02月15日&lt;/p&gt;

&lt;p&gt;00時00分01秒 kbmemfree kbmemused %memused kbbuffers kbcached kbswpfree kbswpused %swpused kbswpcad&lt;/p&gt;

&lt;p&gt;00時10分01秒 12964 497568 97.46 30880 107440 1984336 63940 3.12 16392&lt;/p&gt;

&lt;p&gt;00時20分01秒 13064 497468 97.44 30972 107376 1984336 63940 3.12 16392&lt;/p&gt;

&lt;p&gt;00時30分01秒 12692 497840 97.51 31092 107236 1984336 63940 3.12 16392&lt;/p&gt;

&lt;p&gt;:&lt;/p&gt;

&lt;p&gt;:&lt;/p&gt;

&lt;p&gt;20時20分01秒 43756 466776 91.43 45624 139552 1984336 63940 3.12 16288&lt;/p&gt;

&lt;p&gt;20時30分01秒 27008 483524 94.71 46420 147608 1984336 63940 3.12 16288&lt;/p&gt;

&lt;p&gt;20時40分01秒 22664 487868 95.56 46840 148920 1984336 63940 3.12 16288&lt;/p&gt;

&lt;p&gt;20時50分01秒 22300 488232 95.63 47192 148968 1984336 63940 3.12 16288&lt;/p&gt;

&lt;p&gt;平均値: 84267 426265 83.49 32592 129944 1984336 63940 3.12 16300&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;それぞれの列の意味は以下の通り。&lt;/p&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;kbmemfree&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  物理メモリの未使用KB。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;kbmemused&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  物理メモリの使用済みKB。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;%memused&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  物理メモリの使用率。Linuxでは、使用されていないメモリ領域をファイルシステムキャッシュ領域として使用するので、通常はほとんどfree部分はないものと考えてよい。従って、常に90数%といった高い使用率になる。実際にアプリケーションの動作に使われているメモリの量は、下の指標を確認する必要がある。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;kbbuffers&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  カーネルがバッファ領域として使用しているメモリ量のKB。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;kbcached&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  カーネルがキャッシュとして使用しているメモリ量のKB。kbmemusedからkbbufferesとkbcachedを引いた値が、実際にアプリケーションに割り当てられているメモリ量ということになる。逆に言えば、kbbufferesとkbcachedの容量が、kbmemusedの大部分を占めているようなら、アプリケーションにとってメモリ不足とは言えないということになる。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;kbswpfree&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  スワップ領域の未使用量KB。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;kbswpused&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  スワップ領域の使用済みKB。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;%swpused&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  スワップ領域の使用量。通常ほとんど0だが、物理メモリが不足してくると使用率が上がってくる。数%であれば実質的にシステムの動作には影響がない場合が多いが、あまり多いようだと、スワップ領域へのアクセスが頻発している可能性もあり、システム全体のスループットを落とすことがある。%swpusedが大きく、かつsar -uのiowaitの値も大きい場合、ほぼ間違いなくスワップ領域へのアクセスでスローダウンしているので、物理メモリの増設などのメモリ不足解消策を取る必要がある。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;kbswpcad&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  何の指標かよく分からなかったが、manページによると、一旦スワップ領域へ飛ばされたものの(スワップアウト)、スワップ領域からメモリに戻され(スワップイン)、かつまだスワップ領域にデータが残っている、というデータの量とのこと。
&lt;/dd&gt;

&lt;p&gt;各列の値の傾向を見ると、上記のようにメモリ不足なのかどうかの手がかりが得られる。その他に詳しい情報を見たいときは、以下のオプションも用意されている。&lt;/p&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;sar -R&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  メモリ上のページの使用状況。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;sar -W&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  スワップの発生状況。ページイン(スワップ領域から物理メモリへのページの移動)とページアウト(物理メモリからスワップ領域へのページの移動)がどの程度発生したのかを確認できる。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;sar -B&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  ページングの状況。ページイン・ページアウトされたデータ容量、ページフォルトの回数、メジャーなページフォルトの回数をそれぞれ確認できる。
&lt;/dd&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>sarコマンドでシステムのボトルネックを探る(1)</title>
   <link href="http://b.l0g.jp/dev/finding-bottleneck-with-sar1/"/>
   <updated>2011-02-17T13:59:39-08:00</updated>
   <id>http://b.l0g.jp/dev/finding-bottleneck-with-sar1</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/finding-bottleneck-with-sar1/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;sarコマンドでシステムのボトルネックを探る(1)&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/finding-bottleneck-with-sar1/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/finding-bottleneck-with-sar1/&quot; data-text=&quot;sarコマンドでシステムのボトルネックを探る(1)&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/finding-bottleneck-with-sar1/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/dev/top-loadaverag/&quot; target=&quot;_blank&quot;&gt;前回のエントリ&lt;/a&gt;では、システムのレスポンスが悪化している場合、まずとっかかりとしてtopコマンドを実行し、ロードアベレージを確認する方法を書いた。さらに踏み込んで、何が負荷の原因なのかを探るために、sarコマンドを使う方法について書く。&lt;/p&gt;

&lt;p&gt;sarコマンドをオプションをつけずに実行すると、以下のような出力が得られる。ファイルを指定しないと、コマンドを実行した当日の0:00から直前までの10分おきの情報が表示される。過去の情報は/var/log/saディレクトリ以下に保存されており、「sar -f sa07」などと指定すると、そのファイルに保存された情報が閲覧できる。saの後の数字は日付を表している。&lt;/p&gt;

&lt;p&gt;sarを実行してもコマンドが見つからない場合、sysstatパッケージがインストールされていないので、インストールすべし。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;[doublemarket@hoge ~]$ sar&lt;/p&gt;

&lt;p&gt;Linux 2.6.18-194.8.1.el5 (hoge) 2011年02月15日&lt;/p&gt;

&lt;p&gt;00時00分01秒 CPU %user %nice %system %iowait %steal %idle&lt;/p&gt;

&lt;p&gt;00時10分01秒 all 0.05 0.00 0.08 0.02 0.00 99.85&lt;/p&gt;

&lt;p&gt;00時20分01秒 all 0.03 0.00 0.08 0.02 0.00 99.88&lt;/p&gt;

&lt;p&gt;00時30分01秒 all 0.07 0.00 0.11 0.02 0.00 99.79&lt;/p&gt;

&lt;p&gt;:&lt;/p&gt;

&lt;p&gt;:&lt;/p&gt;

&lt;p&gt;20時00分01秒 all 0.03 0.00 0.06 0.00 0.00 99.90&lt;/p&gt;

&lt;p&gt;20時10分01秒 all 0.06 0.00 0.11 0.03 0.00 99.80&lt;/p&gt;

&lt;p&gt;20時20分01秒 all 0.16 0.00 0.14 0.03 0.00 99.67&lt;/p&gt;

&lt;p&gt;20時30分01秒 all 1.11 0.00 0.27 0.12 0.00 98.50&lt;/p&gt;

&lt;p&gt;20時40分01秒 all 0.08 0.00 0.12 0.05 0.00 99.76&lt;/p&gt;

&lt;p&gt;平均値: all 0.08 0.00 0.10 0.09 0.00 99.73&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;ここで得られる結果は、sar -uと同じものである。それぞれの列の意味は以下の通り。&lt;/p&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;user&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  ユーザプログラムの実行に使用されたCPUリソースの割合
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;nice&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  niceによる優先度を処理するために使用されたCPUリソースの割合
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;system&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  カーネルが使用したCPUリソースの割合
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;iowait&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  I/O待ちの割合
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;idle&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  I/O待ち以外でCPUが待ち状態だった割合(何もしていない時間)
&lt;/dd&gt;

&lt;p&gt;なお、マルチCPUの環境の場合ここに表示されているのは、全CPUの合算使用率になっている。それぞれのCPUの使用率を確認したい場合、「sar -P ALL」を実行する。意外と処理が特定のCPUに偏っていたりするので、こちらも確認してみた方がよい。&lt;/p&gt;

&lt;p&gt;→ sarコマンドの実行結果からシステムの負荷状況に関して、以下の傾向がつかめる。&lt;/p&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;userの値だけが高い(他の値は低いまま)&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  CPUリソースを必要とするアプリケーションが動作している。&lt;br /&gt; topやps auwxなどのコマンドでプロセスごとのCPU使用率を調べ、無限ループなどの不具合によるCPU使用率の上昇でないかなど、異常を確認。単に処理が重くなっているだけなら、スケールアップ(CPUを高速化)、スケールアウト(マシンを増設)を検討する。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;iowaitの値が高い&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  そのマシンに求められる処理に対して、ハードディスクの速度が追いついていない。アプリケーションやミドルウェア(特にデータベースなど)のキャッシュの仕組みを見直したり、読み書きに使う物理的なディスクを分散させるなどして、なるべくディスクの読み書きが発生しない方法を考える。それでも高いままなら、より高速なディスクを使うしかない。なおたいていの場合は&lt;br /&gt; ・アプリケーション自体がディスクにアクセスする速度が遅い&lt;br /&gt; ・メモリが不足していてスワップ領域(つまりディスク)へのアクセスが頻発していて遅い&lt;br /&gt; の2つに問題を分けることができる。このうちのどちらかという判断は、sar -rの結果などを見る必要がある。
&lt;/dd&gt;

&lt;dt style=&quot;padding-left: 30px;&quot;&gt;
  &lt;strong&gt;systemの値が高い&lt;/strong&gt;
&lt;/dt&gt;

&lt;dd style=&quot;padding-left: 60px;&quot;&gt;
  仕組み的にいえば、コンテキストスイッチがたくさん発生していると値が上がるはずなので、必要以上にたくさんのプログラムを並列に処理しすぎていると、この値が異常に上がるということになるが、よく分からない。
&lt;/dd&gt;

&lt;p&gt;sarコマンドには、メモリやディスク、ネットワークなどに関する情報が得られるよう、他にも色々なオプションがある。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>topコマンドでロードアベレージを見る</title>
   <link href="http://b.l0g.jp/dev/top-loadaverag/"/>
   <updated>2011-02-15T15:58:48-08:00</updated>
   <id>http://b.l0g.jp/dev/top-loadaverag</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/top-loadaverag/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;topコマンドでロードアベレージを見る&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/top-loadaverag/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/top-loadaverag/&quot; data-text=&quot;topコマンドでロードアベレージを見る&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/top-loadaverag/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Linuxにおいて、システムの全体的な負荷状況を知りたい時、リアルタイムの状況を知るにはtopコマンド、ある程度の期間に渡る傾向をつかむにはsar(sysstat)の結果を確認するのが一般的だろう。&lt;/p&gt;

&lt;p&gt;そのサーバ上で動作するアプリケーションの動作が遅いなどといったパフォーマンス劣化がある時、まず最初に見るべきがロードアベレージの値。これは「CPUの処理を待っているタスクの数」であり、ほとんど何も処理を行っていない時には0になる。&lt;/p&gt;

&lt;p&gt;topコマンドの表示内容&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;top – 16:04:44 up 15 days, 21:40, 2 users, load average: 0.00, 0.00, 0.00&lt;/p&gt;

&lt;p&gt;Tasks: 108 total, 2 running, 105 sleeping, 0 stopped, 1 zombie&lt;/p&gt;

&lt;p&gt;Cpu(s): 0.0% us, 0.0% sy, 0.0% ni, 100.0% id, 0.0% wa, 0.0% hi, 0.0% si&lt;/p&gt;

&lt;p&gt;Mem: 8113608k total, 8082584k used, 31024k free, 69652k buffers&lt;/p&gt;

&lt;p&gt;Swap: 8385920k total, 352k used, 8385568k free, 6008888k cached&lt;/p&gt;

&lt;p&gt;PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND&lt;/p&gt;

&lt;p&gt;1 root 16 0 1848 552 472 S 0.0 0.0 0:01.32 init&lt;/p&gt;

&lt;p&gt;2 root RT 0 0 0 0 S 0.0 0.0 0:17.52 migration/0&lt;/p&gt;

&lt;p&gt;3 root 34 19 0 0 0 S 0.0 0.0 0:00.40 ksoftirqd/0&lt;/p&gt;

&lt;p&gt;4 root RT 0 0 0 0 S 0.0 0.0 0:15.31 migration/1&lt;/p&gt;

&lt;p&gt;5 root 34 19 0 0 0 S 0.0 0.0 0:00.32 ksoftirqd/1&lt;/p&gt;

&lt;p&gt;6 root RT 0 0 0 0 S 0.0 0.0 0:11.21 migration/2&lt;/p&gt;

&lt;p&gt;7 root 34 19 0 0 0 S 0.0 0.0 0:00.17 ksoftirqd/2&lt;/p&gt;

&lt;p&gt;8 root RT 0 0 0 0 S 0.0 0.0 0:15.26 migration/3&lt;/p&gt;

&lt;p&gt;9 root 34 19 0 0 0 S 0.0 0.0 0:00.25 ksoftirqd/3&lt;/p&gt;

&lt;p&gt;10 root 5 -10 0 0 0 S 0.0 0.0 0:00.00 events/0&lt;/p&gt;

&lt;p&gt;11 root 5 -10 0 0 0 S 0.0 0.0 0:00.00 events/1&lt;/p&gt;

&lt;p&gt;12 root 5 -10 0 0 0 S 0.0 0.0 0:00.00 events/2&lt;/p&gt;

&lt;p&gt;13 root 5 -10 0 0 0 S 0.0 0.0 0:00.00 events/3&lt;/p&gt;

&lt;p&gt;14 root 7 -10 0 0 0 S 0.0 0.0 0:00.00 khelper&lt;/p&gt;

&lt;p&gt;15 root 15 -10 0 0 0 S 0.0 0.0 0:00.00 kacpid&lt;/p&gt;

&lt;p&gt;95 root 5 -10 0 0 0 S 0.0 0.0 0:00.00 kblockd/0&lt;/p&gt;

&lt;p&gt;96 root 5 -10 0 0 0 S 0.0 0.0 0:00.00 kblockd/1&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;1行目の右端に表示されているのがロードアベレージの値。前述の通りCPUの処理を待っているタスクの数がロードアベレージなので、値が大きければ大きいほどCPUの処理を待っているタスクが多いということになり、それだけサーバのレスポンスが落ちることになる。ただし、単に計算を待っているだけではなく、IOの処理を待っている場合もこの値が大きくなるので、ロードアベレージが大きいことが即CPUが遅いことになるわけではない。CPUそのもの、メモリ、ディスク、それ以外、の何が原因で遅いか調査する必要がある。&lt;/p&gt;

&lt;p&gt;なお、topでのロードアベレージの表示は、左から、1分、5分、15分間の平均値になっている。つまり、左の方が値が大きければ、直近の数分間で急に負荷が上がっていることを表す。&lt;/p&gt;

&lt;p&gt;言わずもがなだが下半分には、CPUの使用率順に並んだプロセス一覧が表示されるので、ここからCPU負荷が高かったりメモリの使用量が多いアプリケーションが何なのかは大体つかめる。topからなんとなくのあたりをつけたあと、何がボトルネックになっているかを探すには、sarコマンドで過去のパフォーマンスデータを確認していく。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>logrotateのローテート世代数を減らす時の注意</title>
   <link href="http://b.l0g.jp/dev/logrotate-changegen/"/>
   <updated>2011-02-14T14:38:25-08:00</updated>
   <id>http://b.l0g.jp/dev/logrotate-changegen</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/logrotate-changegen/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;logrotateのローテート世代数を減らす時の注意&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/logrotate-changegen/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/logrotate-changegen/&quot; data-text=&quot;logrotateのローテート世代数を減らす時の注意&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/logrotate-changegen/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本当は「山に行きました！」というブログを投稿したいところなのだが、さっぱり行ける雰囲気がないので、腹いせに技術系の投稿を続けてる。&lt;/p&gt;

&lt;p&gt;logrotateを使ってログのローテートを行っている状況で、ログファイルの総容量が大きくなり、世代数を減らさざるを得ないときのこと。「rotate 世代数」の指定を減らしても、古い世代数は削除されない。&lt;/p&gt;

&lt;p&gt;具体的には、以下の例。当初logrotate.confで以下の設定をしていたとする。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# see “man logrotate” for details&lt;/p&gt;

&lt;p&gt;# rotate log files daily&lt;/p&gt;

&lt;p&gt;daily&lt;/p&gt;

&lt;p&gt;# keep 10 days worth of backlogs&lt;/p&gt;

&lt;p&gt;rotate 10&lt;/p&gt;

&lt;p&gt;# create new (empty) log files after rotating old ones&lt;/p&gt;

&lt;p&gt;create&lt;/p&gt;

&lt;p&gt;# uncomment this if you want your log files compressed&lt;/p&gt;

&lt;p&gt;#compress&lt;/p&gt;

&lt;p&gt;# RPM packages drop log rotation information into this directory&lt;/p&gt;

&lt;p&gt;include /etc/logrotate.d&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;この場合、1日1回ローテートされたファイルが10回分保存される。例えば以下のように。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;ls -v /var/log/httpd/access_log*&lt;/p&gt;

&lt;p&gt;access_log access_log.4 access_log.8&lt;/p&gt;

&lt;p&gt;access_log.1 access_log.5 access_log.9&lt;/p&gt;

&lt;p&gt;access_log.2 access_log.6 access_log.10&lt;/p&gt;

&lt;p&gt;access_log.3 access_log.7&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;ここで、アクセスログ1ファイルずつの容量が増えてきて、ディスク空き容量が減ってきた場合、保存する世代数を減らして対処する場合、「rotate 世代数」の世代数を減らしても、古い世代が一斉に削除されるわけではない。&lt;/p&gt;

&lt;p&gt;rotate 5とした場合、次のローテート後には以下のようになる。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;access_log access_log.4 access_log.9&lt;/p&gt;

&lt;p&gt;access_log.1 access_log.5 access_log.10&lt;/p&gt;

&lt;p&gt;access_log.2 access_log.7&lt;/p&gt;

&lt;p&gt;access_log.3 access_log.8&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;つまり、6世代目が消えるだけで、7世代目以降は自動的には削除されないため、手動で削除する必要がある。&lt;/p&gt;

&lt;p&gt;これだけ。これが分からなくて危なくディスク使用率が100%になるところだった。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>さくらVPSのCentOSにsymfony 1.4.xの環境を構築する</title>
   <link href="http://b.l0g.jp/dev/symfony14onsakuravps/"/>
   <updated>2011-02-13T14:25:12-08:00</updated>
   <id>http://b.l0g.jp/dev/symfony14onsakuravps</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/symfony14onsakuravps/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;さくらVPSのCentOSにsymfony 1.4.xの環境を構築する&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/symfony14onsakuravps/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/symfony14onsakuravps/&quot; data-text=&quot;さくらVPSのCentOSにsymfony 1.4.xの環境を構築する&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/symfony14onsakuravps/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;自分でWebサービスを作ってみようと思い立ってsymfonyを勉強し始めて数ヶ月。&lt;/p&gt;

&lt;p&gt;しばらく前の話だが、借りていたサーバの使用期限が終わってしまったので、さくらVPSを契約。そこにsymfony 1.4.x(1.4.8)をインストールするときの手順をまとめておく。特にさくらVPSに特化した内容はないので、普通にCentOS上にsymfony 1.4をインストールする手順と同じのはず。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;＜事前準備・参考＞&lt;/h2&gt;

&lt;p&gt;以下のサイトを参考にして、不要なパッケージの削除、サービス停止、ファイアウォールやSSHなど、基本的なインターネット公開サーバの設定を済ませておく。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tanaka.sakura.ad.jp/archives/001065.html&quot; target=&quot;_blank&quot;&gt;http://tanaka.sakura.ad.jp/archives/001065.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ideaxidea.com/archives/2010/11/sakura_vps_settings.html&quot; target=&quot;_blank&quot;&gt;http://www.ideaxidea.com/archives/2010/11/sakura_vps_settings.html&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;php53remi&quot;&gt;＜PHP5.3を配布しているremiリポジトリを有効にする＞&lt;/h2&gt;

&lt;p&gt;このブログ執筆時点のさくらVPSのデフォルトOSはCentOS 5.5(x86_64)だが、これには&lt;/p&gt;

&lt;p&gt;PHP5.1.6が含まれており、symfony 1.4.xが動作しないので、最新版5.3をインストール。&lt;/p&gt;

&lt;p&gt;PHP5.3のRPMパッケージはremiというリポジトリから配布されているので、yumのリポジトリに設定を追加。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# rpm -Uvh http://download.fedora.redhat.com/pub/epel/5/x86_64/epel-release-5-4.noarch.rpm&lt;/p&gt;

&lt;p&gt;# rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-5.rpm&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;php53&quot;&gt;＜PHP5.3インストール＞&lt;/h2&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# yum install –enablerepo=remi php php-domxml php-devel php-mysql&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;php.iniに以下を追記。追記しないとdate()の使用で警告が出る。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;date.timezone = “Asia/Tokyo”&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;mb_string関連の関数を使用するために必要なのでphp-mbstringもインストール。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# yum install –enablerepo=remi php-mbstring&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;コンソールで文字を色付けするのに必要なのでphp-processもインストール。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# yum install –enablerepo=remi php-process&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;symfonyで必要なものがそろっているか確認するスクリプトを実行。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# wget http://sf-to.org/1.4/check.php&lt;/p&gt;

&lt;p&gt;# php check_configuration.php&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;**&lt;/p&gt;

&lt;p&gt;* *&lt;/p&gt;

&lt;p&gt;* symfony requirements check *&lt;/p&gt;

&lt;p&gt;* *&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;*&lt;strong&gt;*&lt;/strong&gt;**&lt;/p&gt;

&lt;p&gt;php.ini used by PHP: /etc/php.ini&lt;/p&gt;

&lt;p&gt;** WARNING **&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The PHP CLI can use a different php.ini file&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;than the one used with your web server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If this is the case, please launch this&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;utility from your web server.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;** WARNING **&lt;/p&gt;

&lt;p&gt;** Mandatory requirements **&lt;/p&gt;

&lt;p&gt;OK PHP version is at least 5.2.4 (5.3.3)&lt;/p&gt;

&lt;p&gt;** Optional checks **&lt;/p&gt;

&lt;p&gt;OK PDO is installed&lt;/p&gt;

&lt;p&gt;OK PDO has some drivers installed: mysql, sqlite, sqlite2&lt;/p&gt;

&lt;p&gt;OK PHP-XML module is installed&lt;/p&gt;

&lt;p&gt;OK XSL module is installed&lt;/p&gt;

&lt;p&gt;OK The token_get_all() function is available&lt;/p&gt;

&lt;p&gt;OK The mb_strlen() function is available&lt;/p&gt;

&lt;p&gt;OK The iconv() function is available&lt;/p&gt;

&lt;p&gt;OK The utf8_decode() is available&lt;/p&gt;

&lt;p&gt;OK The posix_isatty() is available&lt;/p&gt;

&lt;p&gt;[[WARNING]] A PHP accelerator is installed: FAILED&lt;/p&gt;

&lt;p&gt;*\&lt;em&gt;* Install a PHP accelerator like APC (highly recommended) **&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OK php.ini has short_open_tag set to off&lt;/p&gt;

&lt;p&gt;OK php.ini has magic_quotes_gpc set to off&lt;/p&gt;

&lt;p&gt;OK php.ini has register_globals set to off&lt;/p&gt;

&lt;p&gt;OK php.ini has session.auto_start set to off&lt;/p&gt;

&lt;p&gt;OK PHP version is not 5.2.9&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;pear&quot;&gt;＜pearインストール＞&lt;/h2&gt;

&lt;p&gt;※ pearでのインストールは推奨されていないが、簡単なのでこれで済ませる&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# yum install –enablerepo=remi php-pear&lt;/p&gt;

&lt;p&gt;# pear upgrade-all&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;symfony&quot;&gt;＜symfonyインストール＞&lt;/h2&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# pear channel-discover pear.symfony-project.com&lt;/p&gt;

&lt;p&gt;# pear install symfony/symfony&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;以下のコマンドでバージョンが表示されたらインストール成功。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# symfony -V&lt;/p&gt;

&lt;p&gt;symfony version 1.4.8 (/usr/share/pear/symfony)&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;/usr/share/pear/symfonyにインストールされる&lt;/p&gt;

&lt;h2 id=&quot;apc&quot;&gt;＜APCインストール＞&lt;/h2&gt;

&lt;p&gt;PHPのアクセラレータであるAPCをインストールしておく。入れなくても動作するが、symfonyでは導入が推奨されているのと、入れただけで高速になるとのことなのでインストール。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# yum install httpd-devel&lt;/p&gt;

&lt;p&gt;# yum install –enablerepo=remi php-pecl-apc&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;httpd&quot;&gt;＜httpd起動＞&lt;/h2&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# chkconfig httpd on&lt;/p&gt;

&lt;p&gt;Syntax OK&lt;/p&gt;

&lt;p&gt;# service httpd start&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;ブラウザから http://(サーバのIPアドレス)/ を確認し、phpinfoでapcが読み込まれていることを確認。&lt;/p&gt;

&lt;p&gt;※ phpinfoはコマンドラインから以下を実行しても確認できる&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;php ‘phpinfo();’&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;mysql&quot;&gt;＜MySQLインストール＞&lt;/h2&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# yum install –enablerepo=remi mysql-server&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;mysql-1&quot;&gt;＜MySQL設定＞&lt;/h2&gt;

&lt;p&gt;my.cnfに以下を追記して文字コードをUTF-8に&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;[mysqld]&lt;/p&gt;

&lt;p&gt;default-character-set=utf8&lt;/p&gt;

&lt;p&gt;character_set_server=utf8&lt;/p&gt;

&lt;p&gt;skip-character-set-client-handshake&lt;/p&gt;

&lt;p&gt;[mysql]&lt;/p&gt;

&lt;p&gt;default-character-set=utf8&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;statusコマンドおよび”show variables like ‘char%’;”でUTF-8になっていることを確認(&lt;a href=&quot;http://b.l0g.jp/dev/symfony%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92mysql%E3%81%AB%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AEduplicate-entry%E3%82%A8%E3%83%A9%E3%83%BC/&quot; target=&quot;_blank&quot;&gt;過去エントリ&lt;/a&gt;も参照)&lt;/p&gt;

&lt;p&gt;パスワードを設定&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# mysqladmin -u root password パスワード&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;データベース作成&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# mysql -uroot -p&lt;/p&gt;

&lt;p&gt;mysql&amp;gt; create database データベース名;&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;h2 id=&quot;postfix&quot;&gt;＜postfixインストール＞&lt;/h2&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# yum remove sendmail&lt;/p&gt;

&lt;p&gt;# yum install postfix&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;/etc/postfix/main.cf を編集&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# chkconfig postfix on&lt;/p&gt;

&lt;p&gt;# service postfix start&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;メール送信のテスト&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;# mail -s test あて先&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;※ 本登録前のお試し期間中はOP25Bが有効なので、VPS上のサーバからメールを送信することはできない&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CentOS 5.5にsphinxをインストール</title>
   <link href="http://b.l0g.jp/dev/sphinx-on-centos55/"/>
   <updated>2011-02-11T16:16:24-08:00</updated>
   <id>http://b.l0g.jp/dev/sphinx-on-centos55</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/sphinx-on-centos55/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;CentOS 5.5にsphinxをインストール&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/sphinx-on-centos55/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/sphinx-on-centos55/&quot; data-text=&quot;CentOS 5.5にsphinxをインストール&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/sphinx-on-centos55/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://atnd.org/events/12450&quot; target=&quot;_blank&quot;&gt;2/12のSphinx翻訳ハッカソン&lt;/a&gt;に行ってSymfony2のドキュメントの翻訳をさせていただこうと思っていたら、このところどっぷりはまっている仕事の方で呼び出されることになり、参加できなくなってしまった。予習として手元の環境にSphinxをインストールしたときのメモを残しておく。&lt;/p&gt;

&lt;p&gt;といっても、パッケージ管理ツールを駆使(？)してあっという間。Sphinxのユーザ会のページには、MacOS XとUbuntuへのインストール方法は書いてあるが、CentOSへのインストール方法は書かれていないので、一応メモ。&lt;/p&gt;

&lt;p&gt;yumでpythonのパッケージ管理ツールであるpipをインストール&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[root@hoge ~]# yum install python-pip python-setuptools&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;pipでsphinxをインストール。現状では1.0.7がインストールされるようだ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[root@hoge ~]# pip-python install sphinx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Downloading/unpacking sphinx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Downloading Sphinx-1.0.7.tar.gz (2.3Mb): 2.3Mb downloaded&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Running setup.py egg_info for package sphinx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;no previously-included directories found matching ‘doc/_build’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Downloading/unpacking Pygments&amp;gt;=0.8 (from sphinx)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Downloading Pygments-1.4.tar.gz (3.5Mb): 3.5Mb downloaded&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Running setup.py egg_info for package Pygments&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Downloading/unpacking Jinja2&amp;gt;=2.2 (from sphinx)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Downloading Jinja2-2.5.5.tar.gz (438Kb): 438Kb downloaded&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;(中略)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Installing sphinx-build script to /usr/bin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Installing sphinx-quickstart script to /usr/bin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Installing sphinx-autogen script to /usr/bin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Successfully installed docutils Jinja2 Pygments sphinx&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cleaning up…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;[root@hoge ~]#&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sphinxユーザ会の「&lt;a href=&quot;http://sphinx-users.jp/gettingstarted/index.html&quot; target=&quot;_blank&quot;&gt;Sphinxをはじめよう&lt;/a&gt;」を見て、「プロジェクトの作成」まではあっさり完了。&lt;/p&gt;

&lt;p&gt;yumでもsphinx(パッケージ名はpython-sphinx)をインストールできるが、&lt;a href=&quot;http://twitter.com/#!/hidenorigoto&quot; target=&quot;_blank&quot;&gt;@hidenorigoto&lt;/a&gt;さんのアドバイスで、pipを使ったインストール方法があることを知った。ありがとうございます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2011年3月13日追記&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;epelリポジトリを有効にしていたからyumだけでインストールできた模様。epelリポジトリを追加していない場合は以下のコマンドで追加。&lt;/p&gt;

&lt;p&gt;[text]&lt;/p&gt;

&lt;p&gt;rpm -ivh http://ftp.riken.jp/Linux/fedora/epel/5/i386/epel-release-5-4.noarch.rpm&lt;/p&gt;

&lt;p&gt;[/text]&lt;/p&gt;

&lt;p&gt;※ パスの中で「5-4」はepelのバージョンによって変わる。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>vjCommentPluginで色々はまる</title>
   <link href="http://b.l0g.jp/dev/vjcommentplugin%e3%81%a7%e8%89%b2%e3%80%85%e3%81%af%e3%81%be%e3%82%8b/"/>
   <updated>2010-10-07T11:59:49-07:00</updated>
   <id>http://b.l0g.jp/dev/vjcommentplugin%e3%81%a7%e8%89%b2%e3%80%85%e3%81%af%e3%81%be%e3%82%8b</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/vjcommentplugin%e3%81%a7%e8%89%b2%e3%80%85%e3%81%af%e3%81%be%e3%82%8b/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;vjCommentPluginで色々はまる&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/vjcommentplugin%e3%81%a7%e8%89%b2%e3%80%85%e3%81%af%e3%81%be%e3%82%8b/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/vjcommentplugin%e3%81%a7%e8%89%b2%e3%80%85%e3%81%af%e3%81%be%e3%82%8b/&quot; data-text=&quot;vjCommentPluginで色々はまる&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/vjcommentplugin%e3%81%a7%e8%89%b2%e3%80%85%e3%81%af%e3%81%be%e3%82%8b/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;symfonyでニュースの記事などにコメント欄を付けるプラグインとして、&lt;a href=&quot;http://www.symfony-project.org/plugins/vjCommentPlugin&quot; target=&quot;_blank&quot;&gt;vjCommentPlugin&lt;/a&gt;というのがある。これの設定でちょっとはまったので、メモ。&lt;/p&gt;

&lt;p&gt;インストールや設定はReadmeに書いてある通りで、簡単。ログインしないとコメントできないようにするため、sfGuardPluginと連携させる機能が追加されているのだが、これが癖者。この機能を使うときには、app.ymlに以下の表記を追記する。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;all:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;vjCommentPlugin:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;guardbind: true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;restricted: true&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Readmeには、frontend/config/app.ymlを編集しろと書いてあるのだが、これだとコメントを保存するテーブルの中身が、ログインしないとコメントできないように書き換わってくれない。plugin/vjCommentPlugin/config/app.ymlを上の通り編集する必要がある。&lt;/p&gt;

&lt;p&gt;また、この状態で symfony doctrine:build すると、以下のエラーが出る。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SQLSTATE[HY000]: General error: 1005 Can’t create table ‘pjtransrate.#sql-15f0_b9’ (errno: 150). Failing Query: “ALTER TABLE comment ADD CONSTRAINT comment_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id)”. Failing Query: ALTER TABLE comment ADD CONSTRAINT comment_user_id_sf_guard_user_id FOREIGN KEY (user_id) REFERENCES sf_guard_user(id)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは、sfGuardUserテーブルでは id (ユーザのID)を integer で定義しているのに、commentテーブル(コメントを保存するテーブル)の user_id は integer(4) で定義されており、その間にrelationを張ろうとしているためエラーになっているようだ。&lt;/p&gt;

&lt;p&gt;参考 : &lt;a href=&quot;http://www.symfony-project.org/plugins/vjCommentPlugin&quot; target=&quot;_blank&quot;&gt;http://d.hatena.ne.jp/zankey/20070411/mysql&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;plugins/vjCommentPlugin/config/doctrine/schema.yml の comment テーブルの user_id の type を integer に変更して、再度 doctrine:build するとうまくいく。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Subversionリポジトリへコミットするときの405エラー</title>
   <link href="http://b.l0g.jp/dev/subversion%e3%83%aa%e3%83%9d%e3%82%b8%e3%83%88%e3%83%aa%e3%81%b8%e3%82%b3%e3%83%9f%e3%83%83%e3%83%88%e3%81%99%e3%82%8b%e3%81%a8%e3%81%8d%e3%81%ae405%e3%82%a8%e3%83%a9%e3%83%bc/"/>
   <updated>2010-09-30T04:19:28-07:00</updated>
   <id>http://b.l0g.jp/dev/subversion%e3%83%aa%e3%83%9d%e3%82%b8%e3%83%88%e3%83%aa%e3%81%b8%e3%82%b3%e3%83%9f%e3%83%83%e3%83%88%e3%81%99%e3%82%8b%e3%81%a8%e3%81%8d%e3%81%ae405%e3%82%a8%e3%83%a9%e3%83%bc</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/subversion%e3%83%aa%e3%83%9d%e3%82%b8%e3%83%88%e3%83%aa%e3%81%b8%e3%82%b3%e3%83%9f%e3%83%83%e3%83%88%e3%81%99%e3%82%8b%e3%81%a8%e3%81%8d%e3%81%ae405%e3%82%a8%e3%83%a9%e3%83%bc/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Subversionリポジトリへコミットするときの405エラー&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/subversion%e3%83%aa%e3%83%9d%e3%82%b8%e3%83%88%e3%83%aa%e3%81%b8%e3%82%b3%e3%83%9f%e3%83%83%e3%83%88%e3%81%99%e3%82%8b%e3%81%a8%e3%81%8d%e3%81%ae405%e3%82%a8%e3%83%a9%e3%83%bc/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/subversion%e3%83%aa%e3%83%9d%e3%82%b8%e3%83%88%e3%83%aa%e3%81%b8%e3%82%b3%e3%83%9f%e3%83%83%e3%83%88%e3%81%99%e3%82%8b%e3%81%a8%e3%81%8d%e3%81%ae405%e3%82%a8%e3%83%a9%e3%83%bc/&quot; data-text=&quot;Subversionリポジトリへコミットするときの405エラー&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/subversion%e3%83%aa%e3%83%9d%e3%82%b8%e3%83%88%e3%83%aa%e3%81%b8%e3%82%b3%e3%83%9f%e3%83%83%e3%83%88%e3%81%99%e3%82%8b%e3%81%a8%e3%81%8d%e3%81%ae405%e3%82%a8%e3%83%a9%e3%83%bc/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Subversionリポジトリへうまくコミットできないときがたまにあるので、メモ。&lt;/p&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  コミットしようとすると、途中で以下のようなエラーが出ることがあります。
&lt;/div&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div&gt;
  commit -m &amp;#8220;あれこれ変更&amp;#8221; -N (32 paths specified)
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Sending        C:/Users/hoge/project/apps/frontend/modules/article/templates/indexSuccess.php
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  (中略)
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Adding         C:/Users/hoge/project/cache/frontend/dev/template
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  RA layer request failed
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  svn: Commit failed (details follow):
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  svn: Server sent unexpected return value (405 Method Not Allowed) in response to MKCOL request for &amp;#8216;/svn/pjtransrate/!svn/wrk/be91e174-dd4b-124f-abbd-dd57636aa9ad/trunk/cache/frontend/dev/template&amp;#8217;
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;

&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  &lt;a href=&quot;http://pentan.info/program/tools/svn_commit_error.html&quot; target=&quot;_blank&quot;&gt;「405 Method Not Allowed」が出るときは、フォルダ名やファイル名にSubversionで管理できない文字が含まれている、との情報&lt;/a&gt;があったりしますが、symfonyのcache/frontend/dev/templateの下は symfony cc した後は空なので、管理できない文字とやらが含まれているということはありません。
&lt;/div&gt;

&lt;div&gt;
&lt;/div&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  とりあえずcache/frontend/dev/templateを手動で削除してからコミットしたら、うまくいきました。
&lt;/div&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
&lt;/div&gt;

&lt;div&gt;
  よく分かりませんが、うまくいったのでよしとしよう。
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Windows付属のツールで簡単にパノラマ写真が作れる</title>
   <link href="http://b.l0g.jp/uncategorized/windows-live-photo-gallery/"/>
   <updated>2010-09-05T18:18:59-07:00</updated>
   <id>http://b.l0g.jp/uncategorized/windows-live-photo-gallery</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/uncategorized/windows-live-photo-gallery/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Windows付属のツールで簡単にパノラマ写真が作れる&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/uncategorized/windows-live-photo-gallery/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/uncategorized/windows-live-photo-gallery/&quot; data-text=&quot;Windows付属のツールで簡単にパノラマ写真が作れる&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/uncategorized/windows-live-photo-gallery/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;何だか広告みたいなタイトルになってしまったが、なかなかすごい機能だと思ったのでご紹介。&lt;/p&gt;

&lt;p&gt;最近、Windows 7がインストールされたノートパソコン(Panasonic Let’s note S9)を衝動買いしてしまった。これには、Windows Liveフォトギャラリーというソフトが付属しており、デジカメで撮った写真などを管理することができる。SDカードからそのまま写真を取り込めるので、このソフトをそのまま使っている。別にPanasonicのPCにだけ付属しているソフトではなく、Windows 7には必ずインストールされているはず。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/09/WS000000.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-461&quot; title=&quot;Windows Liveフォトギャラリー&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/WS000000-300x197.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;197&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;登山などで見晴らしの良いところへ行くと、360度ぐるっと写真を撮って、後でつなげて1枚にしたくなる。ところがなかなかこれを簡単にしかもきれいにできるソフトがなかったので、撮るだけ撮ってそのままにすることが多かった。しかし！このLiveフォトギャラリーでは、複数の写真を選択してメニューを選ぶだけで、簡単にパノラマ写真が作れる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/09/WS000001.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-462&quot; title=&quot;複数の写真を選ぶ&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/WS000001-300x197.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;197&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[](http://b.l0g.jp/wp-content/uploads/2010/09/WS000001.jpg)パノラマ写真の一部となる写真を選ぶ。Ctrlキーを押しながら写真をクリックすると、上の画面のように背景が青になり、複数の写真を選択できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/09/WS000002.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-463&quot; title=&quot;パノラマ写真を作成&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/WS000002-300x197.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;197&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;いずれかの写真の上で右クリックし、「パノラマ写真の作成」を選ぶ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/09/WS000003.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-464&quot; title=&quot;しばらく待つ&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/WS000003-300x148.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;148&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;作成にはそこそこ時間がかかる(手元の環境では、600万画素のデジタル一眼で撮った10枚をつなげるのに1分半ぐらい)。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/09/WS000005.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-465&quot; title=&quot;パノラマ写真の出来上がり&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/WS000005-300x197.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;197&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;保存を促すダイアログが現れるので、ファイル名を指定して保存すると、出来上がったパノラマ写真が表示される。&lt;/p&gt;

&lt;p&gt;今年8月上旬に飯豊連峰を縦走した時の、北股岳山頂からの眺めをパノラマ写真にしたのがこれ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/09/kitamata_panorama_s.jpg&quot;&gt;&lt;img class=&quot;alignnone size-medium wp-image-466&quot; title=&quot;kitamata_panorama_s&quot; src=&quot;http://b.l0g.jp/wp-content/uploads/kitamata_panorama_s-300x47.jpg&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;47&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;横幅が長すぎてうまく表示されない場合は、直接こちらから。かなりきれいにつながっている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/09/kitamata_panorama_s.jpg&quot; target=&quot;_blank&quot;&gt;http://b.l0g.jp/wp-content/uploads/2010/09/kitamata_panorama_s.jpg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、北股岳山頂からの眺めは素晴らしかった。写真左側は頼母木小屋、杁差岳方面へ続く稜線。地図を見ている人(F西さん)の左側奥へ続く稜線が、それまで2日かけて歩いてきた飯豊連峰の主脈で、手前から梅花皮岳(かいらぎだけ)、烏帽子岳と続き、F西さんの右肩の上あたりが2日目に泊った御西小屋、左側に続く稜線上の最高点が飯豊本山、右側の人物の先が飯豊連峰の最高峰、大日岳だと思われる。鳥居の左奥辺りには佐渡が島が見えていたはず。ちょうど写真の境目の部分が二王子岳付近。&lt;/p&gt;

&lt;p&gt;ああ、説明を書きながらまた行きたくなってきた。今度飯豊へ行くときは、6月ごろのまだ雪が豊富な時に行き、また真夏とは違った花々を楽しんでみたいものだ。&lt;/p&gt;

&lt;p&gt;あ、結局ソフトの紹介じゃなくて、山に行きたいという話で終わってしまった。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>symfonyでデータをMySQLにロードする際のduplicate entryエラー</title>
   <link href="http://b.l0g.jp/dev/symfony%e3%81%a7%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92mysql%e3%81%ab%e3%83%ad%e3%83%bc%e3%83%89%e3%81%99%e3%82%8b%e9%9a%9b%e3%81%aeduplicate-entry%e3%82%a8%e3%83%a9%e3%83%bc/"/>
   <updated>2010-08-05T02:47:49-07:00</updated>
   <id>http://b.l0g.jp/dev/symfony%e3%81%a7%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92mysql%e3%81%ab%e3%83%ad%e3%83%bc%e3%83%89%e3%81%99%e3%82%8b%e9%9a%9b%e3%81%aeduplicate-entry%e3%82%a8%e3%83%a9%e3%83%bc</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/dev/symfony%e3%81%a7%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92mysql%e3%81%ab%e3%83%ad%e3%83%bc%e3%83%89%e3%81%99%e3%82%8b%e9%9a%9b%e3%81%aeduplicate-entry%e3%82%a8%e3%83%a9%e3%83%bc/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;symfonyでデータをMySQLにロードする際のduplicate entryエラー&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/dev/symfony%e3%81%a7%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92mysql%e3%81%ab%e3%83%ad%e3%83%bc%e3%83%89%e3%81%99%e3%82%8b%e9%9a%9b%e3%81%aeduplicate-entry%e3%82%a8%e3%83%a9%e3%83%bc/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/dev/symfony%e3%81%a7%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92mysql%e3%81%ab%e3%83%ad%e3%83%bc%e3%83%89%e3%81%99%e3%82%8b%e9%9a%9b%e3%81%aeduplicate-entry%e3%82%a8%e3%83%a9%e3%83%bc/&quot; data-text=&quot;symfonyでデータをMySQLにロードする際のduplicate entryエラー&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/dev/symfony%e3%81%a7%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92mysql%e3%81%ab%e3%83%ad%e3%83%bc%e3%83%89%e3%81%99%e3%82%8b%e9%9a%9b%e3%81%aeduplicate-entry%e3%82%a8%e3%83%a9%e3%83%bc/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;symfony 1.4.6 + XAMPP 1.7.3(Windows)で、ありがちなエラーではまったので、メモ。&lt;/p&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  symfonyのschema.ymlとfixture.ymlを記述して、
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div&gt;
  # symfony doctrine:build &amp;#8211;all &amp;#8211;and-load &amp;#8211;no-confirmation
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  で、一気にデータベースの再構築とデータのロードを行おうとしたところ、以下のエラー発生。
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div id=&quot;_mcePaste&quot;&gt;
  &amp;gt;&amp;gt; doctrine  created tables successfully
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  &amp;gt;&amp;gt; doctrine  Loading data fixtures from &amp;#8220;C:\&amp;#8230;\Eclipse\symfony\data/fixtures&amp;#8221;
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  &amp;gt;&amp;gt; doctrine  Loading data fixtures from &amp;#8220;C:/&amp;#8230;trineGuardPlugin/data/fixtures&amp;#8221;
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry &amp;#8216;????&amp;#8217; for key &amp;#8216;name&amp;#8217;
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  当たり前だが、fixture.ymlでは重複するような値を定義してはいない。????というのが気になるが、これは何？
&lt;/div&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  どうやらこれは、データベースの文字コードがlatin1などになっている場合に起きるようである。データベースの文字コードをUTF-8にすると共に、fixture.ymlに日本語のキーが含まれている場合、こちらの文字コードもUTF-8にする(Windowsではメモ帳などを使って編集すると普通Shift-JISになるので注意)。
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div id=&quot;_mcePaste&quot;&gt;
  [mysqld]
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  default-character-set=utf8
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  character_set_server=utf8
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  skip-character-set-client-handshake
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  [mysql]
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  default-character-set=utf8
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  XAMPPのインストールフォルダ以下、mysql\bin\my.ini ファイル内の各項目に、上記を追記し、
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div id=&quot;_mcePaste&quot;&gt;
  net stop mysql   # MySQLサービス停止
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  net start mysql  # MySQLサービス開始
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  mysql -uroot -p パスワード
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  mysql&amp;gt; drop database データベース名;   # 念のためDB削除
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  mysql&amp;gt; create database データベース名;   # 念のためDB再作成
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  としてMySQL再起動、データベース再作成をしてからもう一度
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div id=&quot;_mcePaste&quot;&gt;
  # symfony doctrine:build &amp;#8211;all &amp;#8211;and-load &amp;#8211;no-confirmation
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  とすれば、すんなりデータベースを作成できる。
&lt;/div&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  なお、自分がやったときには、MySQLのstatusコマンドではUTF-8になっていたのに、どうしても上記のDuplicate entryのエラーが出てしまい、混乱した。
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div id=&quot;_mcePaste&quot;&gt;
  mysql  Ver 14.14 Distrib 5.1.41, for Win32 (ia32)
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Connection id:          5
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  SSL:                    Not in use
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Using delimiter:        ;
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Server version:         5.1.41 Source distribution
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Protocol version:       10
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Connection:             Named pipe: MySQL
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Client characterset:    UTF-8
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Server characterset:    UTF-8
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  UNIX socket:            MySQL
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  Uptime:                 9 min 40 sec
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  この場合、以下のコマンドでも確認し、全部の設定がUTF-8に揃っているかを見てみるべし。
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;div id=&quot;_mcePaste&quot;&gt;
  mysql&amp;gt; show variables like &amp;#8216;char%&amp;#8217;;
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  +&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8211;+&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-+
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | Variable_name            | Value                                  |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  +&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8211;+&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-+
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | character_set_client     | utf8                                   |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | character_set_connection | utf8                                   |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | character_set_database   | utf8                                   |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | character_set_filesystem | binary                                 |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | character_set_results    | utf8                                   |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | character_set_server     | utf8                                   |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | character_set_system     | utf8                                   |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  | character_sets_dir       | C:\eclipse\xampp\mysql\share\charsets\ |
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  +&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8211;+&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;&amp;#8212;-+
&lt;/div&gt;

  &lt;div id=&quot;_mcePaste&quot;&gt;
  8 rows in set (0.00 sec)
&lt;/div&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;_mcePaste&quot;&gt;
  どれかがlatin1などのままならば設定が不十分なので、もう一度my.iniを確認すること。
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>成功者の告白</title>
   <link href="http://b.l0g.jp/reading/confessions-of-self-made-millionaires/"/>
   <updated>2010-07-16T16:52:50-07:00</updated>
   <id>http://b.l0g.jp/reading/confessions-of-self-made-millionaires</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/reading/confessions-of-self-made-millionaires/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;成功者の告白&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/reading/confessions-of-self-made-millionaires/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/reading/confessions-of-self-made-millionaires/&quot; data-text=&quot;成功者の告白&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/reading/confessions-of-self-made-millionaires/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「5年間の起業ノウハウを3時間で学べる物語」と副題が付いているが、起業そのもの(事業を興すこと)ではなく、起業した後、事業が安定するまでの間にその企業が陥りやすい問題点を、小説形式で紹介している。巷では、日本では起業が少ないとか、起業しようとかするなとか、色々な話が流れているが、起業した後どうしたらいいのかという点について書かれた本は少ないように思う(実際自分がそういうステージに達していないから気づかないだけかもしれないが)。&lt;/p&gt;

&lt;p&gt;特にこの本では、直接にビジネスに関係することというより、人間関係を中心に、しかも会社内だけに限らず人生の中で起業がどういう影響を及ぼしていくのかについて言及しており、なかなか面白い。内容は、エピローグにまとめてあるとおり。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;成功に向かって一歩を踏み出す。仕事は辛いが家庭は円満&lt;/li&gt;
  &lt;li&gt;成功に向かって離陸。仕事は好調、家庭で歪みが出始める&lt;/li&gt;
  &lt;li&gt;成功への分かれ目。仕事は好調、人間関係で問題勃発。家庭はあきらめムード&lt;/li&gt;
  &lt;li&gt;仕事と家庭のバランス回復。仕事では人を指導する立場に、家庭では相互依存へ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本文では、この過程を多少大げさに時系列で描いている。起業した人、したい人だけでなく、自分の会社がどのステージにいるのか客観的に見るいい機会にもなるので、一般企業に勤める人にも役に立つだろう。&lt;/p&gt;

&lt;p&gt;本文は前述の通り面白いのだが、読み進めるほど、起業の困難にブチ当たるどころか、事業を興すことが何かも体験していない自分が歯がゆい。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>登山記録に使えるGPSアプリ My Tracks</title>
   <link href="http://b.l0g.jp/android/mytracksintro/"/>
   <updated>2010-07-06T17:42:17-07:00</updated>
   <id>http://b.l0g.jp/android/mytracksintro</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/android/mytracksintro/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;登山記録に使えるGPSアプリ My Tracks&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/android/mytracksintro/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/android/mytracksintro/&quot; data-text=&quot;登山記録に使えるGPSアプリ My Tracks&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/android/mytracksintro/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;自分がAndroid携帯(Sony ErricsonのXperia)を買ったのは、スマートフォンならではの自由度の高さ(画面の大きさやセンサーの多さなど)を活かしたアプリケーションを、自分で作って使ってみたいと思ったことがきっかけである。スマートフォンといえばiPhoneじゃない？という人が多いと思うが、登山によく行く自分にとって、少なくとも現時点ではドコモとauと比較するとかなり電波状況の悪いソフトバンクテレコムに乗り換えるという選択肢はどうしても取れなかった。また、iPhoneアプリを作るには、まずMacを買わなければならないというのも、Android携帯を選んだ理由である。現時点で、良好な電波状況と端末の完成度の両方を満たす端末は、Xperia以外にないといえる(auのIS01もありという人もいるかもしれないが)。と思っているのだが、なぜか自分の登山仲間のスマフォ持ちはiPhoneばっかり。へっ！iPhoneなんてソフバンで電波届かないから、どうせ山に登って「山頂なう！」ってつぶやきもできないくせに！(笑)&lt;/p&gt;

&lt;p&gt;具体的に作ってみたかったアプリとしては、登山道を歩きながらGPSデータを保存してくれる、GPSロガーである。ところが、Xperiaを入手してあれこれと初歩的なアプリを作っているうちに、My Trackというアプリを見つけた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mytracks.appspot.com/&quot;&gt;My Tracks for Android&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これはまさに欲しかったアプリではないか！ 事前に調べた限りではGPSロガー的なアプリは見つからなかったのだが(iPhoneアプリはいくつか見つけた)、探し方が悪かっただけらしい。そんなわけで、自分で作らなくても既にあったので、あっさりと自分のAndroidアプリ制作意欲はほぼゼロまで削がれた。2010年5月からはソースコードも公開されたため、改変も可能になった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://code.google.com/p/mytracks/&quot;&gt;mytracks – Project Hosting on Google Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使い方は簡単で、Record Trackというメニューを選んで歩き始めると、一定の間隔でGPSの情報を記録し、Googleマップ上に表示してくれるというのが基本機能。以下の画面は乾徳山に登った時のコースの一部。機種や電波の受信状況にもよるだろうが、結構高精度で記録が取れる。この時はRecord Trackするのを忘れていて、一部のルートしか記録できなかった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/07/01.png&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/01-168x300.png&quot; alt=&quot;&quot; title=&quot;01&quot; width=&quot;168&quot; height=&quot;300&quot; class=&quot;alignnone size-medium wp-image-394&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stop Recordメニューを選べば、記録終了。Googleマップでは、拡大すると等高線も表示されるので、地形なども推測できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/07/02.png&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/02-168x300.png&quot; alt=&quot;&quot; title=&quot;02&quot; width=&quot;168&quot; height=&quot;300&quot; class=&quot;alignnone size-medium wp-image-395&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画面中央左右の矢印をタップすると、他の情報も見られる。右をタップすると、歩いた距離や最高・平均速度、最低・最高標高、標高差などが確認できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/07/03.png&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/03-168x300.png&quot; alt=&quot;&quot; title=&quot;03&quot; width=&quot;168&quot; height=&quot;300&quot; class=&quot;alignnone size-medium wp-image-396&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;さらに右をタップすると、横軸に距離、縦軸に標高と歩行速度のグラフが見られる。緑が標高で、この時は1.5kmほど歩く間に1580mぐらいから1800m近くまで登った様子がわかる。青が歩行速度で、見方は…単位がいまいちよくわからない。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://b.l0g.jp/wp-content/uploads/2010/07/04.png&quot;&gt;&lt;img src=&quot;http://b.l0g.jp/wp-content/uploads/04-168x300.png&quot; alt=&quot;&quot; title=&quot;04&quot; width=&quot;168&quot; height=&quot;300&quot; class=&quot;alignnone size-medium wp-image-397&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;もちろんGPSのトラックデータはPCにコピーすることができる。そのデータをGoogle Earthやカシミール3Dに重ねあわせてみるとまた面白いだろう。&lt;/p&gt;

&lt;p&gt;このアプリ自体は、なにも登山にだけ用途が限られているわけではなく、ウォーキングやジョギングの際などにも色々使い道が考えられる。日本語化はされていないようだが、「Android携帯を持っていて登山やウォーキングをする」という人は日本にはまだまだ少ないだろうから、そんなものかもしれない。オープンソースなので自分で翻訳してもいいのだが、まずは機能が分かっていないので、もう少しあちこちの山に行く時に使ってみようと思っている。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>コンポの修理</title>
   <link href="http://b.l0g.jp/misc/repairing-compo/"/>
   <updated>2010-06-06T17:29:29-07:00</updated>
   <id>http://b.l0g.jp/misc/repairing-compo</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/misc/repairing-compo/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;コンポの修理&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/misc/repairing-compo/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/misc/repairing-compo/&quot; data-text=&quot;コンポの修理&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/misc/repairing-compo/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ケンウッドのVH7PCというコンポを使っている。いつ買ったのか正確なところは覚えていないが、学生時代であることは間違いないので、おそらく10年ぐらいは使っているだろう。当時、SOTECというPCメーカーがPCとセットで大々的に売り出したものの、あまりの販売不振に価格を劇的に下げて売りさばいたもので、知る人ぞ知る、というモデルだろう。&lt;/p&gt;

&lt;p&gt;さすがに10年にもなるとガタが来て、ウリだったUSBでPCに接続すると音源として使えるという機能も、うまく動かなくなってしまった。ただ、それ以外の機能は問題なく、音質も一人暮らしのアパートでそれほど音量を上げずに聞くには十分である。しかし、最近は右側のスピーカーから音が出ないことが多くなり、どうしたものかと考えていた。&lt;/p&gt;

&lt;p&gt;すると、こんなサイトを見つけた。&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;パーマネントリンク VH-7PCを分解してハンダ補修&quot; rel=&quot;bookmark&quot; href=&quot;http://blog.macfeeling.com/old_article/vh-7pc&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;VH-7PCを分解してハンダ補修&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;早速ハンダを…と行きたいところだったが、ハンダごてを持っていないので、会社からちょっと拝借しようと思っていたら、だらだらと時間がたってしまった。やっと借りてきたので、ネジを外し、カバーを外し、基盤を外し、ハンダを盛り直す。ハンダごてを握るのは一体何年ぶりだろうか。覚えているのは、学生時代にちょっとした電子工作セットを買ってきて作った時以来だ。&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;パーツを元に戻して電源を入れてみたら、ちゃんと左右のスピーカーから音が出るようになった。ちょっとした手間を惜しまなければ、日曜工作レベルで修理出来る電子機器もあるものだなと思った。&lt;/span&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>XperiaもAndroid 2.1でマルチタッチ対応に</title>
   <link href="http://b.l0g.jp/android/xperia-supports-multitouch/"/>
   <updated>2010-04-17T12:46:44-07:00</updated>
   <id>http://b.l0g.jp/android/xperia-supports-multitouch</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/android/xperia-supports-multitouch/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;XperiaもAndroid 2.1でマルチタッチ対応に&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/android/xperia-supports-multitouch/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/android/xperia-supports-multitouch/&quot; data-text=&quot;XperiaもAndroid 2.1でマルチタッチ対応に&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/android/xperia-supports-multitouch/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;日本のソニー・エリクソンの人は明言していないが、海外のメディアではXperiaは将来的にAndroid 2.1に対応するという報道が以前からなされていた。しかし、ハードウェア的にマルチタッチに対応していないため、2.1の目玉機能を活かせないままになるという情報が流れていた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.androidcentral.com/sony-ericsson-xperia-x10-will-never-get-multitouch-hardware-not-capable&quot;&gt;Android Central&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しかし、昨日の情報だと、マルチタッチが使えないというのは誤りで、今年9月にAndroid 2.1に対応すると、マルチタッチが使用できるようになるそうだ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.androidspin.com/2010/04/16/sony-ericsson-xperia-x10-to-get-android-2-1-in-september/&quot;&gt;AndroidSPIN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.androidcentral.com/xperia-x10-now-said-get-android-21-and-multitouch-september&quot;&gt;Android Central&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;とあるソニー・エリクソンの社員が「2010年後半に大きなアップデートがあるだろう」と語り、それはAndroid 2.1への対応とマルチタッチのサポートであると見られているということのようだ。&lt;/p&gt;

&lt;p&gt;個人的にはXperiaには特に不満はないが、あのiPhoneで表示内容の拡大・縮小をやるときの指の動きこそが、素人から見たらいかにもスマートフォン！という動作に見える。あれができれば、名実ともに(？)XperiaはiPhoneと並ぶスマートフォンとみなされるようになるだろう。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WiMAXの通信状況が悪い</title>
   <link href="http://b.l0g.jp/misc/wimax-bad-qos/"/>
   <updated>2010-03-29T18:33:54-07:00</updated>
   <id>http://b.l0g.jp/misc/wimax-bad-qos</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/misc/wimax-bad-qos/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;WiMAXの通信状況が悪い&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/misc/wimax-bad-qos/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/misc/wimax-bad-qos/&quot; data-text=&quot;WiMAXの通信状況が悪い&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/misc/wimax-bad-qos/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最も通信費に金を使っていた時は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bフレッツ マンションタイプ&lt;/li&gt;
  &lt;li&gt;プロバイダ : ニフティ → 朝日ネット&lt;/li&gt;
  &lt;li&gt;E-MOBILE&lt;/li&gt;
  &lt;li&gt;Yahoo!プレミアムの無線LANサービス&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と、月々15000円以上をかけていた。新聞・雑誌定期購読などを含めてこういった月々の固定費を、引越しに関連して一斉に見直した時、光回線を捨てて、全部WiMAX化し、劇的に通信費が安くなった。今は、WiMAXの4480円とYahoo!プレミアムの無線LANサービス525円だけになっている。今住んでいる家だとWiMAXもそこそこの電波状況で入るので、自宅でもモバイルでも同じアダプタを持ち歩けば、光回線よりは遅いが通信費を節約できるというわけだ。&lt;/p&gt;

&lt;p&gt;WiMAXは遮蔽物に弱いので、壁際にWiMAX端末を持っていかないと通信出来る状態にならないが、これは長いUSBケーブルを買ったことで特に大きな問題ではなくなっている。自宅では、半年ほどの間は、大抵の場合電波状況は「ほぼ良好」で、6Mbpsほどの速度が出ていたので、光回線の10分の1ほどではあったが、YouTubeのHDも見られるし、iTunesでPodcastingをダウンロードするのにもそれほどストレスになるほど遅いというわけではなかった。&lt;/p&gt;

&lt;p&gt;ところが、数日前からなぜか急に回線の状態が悪くなった。電波状況はむしろ良くなり「良い」に1段階アップしているぐらいだが、いかんせん安定した通信ができず、ほとんどウェブページはまともに見られず、Podcastingはすぐにダウンロードに失敗してしまう。radiko.jpでラジオを聞くなどもってのほか。pingを打ち続けると、4回に1回ぐらいは落ちるし、一体どうなっているのだろう。電波状況が良いところを見ると、その先の回線が良くないのだろうか。それとも、自分のPCあるいはWiMAX端末に問題があるということ？ いや、仕事中にWiMAX端末を使った時は、問題なく通信できたので、端末が問題ということはないか。いずれにせよ、代替回線がないに等しいのでこの状況は痛い。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Android勉強会に行ってみた</title>
   <link href="http://b.l0g.jp/android/android-workshop/"/>
   <updated>2010-03-28T16:21:28-07:00</updated>
   <id>http://b.l0g.jp/android/android-workshop</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/android/android-workshop/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Android勉強会に行ってみた&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/android/android-workshop/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/android/android-workshop/&quot; data-text=&quot;Android勉強会に行ってみた&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/android/android-workshop/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;正月に立てた今年の目標の中でも、3月までに実現する目標として、以下の4点を挙げた。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;MCITP-SA取得&lt;/li&gt;
  &lt;li&gt;英語サークルに行ってみる&lt;/li&gt;
  &lt;li&gt;IT系その他の勉強会に行ってみる&lt;/li&gt;
  &lt;li&gt;すぐできる副業のアイディアを考える&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1つ目は、基本情報技術者を受験することにしたので、3教科必要なところ2教科までで断念。2つ目は参加済み(英語勉強会)。4つ目としてはAndroidアプリを作ってみようと思っている。で、4つ目に関連して3つ目の目標をクリアすべく、Androidアプリ制作に関する勉強会に参加してみた。&lt;/p&gt;

&lt;p&gt;参加者はこれまでの経験に応じてレベル分けされ、Hello Worldアプリ、ウィジェットのサンプルアプリ、アクティビティを複数持つアプリ、様々なインテントを呼び出す…などといった課題を与えられてそれぞれがパソコンに向かって実習するという形式。ノートパソコン持参ということだったのだが、自分の持っているIdeapad S10eは、画面の縦サイズが微妙に小さいことや、ネットブックなのでCPUが遅いのが気になった。Eclipseだけでも重いのだが、そこにAndroidエミュレータが加わると、1GBメモリでも不足する。その上、ネットブックの遅いHDDとCPUでは、何をするにももたもたするので、ネットブックを持ってどこでもプログラミング、とはいかないかもしれない。&lt;/p&gt;

&lt;p&gt;勉強会に参加してみるとわかるのは(2つしか参加してないが)、新しい知識を得る場所としても重要なのだが、それよりも大きいのは、誰かに教えてもらい、誰かと一緒になって学ぶ場に出ることによって、モチベーションが上がるという意味での重要さだ。一人でEclipseを立ち上げてコーディングするより、周りの人もあーでもないこーでもないと言いながらワイワイやる方が刺激になってよい。企業主催の勉強会なので参加費が少々高めなのが痛いが、たまに参加してモチベーション維持に使うのも良さそうだ。&lt;/p&gt;

&lt;p&gt;さて、初歩の初歩は習ったわけだし、ある程度は自分でかたちを作らないといけない。まずはメモ帳アプリでも作成してみることとしようか。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>英語勉強会なるものに行ってみた</title>
   <link href="http://b.l0g.jp/misc/english-workshop/"/>
   <updated>2010-03-23T17:24:09-07:00</updated>
   <id>http://b.l0g.jp/misc/english-workshop</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/misc/english-workshop/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;英語勉強会なるものに行ってみた&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/misc/english-workshop/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/misc/english-workshop/&quot; data-text=&quot;英語勉強会なるものに行ってみた&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/misc/english-workshop/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;大学に通い始めてから、英語の勉強は一旦ほったらかし状態になってしまった。卒業を控え、英語にももう一度取り組んでみようかと思っていたが、英会話学校は効果は高いが価格も高いし、独学といっても具体的な目標があったり直近で使う予定があるわけでもないのでなかなか難しいか、などと考えて結局具体的になにもせずという日が続いていた。ある時ネットで「英語 勉強会」などと入力して検索してみたら、よさげな勉強会があったので申し込んでみた。&lt;/p&gt;

&lt;p&gt;「中級」と銘打ち、TOEIC800点台ぐらいをターゲットにしている勉強会とのことだったが、参加している人は海外経験があったり、仕事でそれなりに英語を使うというバックグラウンドを持った人ばかりで、レベルは高かった。自分は数年前からずっと「TOEICではそこそこの点を取れるが、しゃべりになるとたどたどしく、単語が出ずにつまずくことがよくある」というレベルを抜け出せていないので、正直厳しかったと言える。やはり自分の場合は、口に出して英語を発音する機会が絶対的に少ない。読むことに関して言えば、英字新聞を買ってみたり、海外のウェブサイトを見たりして、何か1日1本ぐらいは読んでいる。しかし、英語のフレーズを口に出すことはまずないと言っていい。会話の機会がないなら、シャドウイングや音読を繰り返し、慣れておかないと、いわゆる日常会話レベルもままならない。自分の英語力、特に会話力のなさを再認識するとともに、他の能力に比べて話すことは慣れを要求するものだということが分かった。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Xperiaは4月1日発売</title>
   <link href="http://b.l0g.jp/android/xperia-release/"/>
   <updated>2010-03-18T15:25:16-07:00</updated>
   <id>http://b.l0g.jp/android/xperia-release</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/android/xperia-release/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Xperiaは4月1日発売&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/android/xperia-release/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/android/xperia-release/&quot; data-text=&quot;Xperiaは4月1日発売&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/android/xperia-release/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4月発売と言いつつ3月半ばになってもなかなか発売日が公にならなかったXperiaだが、今日やっと4月1日発売と発表された。なぜこんなにもったいぶってぎりぎりまで発表しなかったのか謎だが、こういうものなのだろうか。携帯電話の発売に注目したのは初めてなので、よく分からない。明日18日から、CMの放映とドコモショップでの予約が始まるという。&lt;/p&gt;

&lt;p&gt;4月1日の発売日には、Androidアプリケーションの配信サービス「ドコモマーケット」も始まるが、同日に、パケホーダイの料金体系変更もあるらしい。これまでスマートフォン向けのパケット料金定額サービスは「Bizパケホーダイ」で、それ以外がパケホーダイ(定額)かパケホーダイダブル(二段階定額)だった。4月1日からはパケホーダイダブルがBizパケホーダイと統合されるそうで。つまり、現在パケホーダイダブルを契約している人は、Xperiaを買ってもそのままパケット料金定額だが、そうでない人は定額ではなくなってしまう。パケホーダイの料金は月初に発生するので、プランの変更手続きを4月に入ってから行うと、パケホーダイとパケホーダイダブルの両方の料金が請求されてしまう。なるほど、Xperiaの予約をした時に案内員が「パケホーダイダブルかどうか必ず確認し、未契約なら必ず今月中に手続きして」と言っていたのはそういうことだったのか。&lt;/p&gt;

&lt;p&gt;発売日の発表に合わせて、&lt;a href=&quot;http://www.nttdocomo.co.jp/product/foma/smart_phone/so01b/index.html&quot; target=&quot;_blank&quot;&gt;ドコモのXperiaサイト&lt;/a&gt;も更新されている。スペックなどがより詳しく記載されるようになったが、改めて見ると、CPUのクロックが高速で、カメラの画素数も多く、画面も大きく、スペックでは色々な点でiPhoneの上を行っている。やはり期待大である。前にも書いたがあまりこういう電子機器に最近興味を持たなかったのだが、今回はなぜか期待している。発売日朝一で買いに行きたいところだが、入社式もあるしさすがに4月1日から遅刻していくわけにも行かないので、定時ダッシュで電気屋に走る予定。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>勉強場所</title>
   <link href="http://b.l0g.jp/misc/place-for-studying/"/>
   <updated>2010-03-12T15:45:55-08:00</updated>
   <id>http://b.l0g.jp/misc/place-for-studying</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/misc/place-for-studying/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;勉強場所&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/misc/place-for-studying/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/misc/place-for-studying/&quot; data-text=&quot;勉強場所&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/misc/place-for-studying/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;居心地のいい場所にしようと努力しているわけでもないのだが、自分の部屋にいると気持ちが緩んでリラックスできる。むしろしてしまう。これは、一念発起してなにか勉強をしようと思っても、自分の部屋だとどうしても気が緩んで集中できない、ということにつながる。人それぞれだろうが、自分の場合、自分の部屋だと読書(小説などではなくもうちょっと堅い本)や勉強に類することがはかどるのはまれなことである。すると、なにか集中しなくてはならないことがある時には、外に出ざるを得ない。ところがこれがなかなかちょうどいい場所というのがないものだ。&lt;/p&gt;

&lt;p&gt;カフェやファーストフード店のような所だと、混んでいるのでなければ長居しても追い出されることは少なく、飲み物も飲めるのでなかなかよいと言えばよい。欠点は、何回かに1回は必ずやたらとうるさい客がいて、全く集中できないことがあるという点だ。無視すればいいのだが、妙に大声で話していたり、高校生ぐらいのあんちゃんがゲラゲラ笑っていたり、虚空に向かって何かを罵っているおばさんがいたりして、どうしようもないことがある。特にマクドナルドのように商品の単価が安いところはこういう事が多い。&lt;/p&gt;

&lt;p&gt;自習室のようなところを借りれば、周りも皆勉強しているのだから静かで完璧な環境だろう。自分は借りたことがないが、なぜかというとやはり金がかかる、の1点のみだ。自分に対する投資は惜しむ必要はないのはわかっているのだが、月1万円も狭い机に払うというのがどうも解せない。それよりは、何回かに1回集中できない状況があっても、マクドナルドに行ってコーヒーとホットアップルパイでもたのんで3時間ぐらい粘った方が圧倒的にコストパフォーマンスがよい。&lt;/p&gt;

&lt;p&gt;大学に入学して1年以上経ってからだが、学部の図書館に行ってみた。図書館だと、飲食禁止な上に持ち込みも禁止なので、長時間居座り続けるのには向かないし、PCが使えないのではという先入観で、本を借りるのにしか使っていなかったのだ。しかし、最近の大学図書館はPCを使用できるスペースがあるのが当然らしい。経済学部の図書館だと、PCよりも電卓を弾いている公認会計士でも狙っているような学生の方が多かったりする。飲み物が一切ダメなところ以外は、静かで、周りも同じように勉強していて、PCが使えて(場所によっては電源も)、息抜きに本を漁れて、申し分ない。ただ、自分の通っている大学の図書館は、他学部の図書館を含めても数が限られており、しかも家や会社からすぐというわけではないので、わざわざ行かなければならない。しかも、卒業したら使えなくなる。公共の図書館を使えばいいじゃないかと思うが、大学の図書館と違って、自習ができる机はどこの公共図書館も争奪戦が繰り広げられるのが常である。&lt;/p&gt;

&lt;p&gt;結局、何かと不満を抱えながらも、手近なところにあるという点が最も大きくて、会社近くのマクドナルドか家の近くのモスバーガーに行くことが一番多い。マックはちょっと不潔で、モスは無線LANが使えない上にWiMAXの電波も弱めという欠点があるのだが…。贅沢を言ってはいけない。自分の部屋で勉強がはかどれば、それが一番いいのに、ああだこうだ言って家で勉強できない自分が悪いのだから。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Xperia X10予約</title>
   <link href="http://b.l0g.jp/android/xperia-x10/"/>
   <updated>2010-03-11T14:36:17-08:00</updated>
   <id>http://b.l0g.jp/android/xperia-x10</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/android/xperia-x10/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Xperia X10予約&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/android/xperia-x10/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/android/xperia-x10/&quot; data-text=&quot;Xperia X10予約&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/android/xperia-x10/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ソニー・エリクソンから4月に発売される予定のAndroid携帯、&lt;a title=&quot;ソニー・エリクソン Xperia&quot; href=&quot;http://www.sonyericsson.co.jp/product/docomo/so-01b/&quot; target=&quot;_blank&quot;&gt;Xperia X10&lt;/a&gt;を予約してしまった。別にガジェット好きというわけではないのだが、なんだか今回はビビっと来るものがあって、&lt;a title=&quot;Eclipse + ADTインストール&quot; href=&quot;http://b.l0g.jp/dev/eclipse-adt/&quot; target=&quot;_blank&quot;&gt;Android SDKをセットアップ&lt;/a&gt;してアプリ制作に取り掛かると共に、修理が終わったカメラを取りに行くついでに店頭で予約した。&lt;/p&gt;

&lt;p&gt;4月発売という割には、3月半ばにさしかかろうという現時点でも発売日未定、価格も未定という状態で、店頭では「よろしければご説明いたします」と説明員が寄ってくるものの、一番聞きたいところが聞けないというもどかしい感じだった。にもかかわらず予約しちゃってるが。発売日については全く情報なし、価格については恐らく2万円台後半から3万円程度で、他のドコモの端末よりは安めだと思われる、とのことだった。&lt;/p&gt;

&lt;p&gt;店頭のサンプルを見る限りでは、iPhoneよりほんの少し大きく、手の小さい自分にはちょっと大きい感じがする。Android携帯は前から欲しかったのだが、友人が買った&lt;a title=&quot;HTC&quot; href=&quot;http://www.htc.com/jp/product/ht03a/overview.html&quot; target=&quot;_blank&quot;&gt;HT-03A&lt;/a&gt;は、画面が小さすぎる上にタッチパネルの反応が悪く、動作ももっさりしていてとてもイライラする作りだったので、もっとマシな端末が出るまで待とうと思っていた。Xperia X10は、デザインもよいし大きさもiPhoneサイズでちょうどいいので購入を決断したわけだが、一部のレビューでは、iPhoneよりもやはり&lt;a title=&quot;CNET Japan&quot; href=&quot;http://japan.cnet.com/review/editors/story/0,3800080080,20407069-5,00.htm&quot; target=&quot;_blank&quot;&gt;反応がいまいち&lt;/a&gt;だと書かれていたりする。まあ、このあたりは慣れればそんなものかと思うものなのかもしれないし、買ってから分かるさと楽観的に見ている。&lt;/p&gt;

&lt;p&gt;できれば端末を入手する前に簡単なオリジナルアプリを作り、買ってすぐに動かしてみたいのだが、4月の情報技術者試験の受験勉強をしなければならないので(遅々として進んでいないが…)、そんなことをしている時間はなさそうだ。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>読んだ本20100307</title>
   <link href="http://b.l0g.jp/reading/books-20100307/"/>
   <updated>2010-03-07T15:50:17-08:00</updated>
   <id>http://b.l0g.jp/reading/books-20100307</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/reading/books-20100307/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;読んだ本20100307&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/reading/books-20100307/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/reading/books-20100307/&quot; data-text=&quot;読んだ本20100307&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/reading/books-20100307/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通信制大学の方が落ち着いたら、資格の勉強を本格的に始めようと思っていたのだが、どうしてもお勉強らしいお勉強より、それ以外の本へ手が伸びてしまう。しかも、このところAmazonでどか買い(一度に1万円ぐらい)するようになったので、積ん読本が増えて変に「読まなきゃ」みたいな気持ちになってしまっている。いいのか悪いのか分からない状態である。&lt;/p&gt;

&lt;p&gt;前から読んでみたいと思っていたがなかなか買わずにいたら、ブックオフで100円で売られているのを見つけたので買った。昔のベストセラーはこのパターンで手に入れるとよい。&lt;/p&gt;

&lt;p&gt;今更内容を言うまでもないかもしれないが、要するに、どんなに知能指数が高くても、情動(感情ややる気、我慢など)を上手くコントロールする力(EQ)が高くないと、その人の能力は十分に活かせない。だから、子供の頃からEQを高める必要があるし、大人になってからもトレーニングを続けるべきだということ。これは、社会人になってみるとすぐに分かる法則だ。一般的に見て有名な大学を出ていても、他の人とまともに意思疎通できなかったり、社会人として当たり前と思える気遣いもできないために、平均的な仕事もまともに出来ないという人は、ざらにいる。そういう差ができるのが、EQというわけである。&lt;/p&gt;

&lt;p&gt;読む前はもっと心理学的なアプローチで書かれているのかとおもったら、大脳のはたらきなど脳の仕組でこうなっている、というように科学的な裏付けがはっきりとされており、意外にも理系な内容だった。誰が読んでも面白いと思うが、子どもが生まれたばかりの親には必ず読んでおいて欲しい本である。&lt;/p&gt;

&lt;p&gt;立花隆は、裏付けもないのに知っているかのように科学について書く奴だ、などといった批判もあるようだが、昔からこの人の本を読んでは「もっと勉強しなくては！」と気持ちを奮い立たせたものである。社会人になってからはご無沙汰だが、学生時代はよく読んだ。何かの本で勧められていたので、久しぶりに立花本を買ってみた。&lt;/p&gt;

&lt;p&gt;紆余曲折を経てその職業に就き、その道ではある程度有名になった20代から30代の「青春時代」(立花の定義では40歳ぐらいまで)の人へのインタビューになっている。どの人も、とにかく自分のやっていることが好きでしょうがない、あるいは「これしかない」という気持ちで仕事をしているという様子が伝わってくる。だからこそ、まだ若いにも関わらず一定の評価を受けるまでのレベルに達しているのだろう。振り返ると、仕事にも今一歩のめり込めず、趣味の方もまだまだ足りていないという自分は、なんと中途半端なことだろう。&lt;/p&gt;

&lt;p&gt;山崎豊子の作品は、ドラマ化されると聞くと(テレビは見ないにもかかわらず)原作を買って読破するというパターンになっている。「白い巨塔」然り「沈まぬ太陽」然り、「華麗なる一族」もだ。&lt;/p&gt;

&lt;p&gt;で、今回はこれである。やはり山崎豊子、はずれがない。前半、なぜ主人公の壹岐が商社という世界で働き続けようと決断したのか、ちょっと自分には納得行かないところがあったが、スケールも大きく読み始めると止まらない。少々後半の石油採掘のあたりは専門用語が多すぎて、読み飛ばし気味になった。いずれにせよ、面白い。&lt;/p&gt;

&lt;p&gt;これも何かの本で紹介されていたか、友人のブログで紹介されていた本。気になる本があるとどんどんAmazonのほしい物リストに追加してしまうのだが、そうするとどういうきっかけで追加したのか分からなくなるのだ。すぐに買わないと全く興味を惹かないような本が残っていたりして首を傾げるときもあるが…。&lt;/p&gt;

&lt;p&gt;要約すると、これからの知的労働者は、会社という枠に縛られずフリーランスとして、どこでも仕事が出来るスキルを身につけて行くべきだということ。そのために必要なのは、やる気や集中力を自分のリズムに合わせて制御する術を身につけること、ITを駆使して家族や共同作業者と常に「つながっている」状態を作ること、クラウド上のサービスを使い倒して場所に寄らず同じ仕事が出来る環境を作ること、であると著者は説く。&lt;/p&gt;

&lt;p&gt;今日のブログは家で書いているが、自分も勉強したい時にはノートパソコンを持ってファーストフード店かカフェに行くことが多い。家にいると、ほとんどの場合だらけてしまうからだ。そういうことを続けていると、仕事においても、何もいつも会社に戻って資料を作ったり調べ物をする必要はないじゃないか、と最近考え始めてきていたところだったことも、題名を見てこの本をすぐに買った理由のひとつではある。まあ、日本企業ではこういった考え方(オフィスを持たず自由な場所で仕事をすること＝ノマドワーキング)がすぐに受け入れられるとは到底思わない。しかし、自分のが生きていくために会社は当てにならないと感じる人は徐々に増えていっているように思えるし、実際に自分もそう思う。となると、将来的に会社に直接雇用されている人よりフリーランスが増え、ノマドワーキングのスタイルが定着してくるということは大いにありうると思う。そのスタイルの如何はともかくとして、アテンションコントロールのやり方のところだけでも読んでみる価値はある。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Eclipse + ADTインストール</title>
   <link href="http://b.l0g.jp/android/eclipse-adt/"/>
   <updated>2010-03-06T06:54:05-08:00</updated>
   <id>http://b.l0g.jp/android/eclipse-adt</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/android/eclipse-adt/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;Eclipse + ADTインストール&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/android/eclipse-adt/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/android/eclipse-adt/&quot; data-text=&quot;Eclipse + ADTインストール&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/android/eclipse-adt/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Javaを復習し始めると、ただ勉強するだけではなくてそれを形にしたくなってくる。さて、この頃トレンドのJavaを使った技術といえば、Google App Engineをプラットフォームに使ったWebアプリケーションか、それともAndroidかな？(どっちもGoogleだ)と考えていたところ、ソニー・エリクソンがXperiaというAndroid携帯を4月に出すということで、それを買うついでにAndroidアプリも作ってみようと思った、という至極短絡的な考え方で、Android SDKをインストールしてみた。もともとiPhoneが出た頃から、スマートフォンは欲しかったのだが、ソフトバンクに乗り換えたくなくてどうしようか迷っていたので、まあちょうどよい。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Eclipseをダウンロードする。本家から国際化版をダウンロードしてきてLanguage Packをインストールしてもよいが、日本語化を進めるMergeDocというプロジェクトが、Pleiades All in One日本語化ディストリビューションというのを提供しており、これをインストールするのが楽そうなので、使ってみた。 &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;http://mergedoc.sourceforge.jp/&amp;gt;
  
Eclipse 3.5.2 GalileoのUltimate(JREあり)をダウンロードし、展開するだけ。ただし、長いパス名のファイルが含まれているため、使う解凍ソフトに注意する必要があるようだ。詳しくはMergeDocのトップページ中程を参照のこと。   2. 展開したフォルダには複数のフォルダがあるが、eclipseフォルダ内のeclipse.exeを実行する。お、本家のEclipseは青いスプラッシュスクリーンだが、こちらは赤か。途中でワークプレイスの設定をする画面が現れるので、適当に入力。   3. 始めから日本語化された画面が起動する。「ヘルプ」から「新規ソフトウェアのインストール」を選択する。   4. 「追加」ボタンをクリック。   5. 「サイトの追加」画面が現れるので、名前欄にプラグインの概要(Eclipse Pluginとか)を入力し、ロケーションには&amp;lt;https://dl-ssl.google.com/android/eclipse/&amp;gt;と入力して「OK」を押す。   6. 元の画面で、下のキャプチャ画面のようにDeveloper Toolsにチェックを入れ、「次へ」ボタンをクリック。ここにDeveloper Toolsが表示されないときは、追加ボタン左横のプルダウンメニューから、上の手順で追加したプラグインを選択する。   7. 「完了」ボタンをクリック。   8. プラグインのインストールが進み、途中で署名がないことの警告が出るが、「OK」をクリック。   9. インストールが終わると、Eclipseの再起動を勧めるダイアログが出るので、素直に「はい」をクリック。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;と、これだけで開発ができるわけではなく、Android SDKもインストールしないといけないのだが、これから出かけなくてはならないので、またあとで。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>テレビを復活させてみた</title>
   <link href="http://b.l0g.jp/misc/tv-comesback/"/>
   <updated>2010-03-03T18:06:41-08:00</updated>
   <id>http://b.l0g.jp/misc/tv-comesback</id>
   <content type="html">&lt;div class=&quot;wp_social_bookmarking_light&quot;&gt;
  &lt;div class=&quot;wsbl_hatena_button&quot;&gt;
    &lt;a href=&quot;http://b.hatena.ne.jp/entry/http://b.l0g.jp/misc/tv-comesback/&quot; class=&quot;hatena-bookmark-button&quot; data-hatena-bookmark-title=&quot;テレビを復活させてみた&quot; data-hatena-bookmark-layout=&quot;standard&quot; title=&quot;このエントリーをはてなブックマークに追加&quot;&gt; &lt;img src=&quot;//b.hatena.ne.jp/images/entry-button/button-only@2x.png&quot; alt=&quot;このエントリーをはてなブックマークに追加&quot; width=&quot;20&quot; height=&quot;20&quot; style=&quot;border: none;&quot; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_facebook_like&quot;&gt;
    &lt;div id=&quot;fb-root&quot;&gt;
    &lt;/div&gt;&lt;fb:like href=&quot;http://b.l0g.jp/misc/tv-comesback/&quot; layout=&quot;button_count&quot; action=&quot;like&quot; width=&quot;100&quot; share=&quot;false&quot; show_faces=&quot;false&quot;&gt;&lt;/fb:like&gt;
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_twitter&quot;&gt;
    &amp;lt;a href=&quot;https://twitter.com/share&quot; class=&quot;twitter-share-button&quot;{count} data-url=&quot;http://b.l0g.jp/misc/tv-comesback/&quot; data-text=&quot;テレビを復活させてみた&quot; data-via=&quot;dblmkt &quot; data-lang=&quot;ja&quot;&amp;gt;Tweet
  &lt;/div&gt;
  
  &lt;div class=&quot;wsbl_google_plus_one&quot;&gt;
    &lt;g:plusone size=&quot;medium&quot; annotation=&quot;none&quot; href=&quot;http://b.l0g.jp/misc/tv-comesback/&quot;&gt;&lt;/g:plusone&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br class=&quot;wp_social_bookmarking_light_clear&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今の部屋に引越してきてから、丸一年が経った。引越しの作業中、なんとなくテレビ出さなかったらどうなるだろうと気になったところから始まり、テレビなし生活も1年になった。これまたなんとなく、テレビ出そうかなと思ったので、テレビを出してみた。テレビと言っても、ディスプレイが狭い部屋に2つあるというのを避けたかったので、チューナー(もちろんアナログ)付きアップスキャンコンバータである。&lt;/p&gt;

&lt;p&gt;出すまでは、テレビがあるとなんとはなしに見てしまうので、無駄な時間が増えるのではと思った。しかし、1年間のテレビなし生活でテレビを見なくても何とも思わなくなったのか、意外にテレビをボーっと見て時間を浪費してしまうということはない。朝も、時間がないこともあるが、あれほど毎日欠かさず見ていためざましテレビを見ようとも思わない。引っ越した頃、テレビがないと一人暮らしの寂しさを無性に感じる時があって、出そうかどうしようかかなり迷った事もあったのが嘘のようだ。&lt;/p&gt;

&lt;p&gt;まあ、しばらく様子を見てみようと思う。さらに1年ぐらい経ったら、またテレビなしでは寂しいと感じるようになっているんじゃないかと思う。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;海外の役立つブログ記事などを人力で翻訳して公開する&lt;a href=&quot;https://yakst.com/ja&quot;&gt;Yakst&lt;/a&gt;というプロジェクトをやっています。よろしければそちらもどうぞ！&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
